#!/bin/sh
script="/tmp/$(basename "$0").$(mktemp -u XXXX)"
cat "$(dirname "$0")/shared" > "$script"
echo 'try {' >> "$script"
echo '/\c' >> "$script"
echo '*\c' >> "$script"
cat "$0" >> "$script"
echo '} catch {' >> "$script"
echo 'case e: Exception => {' >> "$script"
echo 'var message = "%s".format(if (e.getMessage != null) e.getMessage else e.getCause )' >> "$script"
echo 'message = "%s%n%s".format(message, "It may help to run delitecfg or manually adjust %s." .format(config.file.getAbsolutePath))' >> "$script"
echo 'println(message)' >> "$script"
echo '}' >> "$script"
echo '}' >> "$script"
export script_home="$(dirname "$0")"
export script_name="$(basename "$0")"
exec scala "$script" "$@"
!#*/

args = javaopt("delite.build.dir", "generated") +: args
args = javaopt("delite.home.dir", config.delite_home) +: args
classpath += config.optiml_classes +: config.framework_classes +: config.lms_classes +: new Path(".")

// to enable BLAS on Windows, uncomment the lines below:
//args = javaopt("blas.home", System.getenv("ICPP_COMPILER12")) +: args
//args = javaopt("blas.init", """call "%s\bin\ipsxe-comp-vars.bat" intel64""".format(System.getenv("ICPP_COMPILER12"))) +: args
// or invoke delites as follows (note the slash that supercedes variable expansion for blas.home!):
//delites "-Dblas.home=%ICPP_COMPILER12%\" "-Dblas.init=call \"%ICPP_COMPILER12%\bin\ipsxe-comp-vars.bat\" intel64" HelloWorldRunner

// to enable BLAS on Linux / Mac OS X, uncomment the lines below:
//args = javaopt("blas.home", "/opt/intel/") +: args
//args = javaopt("blas.init", "source /opt/intel/bin/compilervars.sh intel64") +: args
// or invoke delites as follows:
//delites "-Dblas.home=/opt/intel" "-Dblas.init=source /opt/intel/bin/compilervars.sh intel64" HelloWorldRunner

if (windows) {
  var java_opts = new Args(List())
  args takeWhile { arg => arg.startsWith("-") && arg != "-" } foreach { arg => java_opts = java_opts :+ "%s".format(arg) }
  env("JAVA_OPTS") = java_opts map { java_opt => wrapCommandLineArgument(java_opt) } mkString " "
  args = args dropWhile { arg => arg.startsWith("-") && arg != "-" } dropWhile { arg => arg == "-" }
}

exec(config.scala_virtualized_interpreter)
