#!/bin/sh
script="/tmp/$(basename "$0").$(mktemp -u XXXX)"
cat "$(dirname "$0")/shared" > "$script"
echo 'try {' >> "$script"
echo '/\c' >> "$script"
echo '*\c' >> "$script"
cat "$0" >> "$script"
echo '} catch {' >> "$script"
echo 'case e: Exception => {' >> "$script"
echo 'var message = "%s".format(if (e.getMessage != null) e.getMessage else e.getCause )' >> "$script"
echo 'message = "%s%n%s".format(message, "It may help to run delitecfg or manually adjust %s." .format(config.file.getAbsolutePath))' >> "$script"
#echo 'println(message)' >> "$script"
echo 'println(e.printStackTrace)' >> "$script"
echo '}' >> "$script"
echo '}' >> "$script"
export script_home="$(dirname "$0")"
export script_name="$(basename "$0")"
exec scala "$script" "$@"
!#*/

args = javaopt("delite.code.cache.home", "generatedCache") +: args
args = javaopt("delite.home", config.delite_home) +: args
classpath = config.runtime_classes +: config.scala_vanilla_library_jar +: config.scala_vanilla_compiler_jar

// unfortunately, intel mkl libs cannot be linked statically, since the distribution provides neither libmkl_mc3.a nor libmkl_def.a
// that's why, unlike on Windows, we've got to either hardcode the libpath in LD_LIBRARY_PATH or provide it every time when running delite
// this code presents a shortcut that hopefully simplifies the latter scenario
if (unix) {
  for (javaopt("blas.init", v) <- args) {
    val script = File.createTempFile("blas.init.", ".script")
    val stream = new PrintWriter(script)
    stream.println("#!/usr/bin/env bash")
    stream.println(v)
    val output_file = File.createTempFile("blas.init.", ".output")
    stream.println("echo $LD_LIBRARY_PATH >%s".format(output_file.getAbsolutePath))
    stream.close

    script.setExecutable(true)
    Runtime.getRuntime().exec(script.getAbsolutePath).waitFor
    val output = Source.fromFile(output_file).getLines.toList(0)
    env("LD_LIBRARY_PATH") = "%s:%s".format(System.getenv("LD_LIBRARY_PATH"), output)
  }
}

args = Array()
argv takeWhile { arg => arg.startsWith("-") && arg != "-" } foreach { arg => args = args :+ arg }
args = args :+ "ppl.delite.runtime.Delite"
argv dropWhile { arg => arg.startsWith("-") && arg != "-" } dropWhile { arg => arg == "-"} foreach { arg => args = args :+ arg }
exec("java")
