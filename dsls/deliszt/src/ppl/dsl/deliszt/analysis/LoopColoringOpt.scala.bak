package ppl.dsl.deliszt.analysis

import scala.virtualization.lms.common.SimplifyTransform

trait LoopColoringOpt extends internal.GenericFatCodegen with SimplifyTransform {
  val IR: LoopsFatExp
  import IR._  

  object SimpleIndex {
    def unapply(a: Def[Any]): Option[(Exp[Any], Exp[Int])] = unapplySimpleIndex(a)
  }

  object SimpleDomain {
    def unapply(a: Def[Int]): Option[Exp[Any]] = unapplySimpleDomain(a)
  }

  object SimpleCollect {
    def unapply(a: Def[Any]): Option[Exp[Any]] = unapplySimpleCollect(a)
  }

  object SimpleCollectIf {
    def unapply(a: Def[Any]): Option[(Exp[Any],List[Exp[Boolean]])] = unapplySimpleCollectIf(a)
  }


  override def focusExactScopeFat[A](currentScope0: List[TTP])(result0: List[Exp[Any]])(body: List[TTP] => A): A = {
    var result: List[Exp[Any]] = result0
    var currentScope = currentScope0
    
/*
    println("--- pre-pre-loop fusion: bound")
    val bound = currentScope.flatMap(z => boundSyms(z.rhs))
    bound.foreach(println)

    println("--- pre-pre-loop fusion: dependent on bound")
    val g1 = getFatDependentStuff(currentScope)(bound)
    g1.foreach(println)
*/

    // find loops at current top level
    var Wloops = super.focusExactScopeFat(currentScope)(result) { levelScope => 
      // TODO: cannot in general fuse several effect loops (one effectful and several pure ones is ok though)
      // so we need a strategy. a simple one would be exclude all effectful loops right away (TODO).
      levelScope collect { case e @ TTP(_, SimpleFatLoop(_,_,_)) => e }
    }
    
    // TODO: CHECK IF WLoops symbol is part of stencil
    
    // FIXME: more than one super call means exponential cost -- is there a better way?
    // ---> implicit memoization or explicit data structure
    
    /* problem: fusion might change currentScope quite drastically
       is there some kind of strength reduction transformation to go from here
       to the fused version without recomputing as much as we do now?
    */
    
    if (Wloops.nonEmpty) {
      var done = false

      // keep track of loops in inner scopes
      var UloopSyms = currentScope collect { case e @ TTP(lhs, SimpleFatLoop(_,_,_)) if !Wloops.contains(e) => lhs }
      
      // utils
      def WgetLoopShape(e: TTP): Exp[Int] = e.rhs match { case SimpleFatLoop(s,x,rhs) => s }
      def WgetLoopVar(e: TTP): List[Sym[Int]] = e.rhs match { case SimpleFatLoop(s,x,rhs) => List(x) }
      def WgetLoopRes(e: TTP): List[Def[Any]] = e.rhs match { case SimpleFatLoop(s,x,rhs) => rhs }

      val loopCollectSyms = Wloops flatMap (e => (e.lhs zip WgetLoopRes(e)) collect { case (s, SimpleCollectIf(_,_)) => s })
      
      val loopSyms = Wloops flatMap (_.lhs)
      val loopVars = Wloops flatMap WgetLoopVar

      val WloopSyms = Wloops map (_.lhs)
      val WloopVars = Wloops map WgetLoopVar

      def extendLoopWithCondition(e: TTP, shape: Exp[Int], targetVar: Sym[Int], c: List[Exp[Boolean]]): List[Exp[Any]] = e.rhs match { 
        case SimpleFatLoop(s,x,rhs) => rhs.map { r => findOrCreateDefinition(SimpleLoop(shape,targetVar,applyAddCondition(r,c))).sym }
      }
             
      val t = new SubstTransformer
    
      // actually do the fusion: now transform the loops bodies
      // within fused loops, remove accesses to outcomes of the fusion
      currentScope.foreach {
        case e@TTP(List(s), ThinDef(SimpleIndex(a, i))) =>
          printlog("considering " + e)
          Wloops.find(_.lhs contains a) match {
            case Some(fused) if WgetLoopVar(fused) contains t(i) => 
              val index = fused.lhs.indexOf(a)
              
              printlog("replace " + e + " at " + index + " within " + fused)

              val rhs = WgetLoopRes(fused)(index) match { case SimpleCollectIf(y,c) => y }
              
              t.subst(s) = rhs
            case _ => //e
          }
        case _ => //e
      }
      
      
      currentScope = getFatSchedule(currentScope)(currentScope) // clean things up!

      /*println("<1---"+result0+"/"+result)
      currentScope.foreach(println)
      println("---1>")*/

      // SIMPLIFY! <--- multiple steps necessary???
      
      def withEffectContext(body: =>List[TTP]): List[TTP] = {
        val save = context
        context = Nil
        val scope = body
        val leftovereffects = context.filterNot((scope.flatMap(_.lhs)) contains _)
        if (leftovereffects.nonEmpty) 
          printlog("warning: transformation left effect context (will be discarded): "+leftovereffects)
        context = save
        scope
      }
      
      currentScope = withEffectContext { transformAll(currentScope, t) }
      result = t(result)
      currentScope = getFatSchedule(currentScope)(currentScope) // clean things up!

      currentScope = withEffectContext { transformAll(currentScope, t) }
      result = t(result)
      currentScope = getFatSchedule(currentScope)(currentScope) // clean things up!

      currentScope = withEffectContext { transformAll(currentScope, t) }
      result = t(result)
      currentScope = getFatSchedule(currentScope)(result) // clean things up!


      // once more to see if we are converged
      val previousScope = currentScope
      
      currentScope = withEffectContext { transformAll(currentScope, t) }
      result = t(result)
      currentScope = getFatSchedule(currentScope)(result) // clean things up!
      
      if (currentScope != previousScope) { // check convergence
        printerr("error: transformation of scope contents has not converged")
        printdbg(previousScope + "-->" + currentScope)
      }
      
      /*println("<x---"+result0+"/"+result)
      currentScope.foreach(println)
      println("---x>")*/

      //Wloops = currentScope collect { case e @ TTP(_, FatLoop(_,_,_)) => e }

      Wloops = transformAll(Wloops, t)
      
      UloopSyms = UloopSyms map (t onlySyms _) // just lookup the symbols
    }
    
    // prune Wloops (some might be no longer necessary)
    /* Wloops = Wloops map {
      case TTP(lhs, SimpleFatLoop(s, x, rhs)) =>
        val ex = lhs map (s => currentScope exists (_.lhs == List(s)))
        def select[A](a: List[A], b: List[Boolean]) = (a zip b) collect { case (w, true) => w }
        TTP(select(lhs, ex), SimpleFatLoop(s, x, select(rhs, ex)))
    } */
    
    // PREVIOUS PROBLEM: don't throw out all loops, might have some that are *not* in levelScope
    // note: if we don't do it here, we will likely see a problem going back to innerScope in 
    // FatCodegen.focusExactScopeFat below. --> how to go back from SimpleFatLoop to VectorPlus??
    // UPDATE: UloopSyms puts a tentative fix in place. check if it is sufficient!!
    // what is the reason we cannot just look at Wloops??
    currentScope = currentScope.filter { case e@TTP(lhs, _: AbstractFatLoop) => 
      val keep = UloopSyms contains lhs
      //if (!keep) println("dropping: " + e + ", not int UloopSyms: " + UloopSyms)
      keep case _ => true } ::: Wloops

    // schedule (and emit)
    currentScope = getFatSchedule(currentScope)(result) // clean things up!

    // the caller of emitBlock will quite likely call getBlockResult afterwards,
    // and if we change the result here, the caller will emit a reference to a sym
    // that doesn't exist (because it was replaced)

    if (result0 != result) {
      printlog("super.focusExactScopeFat with result changed from " + result0 + " to " + result)
      
      (result0 zip result) foreach {
        case (r0 @ Def(Reify(x, _, _)),Def(Reify(y, u, es))) => 
          if (!x.isInstanceOf[Sym[Any]])
            printlog("non-sym block result: " + x + " to " + y)
          else
            currentScope = currentScope :+ TTP(List(x.asInstanceOf[Sym[Any]]), ThinDef(Forward(y)))
          currentScope = currentScope :+ TTP(List(r0.asInstanceOf[Sym[Any]]), ThinDef(Reify(x,u,es)))
          // should rewire result so that x->y assignment is inserted
        case (r0,r) => 
          if (r0 != r) currentScope = currentScope :+ TTP(List(r0.asInstanceOf[Sym[Any]]), ThinDef(Forward(r)))
      }
      
    }
    
    // do what super does ...
    super.focusExactScopeFat(currentScope)(result0)(body)
  }
}
