/*****************************************
  Emitting Generated Code                  
*******************************************/
class NaiveBayes extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = println("Naive Bayes Example Application")
val x2 = x0.length
val x3 = x2 < 2
val x7 = {
def x7thenb(): Nothing = {
val x4 = println("NaiveBayes <training file> <test file>")
val x5 = exit(-1)
x5
}
def x7elseb(): Unit = {
()
}
if (x3) {
x7thenb()
} else {
x7elseb()
}
}
val x8 = x0(0)
def x131_block = { 
val x10 = new java.io.FileReader(x8)
val x11 = new java.io.BufferedReader(x10)
var x12 = x11
val x13 = x12
val x14 = x13.readLine()
var x15 = x14
val x16 = x12
val x17 = x16.readLine()
var x18 = x17
val x19 = x18
val x20 = x19.trim()
val x21 = x20.split("\\s+")
val x22 = x21(0)
val x23 = java.lang.Integer.parseInt(x22)
val x26 = x23 < 0
val x24 = x21(1)
val x25 = java.lang.Integer.parseInt(x24)
val x27 = x25 < 0
val x28 = x26 || x27
val x31 = {
def x31thenb(): Nothing = {
val x29 = error("Illegal input to readTokenMatrix")
x29
}
def x31elseb(): Unit = {
()
}
if (x28) {
x31thenb()
} else {
x31elseb()
}
}
val x32 = x12
val x33 = x32.readLine()
val x34 = new generated.scala.DoubleVectorImpl(0,true)
var x36 : Int = 0
val x50 = while (x36 < x23) {
val x37 = x12
val x38 = x37.readLine()
x18 = x38
val x40 = x18
val x41 = x40.trim()
x18 = x41
val x43 = x18
val x47 = x34.length
val x44 = x43.split("\\s+")
val x45 = x44(0)
val x46 = java.lang.Double.parseDouble(x45)
val x48 = x34.insert(x47, x46)
x48
x36 = x36 + 1
}
val x51 = x34.length
val x52 = x34.isRow
val x53 = !x52
val x59 = {
val x55 = new generated.scala.DoubleVectorImpl(x51,x53)
x55
}
var x54 = 0
while (x54 < x51) {  // begin thin loop x59
val x57 = x34(x54)
x59.dcUpdate(x54, x57)
x54 += 1
} // end thin loop x59
val x60 = x12
val x61 = x60.close()
val x62 = new java.io.FileReader(x8)
val x63 = new java.io.BufferedReader(x62)
x12 = x63
val x65 = x12
val x66 = x65.readLine()
val x67 = x12
val x68 = x67.readLine()
val x69 = x12
val x70 = x69.readLine()
val x71 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](0,true)
var x72 : Int = 0
val x105 = while (x72 < x23) {
val x73 = x12
val x74 = x73.readLine()
x18 = x74
val x76 = x18
val x77 = x76.trim()
x18 = x77
val x79 = x18
val x81 = new generated.scala.DoubleVectorImpl(x25,true)
var x82 = 0
var x83 = 1
val x80 = x79.split("\\s+")
val x85 = x80.length
val x86 = x85 - 1
val x101 = while ({val x84 = x83
val x87 = x84 < x86
x87}) {
val x89 = x83
val x90 = x80(x89)
val x91 = java.lang.Integer.parseInt(x90)
val x92 = x82 += x91
val x93 = x82
val x94 = x83
val x95 = x94 + 1
val x96 = x80(x95)
val x97 = java.lang.Double.parseDouble(x96)
val x98 = x81(x93) = x97
val x99 = x83 += 2
()
}
val x102 = x71.length
val x103 = x71.insert(x102, x81)
x103
x72 = x72 + 1
}
def x125_block = { 
val x106 = x71.length
val x107 = x106 > 0
val x111 = {
def x111thenb(): Int = {
val x108 = x71(0)
val x109 = x108.length
x109
}
def x111elseb(): Int = {
0
}
if (x107) {
x111thenb()
} else {
x111elseb()
}
}
val x112 = new generated.scala.DoubleMatrixImpl(x106,x111)
var x114 : Int = 0
val x123 = while (x114 < x106) {
var x116 : Int = 0
val x121 = while (x116 < x111) {
val x117 = x71(x114)
val x118 = x117(x116)
val x119 = x112(x114, x116) = x118
x119
x116 = x116 + 1
}
x121
x114 = x114 + 1
}
x112
}
val x125 = x125_block
val x126 = x12
val x127 = x126.close()
val x128 = new generated.scala.DoubleLabelsImpl(x59)
val x129 = new generated.scala.DoubleDoubleTrainingSetImpl(x125,x128)
x129
}
val x131 = x131_block
val x132 = println("tic:" + (System.nanoTime / 1000000L))
val x133 = x131.numRows
val x135 = new generated.scala.IndexVectorRangeImpl(0,x133)
val x134 = x131.numCols
val x146 = x135.length
val x147 = x135.isRow
def x150_block = {
val x148 = new generated.scala.DoubleVectorImpl(x146,x147)
var mapIdx = 0
while (mapIdx < x135.size) {
val x136 = x135.dcApply(mapIdx)
x148.dcUpdate(mapIdx,  {
var x145: Double = 0
var x140 = 0
while (x140 < x134) {  // begin fat loop x145
val x143 = x131(x136, x140)
val x141 = x145
val x142 = x143
val x144 = x141 + x142
x145 = x144
x140 += 1
} // end fat loop x145
x145
})
mapIdx += 1
} // end while
x148
}
val x150 = x150_block
val x151 = "Training model on "+x133
val x152 = x151+" documents."
val x153 = println(x152)
def x164_block = { 
val x162 = new generated.scala.DoubleVectorImpl(x134,true)
x162
}
val x164 = x164_block
def x167_block = { 
val x165 = new generated.scala.DoubleVectorImpl(x134,true)
x165
}
val x167 = x167_block
val x168 = new generated.scala.IndexVectorRangeImpl(0,x134)
val x154 = x131.labels
val x203 = x134
def x216_block = {
var forIdx = 0
while (forIdx < x168.size) {
val x169 = x168.dcApply(forIdx)
var x170 = 0.0
var x171 = 0.0
var x172 = 0.0
var x173 = 0.0
var x174 = 0
val x199 = while ({val x175 = x174
val x176 = x175 < x133
x176}) {
val x178 = x174
val x179 = x154(x178)
val x180 = x179==1
val x196 = {
def x196thenb(): Unit = {
val x182 = x174
val x181 = x131.transposed
val x183 = x181(x169, x182)
val x184 = x170 += x183
val x185 = x174
val x186 = x150(x185)
val x187 = x171 += x186
()
}
def x196elseb(): Unit = {
val x189 = x174
val x181 = x131.transposed
val x190 = x181(x169, x189)
val x191 = x172 += x190
val x192 = x174
val x193 = x150(x192)
val x194 = x173 += x193
()
}
if (x180) {
x196thenb()
} else {
x196elseb()
}
}
val x197 = x174 += 1
()
}
val x200 = x170
val x202 = x171
val x201 = x200 + 1.0
val x204 = x202 + x203
val x205 = x201 / x204
val x206 = x164(x169) = x205
val x207 = x172
val x209 = x173
val x208 = x207 + 1.0
val x210 = x209 + x203
val x211 = x208 / x210
val x212 = x167(x169) = x211
x212
forIdx += 1
} // end while
}
val x216 = x216_block
val x219 = println("toc:" + (System.nanoTime / 1000000L))
val x9 = x0(1)
def x341_block = { 
val x220 = new java.io.FileReader(x9)
val x221 = new java.io.BufferedReader(x220)
var x222 = x221
val x223 = x222
val x224 = x223.readLine()
var x225 = x224
val x226 = x222
val x227 = x226.readLine()
var x228 = x227
val x229 = x228
val x230 = x229.trim()
val x231 = x230.split("\\s+")
val x232 = x231(0)
val x233 = java.lang.Integer.parseInt(x232)
val x236 = x233 < 0
val x234 = x231(1)
val x235 = java.lang.Integer.parseInt(x234)
val x237 = x235 < 0
val x238 = x236 || x237
val x241 = {
def x241thenb(): Nothing = {
val x239 = error("Illegal input to readTokenMatrix")
x239
}
def x241elseb(): Unit = {
()
}
if (x238) {
x241thenb()
} else {
x241elseb()
}
}
val x242 = x222
val x243 = x242.readLine()
val x244 = new generated.scala.DoubleVectorImpl(0,true)
var x246 : Int = 0
val x260 = while (x246 < x233) {
val x247 = x222
val x248 = x247.readLine()
x228 = x248
val x250 = x228
val x251 = x250.trim()
x228 = x251
val x253 = x228
val x257 = x244.length
val x254 = x253.split("\\s+")
val x255 = x254(0)
val x256 = java.lang.Double.parseDouble(x255)
val x258 = x244.insert(x257, x256)
x258
x246 = x246 + 1
}
val x261 = x244.length
val x262 = x244.isRow
val x263 = !x262
val x269 = {
val x265 = new generated.scala.DoubleVectorImpl(x261,x263)
x265
}
var x264 = 0
while (x264 < x261) {  // begin thin loop x269
val x267 = x244(x264)
x269.dcUpdate(x264, x267)
x264 += 1
} // end thin loop x269
val x270 = x222
val x271 = x270.close()
val x272 = new java.io.FileReader(x9)
val x273 = new java.io.BufferedReader(x272)
x222 = x273
val x275 = x222
val x276 = x275.readLine()
val x277 = x222
val x278 = x277.readLine()
val x279 = x222
val x280 = x279.readLine()
val x281 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](0,true)
var x282 : Int = 0
val x315 = while (x282 < x233) {
val x283 = x222
val x284 = x283.readLine()
x228 = x284
val x286 = x228
val x287 = x286.trim()
x228 = x287
val x289 = x228
val x291 = new generated.scala.DoubleVectorImpl(x235,true)
var x292 = 0
var x293 = 1
val x290 = x289.split("\\s+")
val x295 = x290.length
val x296 = x295 - 1
val x311 = while ({val x294 = x293
val x297 = x294 < x296
x297}) {
val x299 = x293
val x300 = x290(x299)
val x301 = java.lang.Integer.parseInt(x300)
val x302 = x292 += x301
val x303 = x292
val x304 = x293
val x305 = x304 + 1
val x306 = x290(x305)
val x307 = java.lang.Double.parseDouble(x306)
val x308 = x291(x303) = x307
val x309 = x293 += 2
()
}
val x312 = x281.length
val x313 = x281.insert(x312, x291)
x313
x282 = x282 + 1
}
def x335_block = { 
val x316 = x281.length
val x317 = x316 > 0
val x321 = {
def x321thenb(): Int = {
val x318 = x281(0)
val x319 = x318.length
x319
}
def x321elseb(): Int = {
0
}
if (x317) {
x321thenb()
} else {
x321elseb()
}
}
val x322 = new generated.scala.DoubleMatrixImpl(x316,x321)
var x324 : Int = 0
val x333 = while (x324 < x316) {
var x326 : Int = 0
val x331 = while (x326 < x321) {
val x327 = x281(x324)
val x328 = x327(x326)
val x329 = x322(x324, x326) = x328
x329
x326 = x326 + 1
}
x331
x324 = x324 + 1
}
x322
}
val x335 = x335_block
val x336 = x222
val x337 = x336.close()
val x338 = new generated.scala.DoubleLabelsImpl(x269)
val x339 = new generated.scala.DoubleDoubleTrainingSetImpl(x335,x338)
x339
}
val x341 = x341_block
val x342 = println("phi_y1: ")
def x364_block = { 
val x343 = x164.isRow
val x362 = {
def x362thenb(): Unit = {
val x344 = print("[ ")
var x346 : Int = 0
val x351 = while (x346 < x134) {
val x347 = x164(x346)
val x348 = print(x347)
val x349 = print(" ")
x349
x346 = x346 + 1
}
val x352 = print("]\n")
x352
}
def x362elseb(): Unit = {
var x354 : Int = 0
val x360 = while (x354 < x134) {
val x355 = print("[")
val x356 = x164(x354)
val x357 = print(x356)
val x358 = print(" ]\n")
x358
x354 = x354 + 1
}
x360
}
if (x343) {
x362thenb()
} else {
x362elseb()
}
}
x362
}
val x364 = x364_block
val x365 = println("phi_y0: ")
def x386_block = { 
val x366 = x167.isRow
val x384 = {
def x384thenb(): Unit = {
val x367 = print("[ ")
var x368 : Int = 0
val x373 = while (x368 < x134) {
val x369 = x167(x368)
val x370 = print(x369)
val x371 = print(" ")
x371
x368 = x368 + 1
}
val x374 = print("]\n")
x374
}
def x384elseb(): Unit = {
var x376 : Int = 0
val x382 = while (x376 < x134) {
val x377 = print("[")
val x378 = x167(x376)
val x379 = print(x378)
val x380 = print(" ]\n")
x380
x376 = x376 + 1
}
x382
}
if (x366) {
x384thenb()
} else {
x384elseb()
}
}
x384
}
val x386 = x386_block
val x155 = x154.length
var x161: Double = 0
var x156 = 0
while (x156 < x155) {  // begin fat loop x161
val x159 = x154(x156)
val x157 = x161
val x158 = x159
val x160 = x157 + x158
x161 = x160
x156 += 1
} // end fat loop x161
val x217 = x133
val x218 = x161 / x217
val x387 = "phi_y: "+x218
val x388 = println(x387)
val x389 = x341.numRows
val x391 = "Testing model on "+x389
val x392 = x391+" documents."
val x393 = println(x392)
val x394 = new generated.scala.IndexVectorRangeImpl(0,x389)
val x390 = x341.numCols
val x415 = new generated.scala.RangeVectorImpl(0,x390,1,true)
val x431 = x394.length
val x432 = x394.isRow
def x435_block = {
val x433 = new generated.scala.DoubleVectorImpl(x431,x432)
var mapIdx = 0
while (mapIdx < x394.size) {
val x395 = x394.dcApply(mapIdx)
x433.dcUpdate(mapIdx,  {
def x425_block = {
val x396 = x415.dcApply(0)
var x416 = {
val x397 = x341(x395, x396)
val x398 = x397 > 0.0
val x413 = {
def x413thenb(): scala.Tuple2[Double, Double] = {
val x399 = x167(x396)
val x400 = Math.log(x399)
val x401 = 1.0 - x218
val x402 = Math.log(x401)
val x405 = x164(x396)
val x406 = Math.log(x405)
val x407 = Math.log(x218)
val x403 = x400 + x402
val x404 = x403 * x397
val x408 = x406 + x407
val x409 = x408 * x397
val x410 = (x404,x409)
x410
}
def x413elseb(): scala.Tuple2[Double, Double] = {
val x412 = (0.0,0.0)
x412
}
if (x398) {
x413thenb()
} else {
x413elseb()
}
}
x413
}
var mapReduceIdx = 1
while (mapReduceIdx < x415.size) {
val x396 = x415.dcApply(mapReduceIdx)
val x417 = {
val x397 = x341(x395, x396)
val x398 = x397 > 0.0
val x413 = {
def x413thenb(): scala.Tuple2[Double, Double] = {
val x399 = x167(x396)
val x400 = Math.log(x399)
val x401 = 1.0 - x218
val x402 = Math.log(x401)
val x405 = x164(x396)
val x406 = Math.log(x405)
val x407 = Math.log(x218)
val x403 = x400 + x402
val x404 = x403 * x397
val x408 = x406 + x407
val x409 = x408 * x397
val x410 = (x404,x409)
x410
}
def x413elseb(): scala.Tuple2[Double, Double] = {
val x412 = (0.0,0.0)
x412
}
if (x398) {
x413thenb()
} else {
x413elseb()
}
}
x413
}
x416 = {
val x418 = x416._1
val x420 = x417._1
val x422 = x418 + x420
val x419 = x416._2
val x421 = x417._2
val x423 = x419 + x421
val x424 = (x422,x423)
x424
}
mapReduceIdx += 1
} // end while
x416
}
val x425 = x425_block
val x426 = x425._1
val x427 = x425._2
val x428 = x427 > x426
val x429 = {
def x429thenb(): Double = {
1.0
}
def x429elseb(): Double = {
0.0
}
if (x428) {
x429thenb()
} else {
x429elseb()
}
}
x429
})
mapIdx += 1
} // end while
x433
}
val x435 = x435_block
var x436 = 0
val x439 = x341.labels
var x438 : Int = 0
val x447 = while (x438 < x389) {
val x440 = x439(x438)
val x441 = x435(x438)
val x442 = x440 != x441
val x445 = {
def x445thenb(): Unit = {
val x443 = x436 += 1
()
}
def x445elseb(): Unit = {
()
}
if (x442) {
x445thenb()
} else {
x445elseb()
}
}
x445
x438 = x438 + 1
}
val x448 = x436
val x449 = x448.doubleValue()
val x450 = x389.doubleValue()
val x451 = x449 / x450
val x452 = "Test error: "+x451
val x453 = println(x452)
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
