/*****************************************
  Emitting Generated Code                  
*******************************************/
class LBPDenoiseRunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 1
val x7 = {
def x7thenb(): Nothing = {
val x3 = println("Usage: GraphLBP <rows> <cols>")
val x4 = println("Example: GraphLBP 100 100")
val x5 = exit(-1)
x5
}
def x7elseb(): Unit = {
()
}
if (x2) {
x7thenb()
} else {
x7elseb()
}
}
var x8: Int = 100
var x9: Int = 100
var x10: java.lang.String = "laplace"
val x11 = new generated.scala.DoubleMatrixImpl(5,5)
val x12 = x0(0)
val x57 = { 
val x13 = new java.io.FileReader(x12)
val x14 = new java.io.BufferedReader(x13)
val x15 = x14.readLine()
var x16: java.lang.String = x15
val x17 = x16
val x18 = x17.trim()
x16 = x18
val x20 = x16
val x21 = x20.split("\\s+")
var x22: Array[java.lang.String] = x21
val x23 = x22
val x24 = x23.length
val x25 = new generated.scala.DoubleMatrixImpl(0,x24)
val x54 = while ({val x26 = x16
val x27 = x26 != null
x27}) {
val x29 = x22
val x30 = x29.length
val x31 = new generated.scala.DoubleVectorImpl(x30,true)
var x33 : Int = 0
val x39 = while (x33 < x30) {
val x34 = x22
val x35 = x34(x33)
val x36 = java.lang.Double.parseDouble(x35)
val x37 = x31(x33) = x36
x37
x33 = x33 + 1
}
val x40 = x25.numRows
val x41 = x25.insertRow(x40,x31)
val x42 = x14.readLine()
x16 = x42
val x44 = x16
val x45 = x44 != null
val x52 = {
def x52thenb(): Unit = {
val x46 = x44.trim()
x16 = x46
val x48 = x16
val x49 = x48.split("\\s+")
x22 = x49
()
}
def x52elseb(): Unit = {
()
}
if (x45) {
x52thenb()
} else {
x52elseb()
}
}
x52
}
val x55 = x14.close()
x25
}
val x61 = x57.numCols
val x62 = java.lang.String.valueOf(x61)
val x65 = x57.numRows
val x66 = java.lang.String.valueOf(x65)
val x67 = x66+"\n"
val x81 = List()
val x83 = new generated.scala.IndexVectorRangeImpl(0,x65)
def x74_block = {
var x70 = x57.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x57.size) { // begin reduce loop x74
val x71 = x57.dcApply(reduceIdx)
x70 = {
val x72 = x70 < x71
val x73 = {
def x73thenb(): Double = {
x70
}
def x73elseb(): Double = {
x71
}
if (x72) {
x73thenb()
} else {
x73elseb()
}
}
x73
}
reduceIdx += 1
} // end reduce loop x74
x70
}
val x74 = x74_block
def x79_block = {
var x75 = x57.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x57.size) { // begin reduce loop x79
val x76 = x57.dcApply(reduceIdx)
x75 = {
val x77 = x75 > x76
val x78 = {
def x78thenb(): Double = {
x75
}
def x78elseb(): Double = {
x76
}
if (x77) {
x78thenb()
} else {
x78elseb()
}
}
x78
}
reduceIdx += 1
} // end reduce loop x79
x75
}
val x79 = x79_block
val x86 = x74 != x79
val x107 = { 
val x58 = new java.io.FileWriter("check.pgm")
val x59 = new java.io.BufferedWriter(x58)
val x60 = x59.write("P2\n")
val x63 = x59.write(x62)
val x64 = x59.write(" ")
val x68 = x59.write(x67)
val x69 = x59.write("255\n")
def x104_block = {
var forIdx = 0
while (forIdx < x83.size) { // begin foreach loop x104
val x82 = x83.dcApply(forIdx)
val x84 = x57.getRow(x82)
def x101_block = {
var forIdx = 0
while (forIdx < x84.size) { // begin foreach loop x101
val x85 = x84.dcApply(forIdx)
val x97 = {
def x97thenb(): Unit = {
val x87 = x85 - x74
val x88 = 255.0 * x87
val x89 = x79 - x74
val x90 = x88 / x89
val x91 = x90.asInstanceOf[Int]
val x92 = x91+""
val x93 = x59.write(x92)
x93
}
def x97elseb(): Unit = {
val x95 = x59.write("0")
x95
}
if (x86) {
x97thenb()
} else {
x97elseb()
}
}
val x98 = x59.write("\t")
x98
forIdx += 1
} // end foreach loop x101
}
val x101 = x101_block
val x102 = x59.write("\n")
x102
forIdx += 1
} // end foreach loop x104
}
val x104 = x104_block
val x105 = x59.close()
x105
}
val x109 = new generated.scala.UndirectedGraphImpl[generated.scala.MessageVertex, generated.scala.MessageEdge]()
val x112 = { 
val x110 = new generated.scala.DoubleVectorImpl(5,true)
x110
}
val x113 = x112.isRow
val x119 = {
val x115 = new generated.scala.DoubleVectorImpl(5,x113)
x115
}
var x114 = 0
while (x114 < 5) {  // begin fat loop x119
val x117 = x112(x114)
val x118 = Math.exp(x117)
x119.dcUpdate(x114, x118)
x114 += 1
} // end fat loop x119
val x120 = x119.length
var x126: Double = 0
var x121 = 0
while (x121 < x120) {  // begin fat loop x126
val x124 = x119(x121)
val x122 = x126
val x123 = x124
val x125 = x122 + x123
x126 = x125
x121 += 1
} // end fat loop x126
val x127 = Math.log(x126)
val x108 = x57.cloneL
val x131 = x108.numRows
val x132 = x108.numCols
val x133 = new generated.scala.MatrixImpl[generated.scala.MessageVertex](x131,x132)
var x134: Int = 0
var x135: Int = 0
val x255 = x132 - 1
val x360 = x131 - 1
val x557 = Seq()
val x658 = x11.numRows
val x659 = new generated.scala.VectorImpl[generated.scala.MatrixRow[Double]](x658,true)
val x660 = x11.numRows
var x662 : Int = 0
val x666 = while (x662 < x660) {
val x663 = x11.getRow(x662)
val x664 = x659(x662) = x663
x664
x662 = x662 + 1
}
val x691 = 0.1 != 0
val x829 = java.lang.String.valueOf(x132)
val x832 = java.lang.String.valueOf(x131)
val x833 = x832+"\n"
val x848 = new generated.scala.IndexVectorRangeImpl(0,x131)
def x840_block = {
var x836 = x108.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x108.size) { // begin reduce loop x840
val x837 = x108.dcApply(reduceIdx)
x836 = {
val x838 = x836 < x837
val x839 = {
def x839thenb(): Double = {
x836
}
def x839elseb(): Double = {
x837
}
if (x838) {
x839thenb()
} else {
x839elseb()
}
}
x839
}
reduceIdx += 1
} // end reduce loop x840
x836
}
val x840 = x840_block
def x845_block = {
var x841 = x108.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x108.size) { // begin reduce loop x845
val x842 = x108.dcApply(reduceIdx)
x841 = {
val x843 = x841 > x842
val x844 = {
def x844thenb(): Double = {
x841
}
def x844elseb(): Double = {
x842
}
if (x843) {
x844thenb()
} else {
x844elseb()
}
}
x844
}
reduceIdx += 1
} // end reduce loop x845
x841
}
val x845 = x845_block
val x851 = x840 != x845
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
