/*****************************************
  Emitting Generated Code                  
*******************************************/
class kmeansRunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 1
val x6 = {
def x6thenb(): Nothing = {
val x3 = println("Usage: kmeans <input data file> <initmu data file>")
val x4 = exit(-1)
x4
}
if (x2) {
x6thenb()
}
}
val x7 = x0(0)
val x53 = { 
val x8 = new java.io.FileReader(x7)
val x9 = new java.io.BufferedReader(x8)
val x10 = x9.readLine()
var x11: java.lang.String = x10
val x12 = x11
val x13 = x12.trim()
x11 = x13
val x15 = x11
val x16 = x15.split("\\s+")
var x17: Array[java.lang.String] = x16
val x18 = x17
val x19 = x18.length
val x20 = new generated.scala.DoubleMatrixImpl(0,x19)
val x50 = while ({val x21 = x11
val x22 = x21 != null
x22}) {
val x24 = x17
val x25 = x24.length
val x26 = new generated.scala.DoubleVectorImpl(x25,true)
var x28 : Int = 0
val x34 = while (x28 < x25) {
val x29 = x17
val x30 = x29(x28)
val x31 = java.lang.Double.parseDouble(x30)
val x32 = x26(x28) = x31
x32
x28 = x28 + 1
}
val x35 = x26.cloneL
val x36 = x20.numRows
val x37 = x20.insertRow(x36,x35)
val x38 = x9.readLine()
x11 = x38
val x40 = x11
val x41 = x40 != null
val x48 = {
def x48thenb(): Unit = {
val x42 = x40.trim()
x11 = x42
val x44 = x11
val x45 = x44.split("\\s+")
x17 = x45
()
}
if (x41) {
x48thenb()
}
}
x48
}
val x51 = x9.close()
x20
}
val x54 = new generated.scala.IntVectorImpl(0,false)
val x55 = new generated.scala.IntLabelsImpl(x54)
val x56 = new generated.scala.DoubleIntTrainingSetImpl(x53,x55)
val x57 = x0(1)
val x103 = { 
val x58 = new java.io.FileReader(x57)
val x59 = new java.io.BufferedReader(x58)
val x60 = x59.readLine()
var x61: java.lang.String = x60
val x62 = x61
val x63 = x62.trim()
x61 = x63
val x65 = x61
val x66 = x65.split("\\s+")
var x67: Array[java.lang.String] = x66
val x68 = x67
val x69 = x68.length
val x70 = new generated.scala.DoubleMatrixImpl(0,x69)
val x100 = while ({val x71 = x61
val x72 = x71 != null
x72}) {
val x74 = x67
val x75 = x74.length
val x76 = new generated.scala.DoubleVectorImpl(x75,true)
var x78 : Int = 0
val x84 = while (x78 < x75) {
val x79 = x67
val x80 = x79(x78)
val x81 = java.lang.Double.parseDouble(x80)
val x82 = x76(x78) = x81
x82
x78 = x78 + 1
}
val x85 = x76.cloneL
val x86 = x70.numRows
val x87 = x70.insertRow(x86,x85)
val x88 = x59.readLine()
x61 = x88
val x90 = x61
val x91 = x90 != null
val x98 = {
def x98thenb(): Unit = {
val x92 = x90.trim()
x61 = x92
val x94 = x61
val x95 = x94.split("\\s+")
x67 = x95
()
}
if (x91) {
x98thenb()
}
}
x98
}
val x101 = x59.close()
x70
}
val x104 = Seq()
val x105 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
val x106 = x56.numRows
val x107 = x56.numCols
var x108: Int = 0
var x109: Double = 1.7976931348623157E308
val x110 = null.asInstanceOf[generated.scala.Matrix[Double]]
var x111: generated.scala.Matrix[Double] = x110
var x112: generated.scala.Matrix[Double] = x103
var x113: Int = 0
val x114 = x109
val x115 = Math.abs(x114)
val x116 = x115 > 0.0010
val x117 = x113
val x118 = x117 < 1000
val x119 = x116 && x118
val x123 = new generated.scala.IndexVectorRangeImpl(0,x106)
val x178 = x123.length
val x179 = x123.isRow
val x183 = new generated.scala.IndexVectorRangeImpl(0,16)
val x184 = generated.scala.IndexVectorWCImpl
val x185 = new generated.scala.IndexVector2Impl(x183,x184)
val x186 = x185.rowInd
val x187 = x186.isInstanceOf[generated.scala.IndexVector]
val x188 = x185.colInd
val x189 = x188.isInstanceOf[generated.scala.IndexVectorWC]
val x190 = x187 && x189
val x402 = while ({x119}) {
val x120 = x112
x111 = x120
val x122 = x108 += 1
val x156 = x120.numRows
val x157 = new generated.scala.VectorImpl[generated.scala.MatrixRow[Double]](x156,true)
var x159 : Int = 0
val x163 = while (x159 < x156) {
val x160 = x120.getRow(x159)
val x161 = x157(x159) = x160
x161
x159 = x159 + 1
}
def x182_block = {
val x180 = new generated.scala.IntVectorImpl(x178,x179)
var mapIdx = 0
while (mapIdx < x123.size) { // begin map loop x182
val x124 = x123.dcApply(mapIdx)
x180.dcUpdate(mapIdx,  {
val x125 = x56.getRow(x124)
def x167_block = {
val x165 = new generated.scala.DoubleVectorImpl(x156,true)
var mapIdx = 0
while (mapIdx < x157.size) { // begin map loop x167
val x126 = x157.dcApply(mapIdx)
x165.dcUpdate(mapIdx,  {
val x154 = { 
val x127 = x125.length
val x128 = x125.isRow
// a *thin* loop follows: x136
val x136 = {
val x130 = new generated.scala.DoubleVectorImpl(x127,x128)
x130
}
var x129 = 0
while (x129 < x127) {  // begin fat loop x136
val x132 = x125(x129)
val x133 = x126(x129)
val x134 = x132 - x133
x136.dcUpdate(x129, x134)
x129 += 1
} // end fat loop x136
val x137 = x136.length
val x138 = x136.isRow
// a *thin* loop follows: x145
val x145 = {
val x140 = new generated.scala.DoubleVectorImpl(x137,x138)
x140
}
var x139 = 0
while (x139 < x137) {  // begin fat loop x145
val x142 = x136(x139)
val x143 = x142 * x142
x145.dcUpdate(x139, x143)
x139 += 1
} // end fat loop x145
// a *thin* loop follows: x152
var x152: Double = 0
var x146 = 0
while (x146 < x137) {  // begin fat loop x152
val x149 = x145(x146)
val x147 = x152
val x148 = x149
val x151 = x147 + x148
x152 = x151
x146 += 1
} // end fat loop x152
x152
}
x154
})
mapIdx += 1
} // end map loop x167
x165
}
val x167 = x167_block
val x168 = x167.length
var x176: Int = 0
var x169 = 0
while (x169 < x168) {  // begin fat loop x176
val x170 = x176
val x171 = x169
val x172 = x167(x170)
val x173 = x167(x171)
val x174 = x172 < x173
val x175 = {
def x175thenb(): Int = {
x170
}
def x175elseb(): Int = {
x171
}
if (x174) {
x175thenb()
} else { 
x175elseb()
}
}
x176 = x175
x169 += 1
} // end fat loop x176
x176
})
mapIdx += 1
} // end map loop x182
x180
}
val x182 = x182_block
val x375 = {
def x375thenb(): generated.scala.Matrix[Double] = {
val x191 = x186.length
val x206 = new generated.scala.RangeVectorImpl(0,x106,1,true)
def x244_block = {
val x192 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x191,true)
var mapIdx = 0
while (mapIdx < x186.size) { // begin map loop x244
val x194 = x186.dcApply(mapIdx)
x192.dcUpdate(mapIdx,  {
def x228_block = {
val x195 = x206.dcApply(0)
var x207 = {
val x196 = x182(x195)
val x197 = x196==x194
val x204 = {
def x204thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x198 = x56.getRow(x195)
val x199 = (x198,1.0)
x199
}
def x204elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x201 = new generated.scala.ZeroVectorDoubleImpl(x107, true)
val x202 = x201.asInstanceOf[generated.scala.Vector[Double]]
val x203 = (x202,0.0)
x203
}
if (x197) {
x204thenb()
} else { 
x204elseb()
}
}
x204
}
var mapReduceIdx = 1
while (mapReduceIdx < x206.size) { // begin mapReduce loop x228
val x195 = x206.dcApply(mapReduceIdx)
val x208 = {
val x196 = x182(x195)
val x197 = x196==x194
val x204 = {
def x204thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x198 = x56.getRow(x195)
val x199 = (x198,1.0)
x199
}
def x204elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x201 = new generated.scala.ZeroVectorDoubleImpl(x107, true)
val x202 = x201.asInstanceOf[generated.scala.Vector[Double]]
val x203 = (x202,0.0)
x203
}
if (x197) {
x204thenb()
} else { 
x204elseb()
}
}
x204
}
x207 = {
val x209 = x207._1
val x213 = x209.isInstanceOf[generated.scala.ZeroVector[Double]]
val x225 = {
def x225thenb(): generated.scala.Vector[Double] = {
val x211 = x208._1
x211
}
def x225elseb(): generated.scala.Vector[Double] = {
val x211 = x208._1
val x214 = x211.isInstanceOf[generated.scala.ZeroVector[Double]]
val x224 = {
def x224thenb(): generated.scala.Vector[Double] = {
x209
}
def x224elseb(): generated.scala.Vector[Double] = {
val x215 = x209.length
val x216 = x209.isRow
val x223 = {
val x218 = new generated.scala.DoubleVectorImpl(x215,x216)
x218
}
var x217 = 0
while (x217 < x215) {  // begin fat loop x223
val x220 = x209(x217)
val x221 = x211(x217)
val x222 = x220 + x221
x223.dcUpdate(x217, x222)
x217 += 1
} // end fat loop x223
x223
}
if (x214) {
x224thenb()
} else { 
x224elseb()
}
}
x224
}
if (x213) {
x225thenb()
} else { 
x225elseb()
}
}
val x210 = x207._2
val x212 = x208._2
val x226 = x210 + x212
val x227 = (x225,x226)
x227
}
mapReduceIdx += 1
} // end mapReduce loop x228
x207
}
val x228 = x228_block
val x229 = x228._1
val x230 = x228._2
val x231 = x230==0
val x242 = {
def x242thenb(): generated.scala.Vector[Double] = {
x229
}
def x242elseb(): generated.scala.Vector[Double] = {
val x232 = x229.length
val x233 = x229.isRow
// a *thin* loop follows: x240
val x240 = {
val x235 = new generated.scala.DoubleVectorImpl(x232,x233)
x235
}
var x234 = 0
while (x234 < x232) {  // begin fat loop x240
val x237 = x229(x234)
val x238 = x237 / x230
x240.dcUpdate(x234, x238)
x234 += 1
} // end fat loop x240
x240
}
if (x231) {
x242thenb()
} else { 
x242elseb()
}
}
x242
})
mapIdx += 1
} // end map loop x244
x192
}
val x244 = x244_block
val x245 = x244.length
val x246 = x245==0
val x280 = { 
val x278 = {
def x278thenb(): generated.scala.Matrix[Double] = {
val x247 = new generated.scala.DoubleMatrixImpl(0,0)
x247
}
def x278elseb(): generated.scala.Matrix[Double] = {
val x249 = x244(0)
val x250 = x249.isRow
val x276 = {
def x276thenb(): generated.scala.Matrix[Double] = {
val x251 = x249.length
val x252 = new generated.scala.DoubleMatrixImpl(x245,x251)
var x254 : Int = 0
val x263 = while (x254 < x245) {
val x257 = x244(x254)
var x256 : Int = 0
val x261 = while (x256 < x251) {
val x258 = x257(x256)
val x259 = x252(x254, x256) = x258
x259
x256 = x256 + 1
}
x261
x254 = x254 + 1
}
x252
}
def x276elseb(): generated.scala.Matrix[Double] = {
val x251 = x249.length
val x265 = new generated.scala.DoubleMatrixImpl(x251,x245)
var x266 : Int = 0
val x274 = while (x266 < x245) {
val x268 = x244(x266)
var x267 : Int = 0
val x272 = while (x267 < x251) {
val x269 = x268(x267)
val x270 = x265(x267, x266) = x269
x270
x267 = x267 + 1
}
x272
x266 = x266 + 1
}
x265
}
if (x250) {
x276thenb()
} else { 
x276elseb()
}
}
x276
}
if (x246) {
x278thenb()
} else { 
x278elseb()
}
}
x278
}
x280
}
def x375elseb(): generated.scala.Matrix[Double] = {
val x281 = x188.isInstanceOf[generated.scala.IndexVector]
val x282 = x186.isInstanceOf[generated.scala.IndexVectorWC]
val x283 = x281 && x282
val x373 = {
def x373thenb(): generated.scala.Matrix[Double] = {
val x284 = x188.length
val x206 = new generated.scala.RangeVectorImpl(0,x106,1,true)
def x333_block = {
val x285 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x284,true)
var mapIdx = 0
while (mapIdx < x188.size) { // begin map loop x333
val x287 = x188.dcApply(mapIdx)
x285.dcUpdate(mapIdx,  {
def x317_block = {
val x288 = x206.dcApply(0)
var x296 = {
val x289 = x182(x288)
val x290 = x289==x287
val x294 = {
def x294thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x291 = x56.getRow(x288)
val x292 = (x291,1.0)
x292
}
def x294elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x201 = new generated.scala.ZeroVectorDoubleImpl(x107, true)
val x202 = x201.asInstanceOf[generated.scala.Vector[Double]]
val x203 = (x202,0.0)
x203
}
if (x290) {
x294thenb()
} else { 
x294elseb()
}
}
x294
}
var mapReduceIdx = 1
while (mapReduceIdx < x206.size) { // begin mapReduce loop x317
val x288 = x206.dcApply(mapReduceIdx)
val x297 = {
val x289 = x182(x288)
val x290 = x289==x287
val x294 = {
def x294thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x291 = x56.getRow(x288)
val x292 = (x291,1.0)
x292
}
def x294elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x201 = new generated.scala.ZeroVectorDoubleImpl(x107, true)
val x202 = x201.asInstanceOf[generated.scala.Vector[Double]]
val x203 = (x202,0.0)
x203
}
if (x290) {
x294thenb()
} else { 
x294elseb()
}
}
x294
}
x296 = {
val x298 = x296._1
val x302 = x298.isInstanceOf[generated.scala.ZeroVector[Double]]
val x314 = {
def x314thenb(): generated.scala.Vector[Double] = {
val x300 = x297._1
x300
}
def x314elseb(): generated.scala.Vector[Double] = {
val x300 = x297._1
val x303 = x300.isInstanceOf[generated.scala.ZeroVector[Double]]
val x313 = {
def x313thenb(): generated.scala.Vector[Double] = {
x298
}
def x313elseb(): generated.scala.Vector[Double] = {
val x304 = x298.length
val x305 = x298.isRow
val x312 = {
val x307 = new generated.scala.DoubleVectorImpl(x304,x305)
x307
}
var x306 = 0
while (x306 < x304) {  // begin fat loop x312
val x309 = x298(x306)
val x310 = x300(x306)
val x311 = x309 + x310
x312.dcUpdate(x306, x311)
x306 += 1
} // end fat loop x312
x312
}
if (x303) {
x313thenb()
} else { 
x313elseb()
}
}
x313
}
if (x302) {
x314thenb()
} else { 
x314elseb()
}
}
val x299 = x296._2
val x301 = x297._2
val x315 = x299 + x301
val x316 = (x314,x315)
x316
}
mapReduceIdx += 1
} // end mapReduce loop x317
x296
}
val x317 = x317_block
val x318 = x317._1
val x319 = x317._2
val x320 = x319==0
val x331 = {
def x331thenb(): generated.scala.Vector[Double] = {
x318
}
def x331elseb(): generated.scala.Vector[Double] = {
val x321 = x318.length
val x322 = x318.isRow
// a *thin* loop follows: x329
val x329 = {
val x324 = new generated.scala.DoubleVectorImpl(x321,x322)
x324
}
var x323 = 0
while (x323 < x321) {  // begin fat loop x329
val x326 = x318(x323)
val x327 = x326 / x319
x329.dcUpdate(x323, x327)
x323 += 1
} // end fat loop x329
x329
}
if (x320) {
x331thenb()
} else { 
x331elseb()
}
}
x331
})
mapIdx += 1
} // end map loop x333
x285
}
val x333 = x333_block
val x334 = x333.length
val x335 = x334==0
val x369 = { 
val x367 = {
def x367thenb(): generated.scala.Matrix[Double] = {
val x336 = new generated.scala.DoubleMatrixImpl(0,0)
x336
}
def x367elseb(): generated.scala.Matrix[Double] = {
val x338 = x333(0)
val x339 = x338.isRow
val x365 = {
def x365thenb(): generated.scala.Matrix[Double] = {
val x340 = x338.length
val x341 = new generated.scala.DoubleMatrixImpl(x334,x340)
var x343 : Int = 0
val x352 = while (x343 < x334) {
val x346 = x333(x343)
var x345 : Int = 0
val x350 = while (x345 < x340) {
val x347 = x346(x345)
val x348 = x341(x343, x345) = x347
x348
x345 = x345 + 1
}
x350
x343 = x343 + 1
}
x341
}
def x365elseb(): generated.scala.Matrix[Double] = {
val x340 = x338.length
val x354 = new generated.scala.DoubleMatrixImpl(x340,x334)
var x355 : Int = 0
val x363 = while (x355 < x334) {
val x357 = x333(x355)
var x356 : Int = 0
val x361 = while (x356 < x340) {
val x358 = x357(x356)
val x359 = x354(x356, x355) = x358
x359
x356 = x356 + 1
}
x361
x355 = x355 + 1
}
x354
}
if (x339) {
x365thenb()
} else { 
x365elseb()
}
}
x365
}
if (x335) {
x367thenb()
} else { 
x367elseb()
}
}
x367
}
x369
}
def x373elseb(): Nothing = {
val x370 = println("illegal matrix constructor")
val x371 = exit(-1)
x371
}
if (x283) {
x373thenb()
} else { 
x373elseb()
}
}
x373
}
if (x190) {
x375thenb()
} else { 
x375elseb()
}
}
x112 = x375
val x377 = x113 += 1
val x378 = x112
val x379 = x111
val x380 = x378.numRows
val x381 = x378.numCols
def x387_block = {
val x382 = new generated.scala.DoubleMatrixImpl(x380,x381)
var zipIdx = 0
while (zipIdx < x378.size) { // begin zip loop x387
val x384 = x378.dcApply(zipIdx)
val x385 = x379.dcApply(zipIdx)
x382.dcUpdate(zipIdx,  {
val x386 = x384 - x385
x386
})
zipIdx += 1
} // end zip loop x387
x382
}
val x387 = x387_block
val x388 = x387.numRows
val x389 = x387.numCols
def x394_block = {
val x390 = new generated.scala.DoubleMatrixImpl(x388,x389)
var mapIdx = 0
while (mapIdx < x387.size) { // begin map loop x394
val x392 = x387.dcApply(mapIdx)
x390.dcUpdate(mapIdx,  {
val x393 = java.lang.Math.abs(x392)
x393
})
mapIdx += 1
} // end map loop x394
x390
}
val x394 = x394_block
def x398_block = {
var x395 = x394.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x394.size) { // begin reduce loop x398
val x396 = x394.dcApply(reduceIdx)
x395 = {
val x397 = x395 + x396
x397
}
reduceIdx += 1
} // end reduce loop x398
x395
}
val x398 = x398_block
val x399 = { 
x398
}
x109 = x399
()
}
val x403 = x117==1000
val x407 = {
def x407thenb(): Unit = {
val x404 = println("Maximum iterations exceeded")
val x405 = return ()
x405
}
if (x403) {
x407thenb()
}
}
val x408 = x112
val x409 = Seq(x408)
val x410 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
val x411 = x108
val x412 = "finished in "+x411
val x413 = x412+" iterations"
val x414 = println(x413)
val x415 = x408.numRows
val x419 = x408.numCols
val x434 = { 
var x417 : Int = 0
val x432 = while (x417 < x415) {
val x418 = print("[ ")
val x422 = x417 * x419
var x421 : Int = 0
val x429 = while (x421 < x419) {
val x423 = x422 + x421
val x424 = x408.dcApply(x423)
val x425 = { 
x424
}
val x426 = print(x425)
val x427 = print(" ")
x427
x421 = x421 + 1
}
val x430 = print("]\n")
x430
x417 = x417 + 1
}
x432
}
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
