/*****************************************
  Emitting Generated Code                  
*******************************************/
class kmeansRunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 1
val x6 = {
def x6thenb(): Nothing = {
val x3 = println("Usage: kmeans <input data file> <initmu data file>")
val x4 = exit(-1)
x4
}
def x6elseb(): Unit = {
()
}
if (x2) {
x6thenb()
} else {
x6elseb()
}
}
val x7 = x0(0)
def x52_block = { 
val x8 = new java.io.FileReader(x7)
val x9 = new java.io.BufferedReader(x8)
val x10 = x9.readLine()
var x11: java.lang.String = x10
val x12 = x11
val x13 = x12.trim()
x11 = x13
val x15 = x11
val x16 = x15.split("\\s+")
var x17: Array[java.lang.String] = x16
val x18 = x17
val x19 = x18.length
val x20 = new generated.scala.DoubleMatrixImpl(0,x19)
val x49 = while ({val x21 = x11
val x22 = x21 != null
x22}) {
val x24 = x17
val x25 = x24.length
val x26 = new generated.scala.DoubleVectorImpl(x25,true)
var x28 : Int = 0
val x34 = while (x28 < x25) {
val x29 = x17
val x30 = x29(x28)
val x31 = java.lang.Double.parseDouble(x30)
val x32 = x26(x28) = x31
x32
x28 = x28 + 1
}
val x35 = x20.numRows
val x36 = x20.insertRow(x35,x26)
val x37 = x9.readLine()
x11 = x37
val x39 = x11
val x40 = x39 != null
val x47 = {
def x47thenb(): Unit = {
val x41 = x39.trim()
x11 = x41
val x43 = x11
val x44 = x43.split("\\s+")
x17 = x44
()
}
def x47elseb(): Unit = {
()
}
if (x40) {
x47thenb()
} else {
x47elseb()
}
}
x47
}
val x50 = x9.close()
x20
}
val x52 = x52_block
val x53 = new generated.scala.IntVectorImpl(0,false)
val x54 = new generated.scala.IntLabelsImpl(x53)
val x55 = new generated.scala.DoubleIntTrainingSetImpl(x52,x54)
val x56 = x0(1)
def x101_block = { 
val x57 = new java.io.FileReader(x56)
val x58 = new java.io.BufferedReader(x57)
val x59 = x58.readLine()
var x60: java.lang.String = x59
val x61 = x60
val x62 = x61.trim()
x60 = x62
val x64 = x60
val x65 = x64.split("\\s+")
var x66: Array[java.lang.String] = x65
val x67 = x66
val x68 = x67.length
val x69 = new generated.scala.DoubleMatrixImpl(0,x68)
val x98 = while ({val x70 = x60
val x71 = x70 != null
x71}) {
val x73 = x66
val x74 = x73.length
val x75 = new generated.scala.DoubleVectorImpl(x74,true)
var x77 : Int = 0
val x83 = while (x77 < x74) {
val x78 = x66
val x79 = x78(x77)
val x80 = java.lang.Double.parseDouble(x79)
val x81 = x75(x77) = x80
x81
x77 = x77 + 1
}
val x84 = x69.numRows
val x85 = x69.insertRow(x84,x75)
val x86 = x58.readLine()
x60 = x86
val x88 = x60
val x89 = x88 != null
val x96 = {
def x96thenb(): Unit = {
val x90 = x88.trim()
x60 = x90
val x92 = x60
val x93 = x92.split("\\s+")
x66 = x93
()
}
def x96elseb(): Unit = {
()
}
if (x89) {
x96thenb()
} else {
x96elseb()
}
}
x96
}
val x99 = x58.close()
x69
}
val x101 = x101_block
val x102 = Seq()
val x103 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
var x106: Int = 0
var x107: Double = 1.7976931348623157E308
val x108 = null.asInstanceOf[generated.scala.Matrix[Double]]
var x109: generated.scala.Matrix[Double] = x108
var x110: generated.scala.Matrix[Double] = x101
var x111: Int = 0
val x104 = x55.numRows
val x122 = new generated.scala.IndexVectorRangeImpl(0,x104)
val x126 = 2==0
val x201 = x122.length
val x202 = x122.isRow
val x206 = new generated.scala.IndexVectorRangeImpl(0,16)
val x207 = generated.scala.IndexVectorWCImpl
val x208 = new generated.scala.IndexVector2Impl(x206,x207)
val x209 = x208.rowInd
val x210 = x209.isInstanceOf[generated.scala.IndexVector]
val x211 = x208.colInd
val x212 = x211.isInstanceOf[generated.scala.IndexVectorWC]
val x213 = x210 && x212
val x361 = 0==0
val x411 = while ({val x112 = x107
val x115 = x111
val x113 = Math.abs(x112)
val x114 = x113 > 0.0010
val x116 = x115 < 1000
val x117 = x114 && x116
x117}) {
val x119 = x110
x109 = x119
val x121 = x106 += 1
val x180 = x119.numRows
val x181 = new generated.scala.VectorImpl[generated.scala.MatrixRow[Double]](x180,true)
var x183 : Int = 0
val x187 = while (x183 < x180) {
val x184 = x119.getRow(x183)
val x185 = x181(x183) = x184
x185
x183 = x183 + 1
}
def x205_block = {
val x203 = new generated.scala.IntVectorImpl(x201,x202)
var mapIdx = 0
while (mapIdx < x122.size) {
val x123 = x122.dcApply(mapIdx)
x203.dcUpdate(mapIdx,  {
val x124 = x55.getRow(x123)
def x191_block = {
val x189 = new generated.scala.DoubleVectorImpl(x180,true)
var mapIdx = 0
while (mapIdx < x181.size) {
val x125 = x181.dcApply(mapIdx)
x189.dcUpdate(mapIdx,  {
def x179_block = { 
val x177 = {
def x177thenb(): Double = {
val x127 = x55(x123, 0)
val x128 = x125(0)
val x129 = x127 - x128
val x130 = java.lang.Double.longBitsToDouble((java.lang.Double.doubleToRawLongBits(x129)<<1)>>>1)
var x131: Double = x130
var x132: Int = 1
val x105 = x55.numCols
val x145 = while ({val x133 = x132
val x134 = x133 < x105
x134}) {
val x136 = x132
val x138 = x132
val x137 = x55(x123, x136)
val x139 = x125(x138)
val x140 = x137 - x139
val x141 = java.lang.Double.longBitsToDouble((java.lang.Double.doubleToRawLongBits(x140)<<1)>>>1)
val x142 = x131 += x141
val x143 = x132 += 1
()
}
val x146 = x131
x146
}
def x177elseb(): Double = {
val x148 = 2==1
val x175 = {
def x175thenb(): Double = {
val x127 = x55(x123, 0)
val x149 = println("NOT IMPLEMENTED YET -- SHOULD NOT BE CALLED")
x127
}
def x175elseb(): Double = {
val x151 = 2==2
val x173 = {
def x173thenb(): Double = {
val x105 = x55.numCols
val x158 = {
val x153 = new generated.scala.DoubleVectorImpl(x105,true)
x153
}
var x152 = 0
while (x152 < x105) {  // begin fat loop x158
val x155 = x55(x123, x152)
val x156 = x125(x152)
val x157 = x155 - x156
x158.dcUpdate(x152, x157)
x152 += 1
} // end fat loop x158
def x161_block = {
var mapIdx = 0
while (mapIdx < x158.size) {
val x159 = x158.dcApply(mapIdx)
x158.dcUpdate(mapIdx,  {
val x160 = x159 * x159
x160
})
mapIdx += 1
} // end while
x158
}
val x161 = x161_block
val x162 = x161.length
var x168: Double = 0
var x163 = 0
while (x163 < x162) {  // begin fat loop x168
val x166 = x161(x163)
val x164 = x168
val x165 = x166
val x167 = x164 + x165
x168 = x167
x163 += 1
} // end fat loop x168
x168
}
def x173elseb(): Nothing = {
val x170 = println("error: unknown dist metric selected")
val x171 = exit(0)
x171
}
if (x151) {
x173thenb()
} else {
x173elseb()
}
}
x173
}
if (x148) {
x175thenb()
} else {
x175elseb()
}
}
x175
}
if (x126) {
x177thenb()
} else {
x177elseb()
}
}
x177
}
val x179 = x179_block
x179
})
mapIdx += 1
} // end while
x189
}
val x191 = x191_block
val x192 = x191.length
val x193 = new generated.scala.IndexVectorRangeImpl(0,x192)
def x200_block = {
var x194 = x193.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x193.size) {
val x195 = x193.dcApply(reduceIdx)
x194 = {
val x196 = x191(x194)
val x197 = x191(x195)
val x198 = x196 < x197
val x199 = {
def x199thenb(): Int = {
x194
}
def x199elseb(): Int = {
x195
}
if (x198) {
x199thenb()
} else {
x199elseb()
}
}
x199
}
reduceIdx += 1
} // end while
x194
}
val x200 = x200_block
x200
})
mapIdx += 1
} // end while
x203
}
val x205 = x205_block
val x356 = {
def x356thenb(): generated.scala.Matrix[Double] = {
val x214 = x209.length
val x227 = new generated.scala.RangeVectorImpl(0,x104,1,true)
def x263_block = {
val x215 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x214,true)
var mapIdx = 0
while (mapIdx < x209.size) {
val x217 = x209.dcApply(mapIdx)
x215.dcUpdate(mapIdx,  {
def x249_block = {
val x218 = x227.dcApply(0)
var x228 = {
val x219 = x205(x218)
val x220 = x219==x217
val x226 = {
def x226thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x221 = x55.getRow(x218)
val x222 = (x221,1.0)
x222
}
def x226elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x105 = x55.numCols
val x223 = new generated.scala.ZeroVectorDoubleImpl(x105, true)
val x224 = x223.asInstanceOf[generated.scala.Vector[Double]]
val x225 = (x224,0.0)
x225
}
if (x220) {
x226thenb()
} else {
x226elseb()
}
}
x226
}
var mapReduceIdx = 1
while (mapReduceIdx < x227.size) {
val x218 = x227.dcApply(mapReduceIdx)
val x229 = {
val x219 = x205(x218)
val x220 = x219==x217
val x226 = {
def x226thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x221 = x55.getRow(x218)
val x222 = (x221,1.0)
x222
}
def x226elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x105 = x55.numCols
val x223 = new generated.scala.ZeroVectorDoubleImpl(x105, true)
val x224 = x223.asInstanceOf[generated.scala.Vector[Double]]
val x225 = (x224,0.0)
x225
}
if (x220) {
x226thenb()
} else {
x226elseb()
}
}
x226
}
x228 = {
val x230 = x228._1
val x234 = x230.isInstanceOf[generated.scala.ZeroVector[Double]]
val x246 = {
def x246thenb(): generated.scala.Vector[Double] = {
val x232 = x229._1
x232
}
def x246elseb(): generated.scala.Vector[Double] = {
val x232 = x229._1
val x235 = x232.isInstanceOf[generated.scala.ZeroVector[Double]]
val x245 = {
def x245thenb(): generated.scala.Vector[Double] = {
x230
}
def x245elseb(): generated.scala.Vector[Double] = {
val x236 = x230.length
val x237 = x230.isRow
val x244 = {
val x239 = new generated.scala.DoubleVectorImpl(x236,x237)
x239
}
var x238 = 0
while (x238 < x236) {  // begin fat loop x244
val x241 = x230(x238)
val x242 = x232(x238)
val x243 = x241 + x242
x244.dcUpdate(x238, x243)
x238 += 1
} // end fat loop x244
x244
}
if (x235) {
x245thenb()
} else {
x245elseb()
}
}
x245
}
if (x234) {
x246thenb()
} else {
x246elseb()
}
}
val x231 = x228._2
val x233 = x229._2
val x247 = x231 + x233
val x248 = (x246,x247)
x248
}
mapReduceIdx += 1
} // end while
x228
}
val x249 = x249_block
val x251 = x249._2
val x252 = x251==0
val x261 = {
def x261thenb(): generated.scala.Vector[Double] = {
val x250 = x249._1
x250
}
def x261elseb(): generated.scala.Vector[Double] = {
val x250 = x249._1
val x253 = x250.length
val x254 = x250.isRow
val x260 = {
val x256 = new generated.scala.DoubleVectorImpl(x253,x254)
x256
}
var x255 = 0
while (x255 < x253) {  // begin fat loop x260
val x258 = x250(x255)
val x259 = x258 / x251
x260.dcUpdate(x255, x259)
x255 += 1
} // end fat loop x260
x260
}
if (x252) {
x261thenb()
} else {
x261elseb()
}
}
x261
})
mapIdx += 1
} // end while
x215
}
val x263 = x263_block
val x264 = x263.length
val x265 = x264 > 0
val x268 = {
def x268thenb(): Int = {
val x266 = x263(0)
val x267 = x266.length
x267
}
def x268elseb(): Int = {
0
}
if (x265) {
x268thenb()
} else {
x268elseb()
}
}
def x282_block = { 
val x269 = new generated.scala.DoubleMatrixImpl(x264,x268)
var x271 : Int = 0
val x280 = while (x271 < x264) {
val x274 = x263(x271)
var x273 : Int = 0
val x278 = while (x273 < x268) {
val x275 = x274(x273)
val x276 = x269(x271, x273) = x275
x276
x273 = x273 + 1
}
x278
x271 = x271 + 1
}
x269
}
val x282 = x282_block
x282
}
def x356elseb(): generated.scala.Matrix[Double] = {
val x283 = x211.isInstanceOf[generated.scala.IndexVector]
val x284 = x209.isInstanceOf[generated.scala.IndexVectorWC]
val x285 = x283 && x284
val x354 = {
def x354thenb(): generated.scala.Matrix[Double] = {
val x286 = x211.length
val x227 = new generated.scala.RangeVectorImpl(0,x104,1,true)
def x331_block = {
val x287 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x286,true)
var mapIdx = 0
while (mapIdx < x211.size) {
val x289 = x211.dcApply(mapIdx)
x287.dcUpdate(mapIdx,  {
def x317_block = {
val x290 = x227.dcApply(0)
var x296 = {
val x291 = x205(x290)
val x292 = x291==x289
val x295 = {
def x295thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x293 = x55.getRow(x290)
val x294 = (x293,1.0)
x294
}
def x295elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x105 = x55.numCols
val x223 = new generated.scala.ZeroVectorDoubleImpl(x105, true)
val x224 = x223.asInstanceOf[generated.scala.Vector[Double]]
val x225 = (x224,0.0)
x225
}
if (x292) {
x295thenb()
} else {
x295elseb()
}
}
x295
}
var mapReduceIdx = 1
while (mapReduceIdx < x227.size) {
val x290 = x227.dcApply(mapReduceIdx)
val x297 = {
val x291 = x205(x290)
val x292 = x291==x289
val x295 = {
def x295thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x293 = x55.getRow(x290)
val x294 = (x293,1.0)
x294
}
def x295elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x105 = x55.numCols
val x223 = new generated.scala.ZeroVectorDoubleImpl(x105, true)
val x224 = x223.asInstanceOf[generated.scala.Vector[Double]]
val x225 = (x224,0.0)
x225
}
if (x292) {
x295thenb()
} else {
x295elseb()
}
}
x295
}
x296 = {
val x298 = x296._1
val x302 = x298.isInstanceOf[generated.scala.ZeroVector[Double]]
val x314 = {
def x314thenb(): generated.scala.Vector[Double] = {
val x300 = x297._1
x300
}
def x314elseb(): generated.scala.Vector[Double] = {
val x300 = x297._1
val x303 = x300.isInstanceOf[generated.scala.ZeroVector[Double]]
val x313 = {
def x313thenb(): generated.scala.Vector[Double] = {
x298
}
def x313elseb(): generated.scala.Vector[Double] = {
val x304 = x298.length
val x305 = x298.isRow
val x312 = {
val x307 = new generated.scala.DoubleVectorImpl(x304,x305)
x307
}
var x306 = 0
while (x306 < x304) {  // begin fat loop x312
val x309 = x298(x306)
val x310 = x300(x306)
val x311 = x309 + x310
x312.dcUpdate(x306, x311)
x306 += 1
} // end fat loop x312
x312
}
if (x303) {
x313thenb()
} else {
x313elseb()
}
}
x313
}
if (x302) {
x314thenb()
} else {
x314elseb()
}
}
val x299 = x296._2
val x301 = x297._2
val x315 = x299 + x301
val x316 = (x314,x315)
x316
}
mapReduceIdx += 1
} // end while
x296
}
val x317 = x317_block
val x319 = x317._2
val x320 = x319==0
val x329 = {
def x329thenb(): generated.scala.Vector[Double] = {
val x318 = x317._1
x318
}
def x329elseb(): generated.scala.Vector[Double] = {
val x318 = x317._1
val x321 = x318.length
val x322 = x318.isRow
val x328 = {
val x324 = new generated.scala.DoubleVectorImpl(x321,x322)
x324
}
var x323 = 0
while (x323 < x321) {  // begin fat loop x328
val x326 = x318(x323)
val x327 = x326 / x319
x328.dcUpdate(x323, x327)
x323 += 1
} // end fat loop x328
x328
}
if (x320) {
x329thenb()
} else {
x329elseb()
}
}
x329
})
mapIdx += 1
} // end while
x287
}
val x331 = x331_block
val x332 = x331.length
val x333 = x332 > 0
val x336 = {
def x336thenb(): Int = {
val x334 = x331(0)
val x335 = x334.length
x335
}
def x336elseb(): Int = {
0
}
if (x333) {
x336thenb()
} else {
x336elseb()
}
}
def x350_block = { 
val x337 = new generated.scala.DoubleMatrixImpl(x332,x336)
var x339 : Int = 0
val x348 = while (x339 < x332) {
val x342 = x331(x339)
var x341 : Int = 0
val x346 = while (x341 < x336) {
val x343 = x342(x341)
val x344 = x337(x339, x341) = x343
x344
x341 = x341 + 1
}
x346
x339 = x339 + 1
}
x337
}
val x350 = x350_block
x350
}
def x354elseb(): Nothing = {
val x351 = println("illegal matrix constructor")
val x352 = exit(-1)
x352
}
if (x285) {
x354thenb()
} else {
x354elseb()
}
}
x354
}
if (x213) {
x356thenb()
} else {
x356elseb()
}
}
x110 = x356
val x358 = x111 += 1
val x359 = x110
val x360 = x109
def x408_block = { 
val x406 = {
def x406thenb(): Double = {
val x362 = x359.numRows
val x363 = x359.numCols
def x369_block = {
val x364 = new generated.scala.DoubleMatrixImpl(x362,x363)
var zipIdx = 0
while (zipIdx < x359.size) {
val x366 = x359.dcApply(zipIdx)
val x367 = x360.dcApply(zipIdx)
x364.dcUpdate(zipIdx,  {
val x368 = x366 - x367
x368
})
zipIdx += 1
} // end while
x364
}
val x369 = x369_block
val x370 = x369.numRows
val x371 = x369.numCols
def x376_block = {
val x372 = new generated.scala.DoubleMatrixImpl(x370,x371)
var mapIdx = 0
while (mapIdx < x369.size) {
val x374 = x369.dcApply(mapIdx)
x372.dcUpdate(mapIdx,  {
val x375 = java.lang.Double.longBitsToDouble((java.lang.Double.doubleToRawLongBits(x374)<<1)>>>1)
x375
})
mapIdx += 1
} // end while
x372
}
val x376 = x376_block
def x380_block = {
var x377 = x376.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x376.size) {
val x378 = x376.dcApply(reduceIdx)
x377 = {
val x379 = x377 + x378
x379
}
reduceIdx += 1
} // end while
x377
}
val x380 = x380_block
x380
}
def x406elseb(): Double = {
val x381 = 0==1
val x404 = {
def x404thenb(): Double = {
val x382 = println("NOT IMPLEMENTED YET -- SHOULD NOT BE CALLED")
val x383 = x359(0, 0)
x383
}
def x404elseb(): Double = {
val x385 = 0==2
val x402 = {
def x402thenb(): Double = {
val x362 = x359.numRows
val x363 = x359.numCols
def x369_block = {
val x364 = new generated.scala.DoubleMatrixImpl(x362,x363)
var zipIdx = 0
while (zipIdx < x359.size) {
val x366 = x359.dcApply(zipIdx)
val x367 = x360.dcApply(zipIdx)
x364.dcUpdate(zipIdx,  {
val x368 = x366 - x367
x368
})
zipIdx += 1
} // end while
x364
}
val x369 = x369_block
def x393_block = {
var mapIdx = 0
while (mapIdx < x369.size) {
val x391 = x369.dcApply(mapIdx)
x369.dcUpdate(mapIdx,  {
val x392 = x391 * x391
x392
})
mapIdx += 1
} // end while
x369
}
val x393 = x393_block
def x397_block = {
var x394 = x393.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x393.size) {
val x395 = x393.dcApply(reduceIdx)
x394 = {
val x396 = x394 + x395
x396
}
reduceIdx += 1
} // end while
x394
}
val x397 = x397_block
x397
}
def x402elseb(): Nothing = {
val x399 = println("error: unknown dist metric selected")
val x400 = exit(0)
x400
}
if (x385) {
x402thenb()
} else {
x402elseb()
}
}
x402
}
if (x381) {
x404thenb()
} else {
x404elseb()
}
}
x404
}
if (x361) {
x406thenb()
} else {
x406elseb()
}
}
x406
}
val x408 = x408_block
x107 = x408
()
}
val x412 = x111
val x413 = x412==1000
val x417 = {
def x417thenb(): Unit = {
val x414 = println("Maximum iterations exceeded")
val x415 = return ()
x415
}
def x417elseb(): Unit = {
()
}
if (x413) {
x417thenb()
} else {
x417elseb()
}
}
val x418 = x110
val x419 = Seq(x418)
val x420 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
val x421 = x106
val x422 = "finished in "+x421
val x423 = x422+" iterations"
val x424 = println(x423)
val x425 = x418.numRows
val x429 = x418.numCols
def x441_block = { 
var x427 : Int = 0
val x439 = while (x427 < x425) {
val x428 = print("[ ")
var x431 : Int = 0
val x436 = while (x431 < x429) {
val x432 = x418(x427, x431)
val x433 = print(x432)
val x434 = print(" ")
x434
x431 = x431 + 1
}
val x437 = print("]\n")
x437
x427 = x427 + 1
}
x439
}
val x441 = x441_block
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
