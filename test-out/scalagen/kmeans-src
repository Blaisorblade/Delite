/*****************************************
  Emitting Generated Code                  
*******************************************/
class kmeansRunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 1
val x6 = {
def x6thenb(): Nothing = {
val x3 = println("Usage: kmeans <input data file> <initmu data file>")
val x4 = exit(-1)
x4
}
if (x2) {
x6thenb()
}
}
val x7 = x0(0)
val x54 = { 
val x8 = new java.io.FileReader(x7)
val x9 = new java.io.BufferedReader(x8)
val x10 = x9.readLine()
var x11: java.lang.String = x10
val x12 = x11
val x13 = x12.trim()
x11 = x13
val x15 = x11
val x16 = x15.split("\\s+")
var x17: Array[java.lang.String] = x16
val x18 = x17
val x19 = x18.length
val x20 = new generated.scala.DoubleMatrixImpl(0,x19)
val x50 = while ({val x21 = x11
val x22 = x21 != null
x22}) {
val x24 = x17
val x25 = x24.length
val x26 = new generated.scala.DoubleVectorImpl(x25,true)
var x28 : Int = 0
val x34 = while (x28 < x25) {
val x29 = x17
val x30 = x29(x28)
val x31 = java.lang.Double.parseDouble(x30)
val x32 = x26(x28) = x31
x32
x28 = x28 + 1
}
val x35 = x26// unsafe immutable
val x36 = x20.numRows
val x37 = x20.insertRow(x36,x35)
val x38 = x9.readLine()
x11 = x38
val x40 = x11
val x41 = x40 != null
val x42 = x40.trim()
val x48 = {
def x48thenb(): Unit = {
x11 = x42
val x44 = x11
val x45 = x44.split("\\s+")
x17 = x45
()
}
if (x41) {
x48thenb()
}
}
x48
}
val x51 = x9.close()
val x52 = x20// unsafe immutable
x52
}
val x55 = new generated.scala.IntVectorImpl(0,false)
val x56 = x55// unsafe immutable
val x57 = new generated.scala.IntLabelsImpl(x56)
val x58 = new generated.scala.DoubleIntTrainingSetImpl(x54,x57)
val x59 = x0(1)
val x106 = { 
val x60 = new java.io.FileReader(x59)
val x61 = new java.io.BufferedReader(x60)
val x62 = x61.readLine()
var x63: java.lang.String = x62
val x64 = x63
val x65 = x64.trim()
x63 = x65
val x67 = x63
val x68 = x67.split("\\s+")
var x69: Array[java.lang.String] = x68
val x70 = x69
val x71 = x70.length
val x72 = new generated.scala.DoubleMatrixImpl(0,x71)
val x102 = while ({val x73 = x63
val x74 = x73 != null
x74}) {
val x76 = x69
val x77 = x76.length
val x78 = new generated.scala.DoubleVectorImpl(x77,true)
var x80 : Int = 0
val x86 = while (x80 < x77) {
val x81 = x69
val x82 = x81(x80)
val x83 = java.lang.Double.parseDouble(x82)
val x84 = x78(x80) = x83
x84
x80 = x80 + 1
}
val x87 = x78// unsafe immutable
val x88 = x72.numRows
val x89 = x72.insertRow(x88,x87)
val x90 = x61.readLine()
x63 = x90
val x92 = x63
val x93 = x92 != null
val x94 = x92.trim()
val x100 = {
def x100thenb(): Unit = {
x63 = x94
val x96 = x63
val x97 = x96.split("\\s+")
x69 = x97
()
}
if (x93) {
x100thenb()
}
}
x100
}
val x103 = x61.close()
val x104 = x72// unsafe immutable
x104
}
val x107 = Seq()
val x108 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
var x111: Int = 0
var x112: Double = 1.7976931348623157E308
val x113 = null.asInstanceOf[generated.scala.Matrix[Double]]
var x114: generated.scala.Matrix[Double] = x113
var x115: generated.scala.Matrix[Double] = x106
var x116: Int = 0
val x117 = x112
val x118 = Math.abs(x117)
val x119 = x118 > 0.0010
val x120 = x116
val x121 = x120 < 1000
val x122 = x119 && x121
val x109 = x58.numRows
val x126 = new generated.scala.IndexVectorRangeImpl(0,x109)
val x110 = x58.numCols
val x174 = x126.length
val x175 = x126.isRow
val x179 = new generated.scala.IndexVectorRangeImpl(0,16)
val x180 = generated.scala.IndexVectorWCImpl
val x181 = new generated.scala.IndexVector2Impl(x179,x180)
val x182 = x181.rowInd
val x183 = x182.isInstanceOf[generated.scala.IndexVector]
val x184 = x181.colInd
val x185 = x184.isInstanceOf[generated.scala.IndexVectorWC]
val x186 = x183 && x185
val x187 = x182.length
val x196 = new generated.scala.ZeroVectorDoubleImpl(x110, true)
val x197 = x196.asInstanceOf[generated.scala.Vector[Double]]
val x198 = (x197,0.0)
val x200 = new generated.scala.RangeVectorImpl(0,x109,1,true)
val x276 = x184.isInstanceOf[generated.scala.IndexVector]
val x277 = x182.isInstanceOf[generated.scala.IndexVectorWC]
val x278 = x276 && x277
val x279 = x184.length
val x396 = while ({x122}) {
val x123 = x115
x114 = x123
val x125 = x111 += 1
val x153 = x123.numRows
val x154 = new generated.scala.VectorImpl[generated.scala.MatrixRow[Double]](x153,true)
var x156 : Int = 0
val x160 = while (x156 < x153) {
val x157 = x123.getRow(x156)
val x158 = x154(x156) = x157
x158
x156 = x156 + 1
}
def x178_block = {
val x176 = new generated.scala.IntVectorImpl(x174,x175)
var mapIdx = 0
while (mapIdx < x126.size) { // begin map loop x178
val x127 = x126.dcApply(mapIdx)
x176.dcUpdate(mapIdx,  {
val x133 = x127 * x110
def x164_block = {
val x162 = new generated.scala.DoubleVectorImpl(x153,true)
var mapIdx = 0
while (mapIdx < x154.size) { // begin map loop x164
val x129 = x154.dcApply(mapIdx)
x162.dcUpdate(mapIdx,  {
val x139 = {
val x131 = new generated.scala.DoubleVectorImpl(x110,true)
x131
}
var x130 = 0
while (x130 < x110) {  // begin fat loop x139
val x134 = x133 + x130
val x135 = x58.dcApply(x134)
val x136 = { 
x135
}
val x137 = x129(x130)
val x138 = x136 - x137
x139.dcUpdate(x130, x138)
x130 += 1
} // end fat loop x139
val x145 = {
val x141 = new generated.scala.DoubleVectorImpl(x110,true)
x141
}
var x140 = 0
while (x140 < x110) {  // begin fat loop x145
val x143 = x139(x140)
val x144 = x143 * x143
x145.dcUpdate(x140, x144)
x140 += 1
} // end fat loop x145
var x151: Double = 0
var x146 = 0
while (x146 < x110) {  // begin fat loop x151
val x149 = x145(x146)
val x147 = x151
val x148 = x149
val x150 = x147 + x148
x151 = x150
x146 += 1
} // end fat loop x151
val x152 = { 
x151
}
x152
})
mapIdx += 1
} // end map loop x164
x162
}
val x164 = x164_block
val x165 = x164.length
var x173: Int = 0
var x166 = 0
while (x166 < x165) {  // begin fat loop x173
val x167 = x173
val x168 = x166
val x169 = x164(x167)
val x170 = x164(x168)
val x171 = x169 < x170
val x172 = {
def x172thenb(): Int = {
x167
}
def x172elseb(): Int = {
x168
}
if (x171) {
x172thenb()
} else { 
x172elseb()
}
}
x173 = x172
x166 += 1
} // end fat loop x173
x173
})
mapIdx += 1
} // end map loop x178
x176
}
val x178 = x178_block
def x236_block = {
val x188 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x187,true)
var mapIdx = 0
while (mapIdx < x182.size) { // begin map loop x236
val x190 = x182.dcApply(mapIdx)
x188.dcUpdate(mapIdx,  {
def x222_block = {
val x191 = x200.dcApply(0)
var x201 = {
val x192 = x178(x191)
val x193 = x192==x190
val x194 = x58.getRow(x191)
val x195 = (x194,1.0)
val x199 = {
def x199thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
x195
}
def x199elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
x198
}
if (x193) {
x199thenb()
} else { 
x199elseb()
}
}
x199
}
var mapReduceIdx = 1
while (mapReduceIdx < x200.size) { // begin mapReduce loop x222
val x191 = x200.dcApply(mapReduceIdx)
val x202 = {
val x192 = x178(x191)
val x193 = x192==x190
val x194 = x58.getRow(x191)
val x195 = (x194,1.0)
val x199 = {
def x199thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
x195
}
def x199elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
x198
}
if (x193) {
x199thenb()
} else { 
x199elseb()
}
}
x199
}
x201 = {
val x205 = x202._1
val x203 = x201._1
val x207 = x203.isInstanceOf[generated.scala.ZeroVector[Double]]
val x208 = x205.isInstanceOf[generated.scala.ZeroVector[Double]]
val x209 = x203.length
val x210 = x203.isRow
val x217 = {
val x212 = new generated.scala.DoubleVectorImpl(x209,x210)
x212
}
var x211 = 0
while (x211 < x209) {  // begin fat loop x217
val x214 = x203(x211)
val x215 = x205(x211)
val x216 = x214 + x215
x217.dcUpdate(x211, x216)
x211 += 1
} // end fat loop x217
val x218 = {
def x218thenb(): generated.scala.Vector[Double] = {
x203
}
def x218elseb(): generated.scala.Vector[Double] = {
x217
}
if (x208) {
x218thenb()
} else { 
x218elseb()
}
}
val x219 = {
def x219thenb(): generated.scala.Vector[Double] = {
x205
}
def x219elseb(): generated.scala.Vector[Double] = {
x218
}
if (x207) {
x219thenb()
} else { 
x219elseb()
}
}
val x204 = x201._2
val x206 = x202._2
val x220 = x204 + x206
val x221 = (x219,x220)
x221
}
mapReduceIdx += 1
} // end mapReduce loop x222
x201
}
val x222 = x222_block
val x223 = x222._1
val x224 = x222._2
val x225 = x224==0
val x226 = x223.length
val x227 = x223.isRow
val x233 = {
val x229 = new generated.scala.DoubleVectorImpl(x226,x227)
x229
}
var x228 = 0
while (x228 < x226) {  // begin fat loop x233
val x231 = x223(x228)
val x232 = x231 / x224
x233.dcUpdate(x228, x232)
x228 += 1
} // end fat loop x233
val x234 = {
def x234thenb(): generated.scala.Vector[Double] = {
x223
}
def x234elseb(): generated.scala.Vector[Double] = {
x233
}
if (x225) {
x234thenb()
} else { 
x234elseb()
}
}
x234
})
mapIdx += 1
} // end map loop x236
x188
}
val x236 = x236_block
val x237 = x236.length
val x238 = x237==0
val x242 = x236(0)
val x243 = x242.isRow
val x244 = x242.length
val x275 = { 
val x273 = {
def x273thenb(): generated.scala.Matrix[Double] = {
val x239 = new generated.scala.DoubleMatrixImpl(0,0)
val x240 = x239// unsafe immutable
x240
}
def x273elseb(): generated.scala.Matrix[Double] = {
val x271 = {
def x271thenb(): generated.scala.Matrix[Double] = {
val x245 = new generated.scala.DoubleMatrixImpl(x237,x244)
var x247 : Int = 0
val x256 = while (x247 < x237) {
val x250 = x236(x247)
var x249 : Int = 0
val x254 = while (x249 < x244) {
val x251 = x250(x249)
val x252 = x245(x247, x249) = x251
x252
x249 = x249 + 1
}
x254
x247 = x247 + 1
}
val x257 = x245// unsafe immutable
x257
}
def x271elseb(): generated.scala.Matrix[Double] = {
val x259 = new generated.scala.DoubleMatrixImpl(x244,x237)
var x260 : Int = 0
val x268 = while (x260 < x237) {
val x262 = x236(x260)
var x261 : Int = 0
val x266 = while (x261 < x244) {
val x263 = x262(x261)
val x264 = x259(x261, x260) = x263
x264
x261 = x261 + 1
}
x266
x260 = x260 + 1
}
val x269 = x259// unsafe immutable
x269
}
if (x243) {
x271thenb()
} else { 
x271elseb()
}
}
x271
}
if (x238) {
x273thenb()
} else { 
x273elseb()
}
}
x273
}
def x324_block = {
val x280 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x279,true)
var mapIdx = 0
while (mapIdx < x184.size) { // begin map loop x324
val x282 = x184.dcApply(mapIdx)
x280.dcUpdate(mapIdx,  {
def x310_block = {
val x283 = x200.dcApply(0)
var x289 = {
val x284 = x178(x283)
val x285 = x284==x282
val x286 = x58.getRow(x283)
val x287 = (x286,1.0)
val x288 = {
def x288thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
x287
}
def x288elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
x198
}
if (x285) {
x288thenb()
} else { 
x288elseb()
}
}
x288
}
var mapReduceIdx = 1
while (mapReduceIdx < x200.size) { // begin mapReduce loop x310
val x283 = x200.dcApply(mapReduceIdx)
val x290 = {
val x284 = x178(x283)
val x285 = x284==x282
val x286 = x58.getRow(x283)
val x287 = (x286,1.0)
val x288 = {
def x288thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
x287
}
def x288elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
x198
}
if (x285) {
x288thenb()
} else { 
x288elseb()
}
}
x288
}
x289 = {
val x293 = x290._1
val x291 = x289._1
val x295 = x291.isInstanceOf[generated.scala.ZeroVector[Double]]
val x296 = x293.isInstanceOf[generated.scala.ZeroVector[Double]]
val x297 = x291.length
val x298 = x291.isRow
val x305 = {
val x300 = new generated.scala.DoubleVectorImpl(x297,x298)
x300
}
var x299 = 0
while (x299 < x297) {  // begin fat loop x305
val x302 = x291(x299)
val x303 = x293(x299)
val x304 = x302 + x303
x305.dcUpdate(x299, x304)
x299 += 1
} // end fat loop x305
val x306 = {
def x306thenb(): generated.scala.Vector[Double] = {
x291
}
def x306elseb(): generated.scala.Vector[Double] = {
x305
}
if (x296) {
x306thenb()
} else { 
x306elseb()
}
}
val x307 = {
def x307thenb(): generated.scala.Vector[Double] = {
x293
}
def x307elseb(): generated.scala.Vector[Double] = {
x306
}
if (x295) {
x307thenb()
} else { 
x307elseb()
}
}
val x292 = x289._2
val x294 = x290._2
val x308 = x292 + x294
val x309 = (x307,x308)
x309
}
mapReduceIdx += 1
} // end mapReduce loop x310
x289
}
val x310 = x310_block
val x311 = x310._1
val x312 = x310._2
val x313 = x312==0
val x314 = x311.length
val x315 = x311.isRow
val x321 = {
val x317 = new generated.scala.DoubleVectorImpl(x314,x315)
x317
}
var x316 = 0
while (x316 < x314) {  // begin fat loop x321
val x319 = x311(x316)
val x320 = x319 / x312
x321.dcUpdate(x316, x320)
x316 += 1
} // end fat loop x321
val x322 = {
def x322thenb(): generated.scala.Vector[Double] = {
x311
}
def x322elseb(): generated.scala.Vector[Double] = {
x321
}
if (x313) {
x322thenb()
} else { 
x322elseb()
}
}
x322
})
mapIdx += 1
} // end map loop x324
x280
}
val x324 = x324_block
val x325 = x324.length
val x326 = x325==0
val x330 = x324(0)
val x331 = x330.isRow
val x332 = x330.length
val x363 = { 
val x361 = {
def x361thenb(): generated.scala.Matrix[Double] = {
val x327 = new generated.scala.DoubleMatrixImpl(0,0)
val x328 = x327// unsafe immutable
x328
}
def x361elseb(): generated.scala.Matrix[Double] = {
val x359 = {
def x359thenb(): generated.scala.Matrix[Double] = {
val x333 = new generated.scala.DoubleMatrixImpl(x325,x332)
var x335 : Int = 0
val x344 = while (x335 < x325) {
val x338 = x324(x335)
var x337 : Int = 0
val x342 = while (x337 < x332) {
val x339 = x338(x337)
val x340 = x333(x335, x337) = x339
x340
x337 = x337 + 1
}
x342
x335 = x335 + 1
}
val x345 = x333// unsafe immutable
x345
}
def x359elseb(): generated.scala.Matrix[Double] = {
val x347 = new generated.scala.DoubleMatrixImpl(x332,x325)
var x348 : Int = 0
val x356 = while (x348 < x325) {
val x350 = x324(x348)
var x349 : Int = 0
val x354 = while (x349 < x332) {
val x351 = x350(x349)
val x352 = x347(x349, x348) = x351
x352
x349 = x349 + 1
}
x354
x348 = x348 + 1
}
val x357 = x347// unsafe immutable
x357
}
if (x331) {
x359thenb()
} else { 
x359elseb()
}
}
x359
}
if (x326) {
x361thenb()
} else { 
x361elseb()
}
}
x361
}
val x369 = {
def x369thenb(): generated.scala.Matrix[Double] = {
x275
}
def x369elseb(): generated.scala.Matrix[Double] = {
val x367 = {
def x367thenb(): generated.scala.Matrix[Double] = {
x363
}
def x367elseb(): Nothing = {
val x364 = println("illegal matrix constructor")
val x365 = exit(-1)
x365
}
if (x278) {
x367thenb()
} else { 
x367elseb()
}
}
x367
}
if (x186) {
x369thenb()
} else { 
x369elseb()
}
}
x115 = x369
val x371 = x116 += 1
val x372 = x115
val x373 = x114
val x374 = x372.numRows
val x375 = x372.numCols
def x381_block = {
val x376 = new generated.scala.DoubleMatrixImpl(x374,x375)
var zipIdx = 0
while (zipIdx < x372.size) { // begin zip loop x381
val x378 = x372.dcApply(zipIdx)
val x379 = x373.dcApply(zipIdx)
x376.dcUpdate(zipIdx,  {
val x380 = x378 - x379
x380
})
zipIdx += 1
} // end zip loop x381
x376
}
val x381 = x381_block
val x382 = x381.numRows
val x383 = x381.numCols
def x388_block = {
val x384 = new generated.scala.DoubleMatrixImpl(x382,x383)
var mapIdx = 0
while (mapIdx < x381.size) { // begin map loop x388
val x386 = x381.dcApply(mapIdx)
x384.dcUpdate(mapIdx,  {
val x387 = java.lang.Math.abs(x386)
x387
})
mapIdx += 1
} // end map loop x388
x384
}
val x388 = x388_block
def x392_block = {
var x389 = x388.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x388.size) { // begin reduce loop x392
val x390 = x388.dcApply(reduceIdx)
x389 = {
val x391 = x389 + x390
x391
}
reduceIdx += 1
} // end reduce loop x392
x389
}
val x392 = x392_block
val x393 = { 
x392
}
x112 = x393
()
}
val x397 = x120==1000
val x401 = {
def x401thenb(): Unit = {
val x398 = println("Maximum iterations exceeded")
val x399 = return ()
x399
}
if (x397) {
x401thenb()
}
}
val x402 = x115
val x403 = Seq(x402)
val x404 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
val x405 = x111
val x406 = "finished in "+x405
val x407 = x406+" iterations"
val x408 = println(x407)
val x409 = x402.numRows
val x413 = x402.numCols
val x428 = { 
var x411 : Int = 0
val x426 = while (x411 < x409) {
val x412 = print("[ ")
val x416 = x411 * x413
var x415 : Int = 0
val x423 = while (x415 < x413) {
val x417 = x416 + x415
val x418 = x402.dcApply(x417)
val x419 = { 
x418
}
val x420 = print(x419)
val x421 = print(" ")
x421
x415 = x415 + 1
}
val x424 = print("]\n")
x424
x411 = x411 + 1
}
x426
}
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
