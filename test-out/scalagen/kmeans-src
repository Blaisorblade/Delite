/*****************************************
  Emitting Generated Code                  
*******************************************/
class kmeansRunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 1
val x6 = {
def x6thenb(): Nothing = {
val x3 = println("Usage: kmeans <input data file> <initmu data file>")
val x4 = exit(-1)
x4
}
def x6elseb(): Unit = {
()
}
if (x2) {
x6thenb()
} else {
x6elseb()
}
}
val x7 = x0(0)
val x52 = { 
val x8 = new java.io.FileReader(x7)
val x9 = new java.io.BufferedReader(x8)
val x10 = x9.readLine()
var x11: java.lang.String = x10
val x12 = x11
val x13 = x12.trim()
x11 = x13
val x15 = x11
val x16 = x15.split("\\s+")
var x17: Array[java.lang.String] = x16
val x18 = x17
val x19 = x18.length
val x20 = new generated.scala.DoubleMatrixImpl(0,x19)
val x49 = while ({val x21 = x11
val x22 = x21 != null
x22}) {
val x24 = x17
val x25 = x24.length
val x26 = new generated.scala.DoubleVectorImpl(x25,true)
var x28 : Int = 0
val x34 = while (x28 < x25) {
val x29 = x17
val x30 = x29(x28)
val x31 = java.lang.Double.parseDouble(x30)
val x32 = x26(x28) = x31
x32
x28 = x28 + 1
}
val x35 = x20.numRows
val x36 = x20.insertRow(x35,x26)
val x37 = x9.readLine()
x11 = x37
val x39 = x11
val x40 = x39 != null
val x47 = {
def x47thenb(): Unit = {
val x41 = x39.trim()
x11 = x41
val x43 = x11
val x44 = x43.split("\\s+")
x17 = x44
()
}
def x47elseb(): Unit = {
()
}
if (x40) {
x47thenb()
} else {
x47elseb()
}
}
x47
}
val x50 = x9.close()
x20
}
val x53 = new generated.scala.IntVectorImpl(0,false)
val x54 = new generated.scala.IntLabelsImpl(x53)
val x55 = new generated.scala.DoubleIntTrainingSetImpl(x52,x54)
val x56 = x0(1)
val x101 = { 
val x57 = new java.io.FileReader(x56)
val x58 = new java.io.BufferedReader(x57)
val x59 = x58.readLine()
var x60: java.lang.String = x59
val x61 = x60
val x62 = x61.trim()
x60 = x62
val x64 = x60
val x65 = x64.split("\\s+")
var x66: Array[java.lang.String] = x65
val x67 = x66
val x68 = x67.length
val x69 = new generated.scala.DoubleMatrixImpl(0,x68)
val x98 = while ({val x70 = x60
val x71 = x70 != null
x71}) {
val x73 = x66
val x74 = x73.length
val x75 = new generated.scala.DoubleVectorImpl(x74,true)
var x77 : Int = 0
val x83 = while (x77 < x74) {
val x78 = x66
val x79 = x78(x77)
val x80 = java.lang.Double.parseDouble(x79)
val x81 = x75(x77) = x80
x81
x77 = x77 + 1
}
val x84 = x69.numRows
val x85 = x69.insertRow(x84,x75)
val x86 = x58.readLine()
x60 = x86
val x88 = x60
val x89 = x88 != null
val x96 = {
def x96thenb(): Unit = {
val x90 = x88.trim()
x60 = x90
val x92 = x60
val x93 = x92.split("\\s+")
x66 = x93
()
}
def x96elseb(): Unit = {
()
}
if (x89) {
x96thenb()
} else {
x96elseb()
}
}
x96
}
val x99 = x58.close()
x69
}
val x102 = Seq()
val x103 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
var x106: Int = 0
var x107: Double = 1.7976931348623157E308
val x108 = null.asInstanceOf[generated.scala.Matrix[Double]]
var x109: generated.scala.Matrix[Double] = x108
var x110: generated.scala.Matrix[Double] = x101
var x111: Int = 0
val x104 = x55.numRows
val x122 = new generated.scala.IndexVectorRangeImpl(0,x104)
val x105 = x55.numCols
val x167 = x122.length
val x168 = x122.isRow
val x172 = new generated.scala.IndexVectorRangeImpl(0,16)
val x173 = generated.scala.IndexVectorWCImpl
val x174 = new generated.scala.IndexVector2Impl(x172,x173)
val x175 = x174.rowInd
val x176 = x175.isInstanceOf[generated.scala.IndexVector]
val x177 = x174.colInd
val x178 = x177.isInstanceOf[generated.scala.IndexVectorWC]
val x179 = x176 && x178
val x383 = while ({val x112 = x107
val x115 = x111
val x113 = Math.abs(x112)
val x114 = x113 > 0.0010
val x116 = x115 < 1000
val x117 = x114 && x116
x117}) {
val x119 = x110
x109 = x119
val x121 = x106 += 1
val x146 = x119.numRows
val x147 = new generated.scala.VectorImpl[generated.scala.MatrixRow[Double]](x146,true)
var x149 : Int = 0
val x153 = while (x149 < x146) {
val x150 = x119.getRow(x149)
val x151 = x147(x149) = x150
x151
x149 = x149 + 1
}
def x171_block = {
val x169 = new generated.scala.IntVectorImpl(x167,x168)
var mapIdx = 0
while (mapIdx < x122.size) { // begin map loop x171
val x123 = x122.dcApply(mapIdx)
x169.dcUpdate(mapIdx,  {
def x157_block = {
val x155 = new generated.scala.DoubleVectorImpl(x146,true)
var mapIdx = 0
while (mapIdx < x147.size) { // begin map loop x157
val x125 = x147.dcApply(mapIdx)
x155.dcUpdate(mapIdx,  {
val x132 = {
val x127 = new generated.scala.DoubleVectorImpl(x105,true)
x127
}
var x126 = 0
while (x126 < x105) {  // begin fat loop x132
val x129 = x55(x123, x126)
val x130 = x125(x126)
val x131 = x129 - x130
x132.dcUpdate(x126, x131)
x126 += 1
} // end fat loop x132
val x138 = {
val x134 = new generated.scala.DoubleVectorImpl(x105,true)
x134
}
var x133 = 0
while (x133 < x105) {  // begin fat loop x138
val x136 = x132(x133)
val x137 = x136 * x136
x138.dcUpdate(x133, x137)
x133 += 1
} // end fat loop x138
var x144: Double = 0
var x139 = 0
while (x139 < x105) {  // begin fat loop x144
val x142 = x138(x139)
val x140 = x144
val x141 = x142
val x143 = x140 + x141
x144 = x143
x139 += 1
} // end fat loop x144
val x145 = { 
x144
}
x145
})
mapIdx += 1
} // end map loop x157
x155
}
val x157 = x157_block
val x158 = x157.length
var x166: Int = 0
var x159 = 0
while (x159 < x158) {  // begin fat loop x166
val x160 = x166
val x161 = x159
val x162 = x157(x160)
val x163 = x157(x161)
val x164 = x162 < x163
val x165 = {
def x165thenb(): Int = {
x160
}
def x165elseb(): Int = {
x161
}
if (x164) {
x165thenb()
} else {
x165elseb()
}
}
x166 = x165
x159 += 1
} // end fat loop x166
x166
})
mapIdx += 1
} // end map loop x171
x169
}
val x171 = x171_block
val x356 = {
def x356thenb(): generated.scala.Matrix[Double] = {
val x180 = x175.length
val x193 = new generated.scala.RangeVectorImpl(0,x104,1,true)
def x229_block = {
val x181 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x180,true)
var mapIdx = 0
while (mapIdx < x175.size) { // begin map loop x229
val x183 = x175.dcApply(mapIdx)
x181.dcUpdate(mapIdx,  {
def x215_block = {
val x184 = x193.dcApply(0)
var x194 = {
val x185 = x171(x184)
val x186 = x185==x183
val x192 = {
def x192thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x187 = x55.getRow(x184)
val x188 = (x187,1.0)
x188
}
def x192elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x189 = new generated.scala.ZeroVectorDoubleImpl(x105, true)
val x190 = x189.asInstanceOf[generated.scala.Vector[Double]]
val x191 = (x190,0.0)
x191
}
if (x186) {
x192thenb()
} else {
x192elseb()
}
}
x192
}
var mapReduceIdx = 1
while (mapReduceIdx < x193.size) { // begin mapReduce loop x215
val x184 = x193.dcApply(mapReduceIdx)
val x195 = {
val x185 = x171(x184)
val x186 = x185==x183
val x192 = {
def x192thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x187 = x55.getRow(x184)
val x188 = (x187,1.0)
x188
}
def x192elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x189 = new generated.scala.ZeroVectorDoubleImpl(x105, true)
val x190 = x189.asInstanceOf[generated.scala.Vector[Double]]
val x191 = (x190,0.0)
x191
}
if (x186) {
x192thenb()
} else {
x192elseb()
}
}
x192
}
x194 = {
val x196 = x194._1
val x200 = x196.isInstanceOf[generated.scala.ZeroVector[Double]]
val x212 = {
def x212thenb(): generated.scala.Vector[Double] = {
val x198 = x195._1
x198
}
def x212elseb(): generated.scala.Vector[Double] = {
val x198 = x195._1
val x201 = x198.isInstanceOf[generated.scala.ZeroVector[Double]]
val x211 = {
def x211thenb(): generated.scala.Vector[Double] = {
x196
}
def x211elseb(): generated.scala.Vector[Double] = {
val x202 = x196.length
val x203 = x196.isRow
val x210 = {
val x205 = new generated.scala.DoubleVectorImpl(x202,x203)
x205
}
var x204 = 0
while (x204 < x202) {  // begin fat loop x210
val x207 = x196(x204)
val x208 = x198(x204)
val x209 = x207 + x208
x210.dcUpdate(x204, x209)
x204 += 1
} // end fat loop x210
x210
}
if (x201) {
x211thenb()
} else {
x211elseb()
}
}
x211
}
if (x200) {
x212thenb()
} else {
x212elseb()
}
}
val x197 = x194._2
val x199 = x195._2
val x213 = x197 + x199
val x214 = (x212,x213)
x214
}
mapReduceIdx += 1
} // end mapReduce loop x215
x194
}
val x215 = x215_block
val x217 = x215._2
val x218 = x217==0
val x227 = {
def x227thenb(): generated.scala.Vector[Double] = {
val x216 = x215._1
x216
}
def x227elseb(): generated.scala.Vector[Double] = {
val x216 = x215._1
val x219 = x216.length
val x220 = x216.isRow
val x226 = {
val x222 = new generated.scala.DoubleVectorImpl(x219,x220)
x222
}
var x221 = 0
while (x221 < x219) {  // begin fat loop x226
val x224 = x216(x221)
val x225 = x224 / x217
x226.dcUpdate(x221, x225)
x221 += 1
} // end fat loop x226
x226
}
if (x218) {
x227thenb()
} else {
x227elseb()
}
}
x227
})
mapIdx += 1
} // end map loop x229
x181
}
val x229 = x229_block
val x230 = x229.length
val x231 = x230==0
val x265 = { 
val x263 = {
def x263thenb(): generated.scala.Matrix[Double] = {
val x232 = new generated.scala.DoubleMatrixImpl(0,0)
x232
}
def x263elseb(): generated.scala.Matrix[Double] = {
val x234 = x229(0)
val x235 = x234.isRow
val x261 = {
def x261thenb(): generated.scala.Matrix[Double] = {
val x236 = x234.length
val x237 = new generated.scala.DoubleMatrixImpl(x230,x236)
var x239 : Int = 0
val x248 = while (x239 < x230) {
val x242 = x229(x239)
var x241 : Int = 0
val x246 = while (x241 < x236) {
val x243 = x242(x241)
val x244 = x237(x239, x241) = x243
x244
x241 = x241 + 1
}
x246
x239 = x239 + 1
}
x237
}
def x261elseb(): generated.scala.Matrix[Double] = {
val x236 = x234.length
val x250 = new generated.scala.DoubleMatrixImpl(x236,x230)
var x251 : Int = 0
val x259 = while (x251 < x230) {
val x253 = x229(x251)
var x252 : Int = 0
val x257 = while (x252 < x236) {
val x254 = x253(x252)
val x255 = x250(x252, x251) = x254
x255
x252 = x252 + 1
}
x257
x251 = x251 + 1
}
x250
}
if (x235) {
x261thenb()
} else {
x261elseb()
}
}
x261
}
if (x231) {
x263thenb()
} else {
x263elseb()
}
}
x263
}
x265
}
def x356elseb(): generated.scala.Matrix[Double] = {
val x266 = x177.isInstanceOf[generated.scala.IndexVector]
val x267 = x175.isInstanceOf[generated.scala.IndexVectorWC]
val x268 = x266 && x267
val x354 = {
def x354thenb(): generated.scala.Matrix[Double] = {
val x269 = x177.length
val x193 = new generated.scala.RangeVectorImpl(0,x104,1,true)
def x314_block = {
val x270 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x269,true)
var mapIdx = 0
while (mapIdx < x177.size) { // begin map loop x314
val x272 = x177.dcApply(mapIdx)
x270.dcUpdate(mapIdx,  {
def x300_block = {
val x273 = x193.dcApply(0)
var x279 = {
val x274 = x171(x273)
val x275 = x274==x272
val x278 = {
def x278thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x276 = x55.getRow(x273)
val x277 = (x276,1.0)
x277
}
def x278elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x189 = new generated.scala.ZeroVectorDoubleImpl(x105, true)
val x190 = x189.asInstanceOf[generated.scala.Vector[Double]]
val x191 = (x190,0.0)
x191
}
if (x275) {
x278thenb()
} else {
x278elseb()
}
}
x278
}
var mapReduceIdx = 1
while (mapReduceIdx < x193.size) { // begin mapReduce loop x300
val x273 = x193.dcApply(mapReduceIdx)
val x280 = {
val x274 = x171(x273)
val x275 = x274==x272
val x278 = {
def x278thenb(): scala.Tuple2[generated.scala.MatrixRow[Double], Double] = {
val x276 = x55.getRow(x273)
val x277 = (x276,1.0)
x277
}
def x278elseb(): scala.Tuple2[generated.scala.Vector[Double], Double] = {
val x189 = new generated.scala.ZeroVectorDoubleImpl(x105, true)
val x190 = x189.asInstanceOf[generated.scala.Vector[Double]]
val x191 = (x190,0.0)
x191
}
if (x275) {
x278thenb()
} else {
x278elseb()
}
}
x278
}
x279 = {
val x281 = x279._1
val x285 = x281.isInstanceOf[generated.scala.ZeroVector[Double]]
val x297 = {
def x297thenb(): generated.scala.Vector[Double] = {
val x283 = x280._1
x283
}
def x297elseb(): generated.scala.Vector[Double] = {
val x283 = x280._1
val x286 = x283.isInstanceOf[generated.scala.ZeroVector[Double]]
val x296 = {
def x296thenb(): generated.scala.Vector[Double] = {
x281
}
def x296elseb(): generated.scala.Vector[Double] = {
val x287 = x281.length
val x288 = x281.isRow
val x295 = {
val x290 = new generated.scala.DoubleVectorImpl(x287,x288)
x290
}
var x289 = 0
while (x289 < x287) {  // begin fat loop x295
val x292 = x281(x289)
val x293 = x283(x289)
val x294 = x292 + x293
x295.dcUpdate(x289, x294)
x289 += 1
} // end fat loop x295
x295
}
if (x286) {
x296thenb()
} else {
x296elseb()
}
}
x296
}
if (x285) {
x297thenb()
} else {
x297elseb()
}
}
val x282 = x279._2
val x284 = x280._2
val x298 = x282 + x284
val x299 = (x297,x298)
x299
}
mapReduceIdx += 1
} // end mapReduce loop x300
x279
}
val x300 = x300_block
val x302 = x300._2
val x303 = x302==0
val x312 = {
def x312thenb(): generated.scala.Vector[Double] = {
val x301 = x300._1
x301
}
def x312elseb(): generated.scala.Vector[Double] = {
val x301 = x300._1
val x304 = x301.length
val x305 = x301.isRow
val x311 = {
val x307 = new generated.scala.DoubleVectorImpl(x304,x305)
x307
}
var x306 = 0
while (x306 < x304) {  // begin fat loop x311
val x309 = x301(x306)
val x310 = x309 / x302
x311.dcUpdate(x306, x310)
x306 += 1
} // end fat loop x311
x311
}
if (x303) {
x312thenb()
} else {
x312elseb()
}
}
x312
})
mapIdx += 1
} // end map loop x314
x270
}
val x314 = x314_block
val x315 = x314.length
val x316 = x315==0
val x350 = { 
val x348 = {
def x348thenb(): generated.scala.Matrix[Double] = {
val x317 = new generated.scala.DoubleMatrixImpl(0,0)
x317
}
def x348elseb(): generated.scala.Matrix[Double] = {
val x319 = x314(0)
val x320 = x319.isRow
val x346 = {
def x346thenb(): generated.scala.Matrix[Double] = {
val x321 = x319.length
val x322 = new generated.scala.DoubleMatrixImpl(x315,x321)
var x324 : Int = 0
val x333 = while (x324 < x315) {
val x327 = x314(x324)
var x326 : Int = 0
val x331 = while (x326 < x321) {
val x328 = x327(x326)
val x329 = x322(x324, x326) = x328
x329
x326 = x326 + 1
}
x331
x324 = x324 + 1
}
x322
}
def x346elseb(): generated.scala.Matrix[Double] = {
val x321 = x319.length
val x335 = new generated.scala.DoubleMatrixImpl(x321,x315)
var x336 : Int = 0
val x344 = while (x336 < x315) {
val x338 = x314(x336)
var x337 : Int = 0
val x342 = while (x337 < x321) {
val x339 = x338(x337)
val x340 = x335(x337, x336) = x339
x340
x337 = x337 + 1
}
x342
x336 = x336 + 1
}
x335
}
if (x320) {
x346thenb()
} else {
x346elseb()
}
}
x346
}
if (x316) {
x348thenb()
} else {
x348elseb()
}
}
x348
}
x350
}
def x354elseb(): Nothing = {
val x351 = println("illegal matrix constructor")
val x352 = exit(-1)
x352
}
if (x268) {
x354thenb()
} else {
x354elseb()
}
}
x354
}
if (x179) {
x356thenb()
} else {
x356elseb()
}
}
x110 = x356
val x358 = x111 += 1
val x359 = x110
val x360 = x109
val x361 = x359.numRows
val x362 = x359.numCols
def x368_block = {
val x363 = new generated.scala.DoubleMatrixImpl(x361,x362)
var zipIdx = 0
while (zipIdx < x359.size) { // begin zip loop x368
val x365 = x359.dcApply(zipIdx)
val x366 = x360.dcApply(zipIdx)
x363.dcUpdate(zipIdx,  {
val x367 = x365 - x366
x367
})
zipIdx += 1
} // end zip loop x368
x363
}
val x368 = x368_block
val x369 = x368.numRows
val x370 = x368.numCols
def x375_block = {
val x371 = new generated.scala.DoubleMatrixImpl(x369,x370)
var mapIdx = 0
while (mapIdx < x368.size) { // begin map loop x375
val x373 = x368.dcApply(mapIdx)
x371.dcUpdate(mapIdx,  {
val x374 = java.lang.Math.abs(x373)
x374
})
mapIdx += 1
} // end map loop x375
x371
}
val x375 = x375_block
def x379_block = {
var x376 = x375.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x375.size) { // begin reduce loop x379
val x377 = x375.dcApply(reduceIdx)
x376 = {
val x378 = x376 + x377
x378
}
reduceIdx += 1
} // end reduce loop x379
x376
}
val x379 = x379_block
val x380 = { 
x379
}
x107 = x380
()
}
val x384 = x111
val x385 = x384==1000
val x389 = {
def x389thenb(): Unit = {
val x386 = println("Maximum iterations exceeded")
val x387 = return ()
x387
}
def x389elseb(): Unit = {
()
}
if (x385) {
x389thenb()
} else {
x389elseb()
}
}
val x390 = x110
val x391 = Seq(x390)
val x392 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
val x393 = x106
val x394 = "finished in "+x393
val x395 = x394+" iterations"
val x396 = println(x395)
val x397 = x390.numRows
val x401 = x390.numCols
val x413 = { 
var x399 : Int = 0
val x411 = while (x399 < x397) {
val x400 = print("[ ")
var x403 : Int = 0
val x408 = while (x403 < x401) {
val x404 = x390(x399, x403)
val x405 = print(x404)
val x406 = print(" ")
x406
x403 = x403 + 1
}
val x409 = print("]\n")
x409
x399 = x399 + 1
}
x411
}
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
