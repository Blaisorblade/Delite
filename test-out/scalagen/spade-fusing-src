/*****************************************
  Emitting Generated Code                  
*******************************************/
class SpadeRunnerFusing extends ((Array[java.lang.String])=>(Unit)) {
def apply(x234:Array[java.lang.String]): Unit = {
val x235 = x234.length
val x236 = x235 < 2
val x240 = {
def x240thenb(): Nothing = {
val x237 = println("Usage: Spade <input data file> <output data file>")
val x238 = exit(-1)
x238
}
if (x236) {
x240thenb()
}
}
val x241 = x234(0)
val x288 = { 
val x242 = new java.io.FileReader(x241)
val x243 = new java.io.BufferedReader(x242)
val x244 = x243.readLine()
var x245: java.lang.String = x244
val x246 = x245
val x247 = x246.trim()
x245 = x247
val x249 = x245
val x250 = x249.split("\\s+")
var x251: Array[java.lang.String] = x250
val x252 = x251
val x253 = x252.length
val x254 = new generated.scala.DoubleMatrixImpl(0,x253)
val x284 = while ({val x255 = x245
val x256 = x255 != null
x256}) {
val x258 = x251
val x259 = x258.length
val x260 = new generated.scala.DoubleVectorImpl(x259,true)
var x262 : Int = 0
val x268 = while (x262 < x259) {
val x263 = x251
val x264 = x263(x262)
val x265 = java.lang.Double.parseDouble(x264)
val x266 = x260(x262) = x265
x266
x262 = x262 + 1
}
val x269 = x260// unsafe immutable
val x270 = x254.numRows
val x271 = x254.insertRow(x270,x269)
val x272 = x243.readLine()
x245 = x272
val x274 = x245
val x275 = x274 != null
val x276 = x274.trim()
val x282 = {
def x282thenb(): Unit = {
x245 = x276
val x278 = x245
val x279 = x278.split("\\s+")
x251 = x279
()
}
if (x275) {
x282thenb()
}
}
x282
}
val x285 = x243.close()
val x286 = x254// unsafe immutable
x286
}
val x289 = new generated.scala.IntVectorImpl(0,false)
val x290 = x289// unsafe immutable
val x291 = new generated.scala.IntLabelsImpl(x290)
val x292 = new generated.scala.DoubleIntTrainingSetImpl(x288,x291)
val x59 = Seq()
val x293 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
val x294 = new generated.scala.IntVectorImpl(0,true)
val x295 = x294.length
val x296 = x294.insert(x295, 0)
val x297 = x294.cloneL
val x298 = x292.numRows
val x299 = "   Input matrix size: "+x298
val x300 = x299+"*"
val x301 = x292.numCols
val x302 = x300+x301
val x303 = println(x302)
val x309 = new generated.scala.IntVectorImpl(0,true)
val x310 = x309.length
val x311 = x309.insert(x310, x298)
val x312 = x309.length
val x313 = x309.insert(x312, 2000)
val x314 = x309.length
val x304 = x298
val x305 = 2.5E9f / x304
val x306 = x305
val x307 = Math.floor(x306)
val x308 = x307.asInstanceOf[Int]
val x315 = x309.insert(x314, x308)
val x316 = x309.cloneL
val x317 = x309.length
var x324: Int = 2147483647
var x318 = 0
while (x318 < x317) {  // begin fat loop x324
val x321 = x316(x318)
val x319 = x324
val x320 = x321
val x322 = x319 < x320
val x323 = {
def x323thenb(): Int = {
x319
}
def x323elseb(): Int = {
x320
}
if (x322) {
x323thenb()
} else { 
x323elseb()
}
}
x324 = x323
x318 += 1
} // end fat loop x324
val x325 = "   numSamples = "+x324
val x326 = println(x325)
val x327 = println("   finding empirical dist of the min distance between cells ...")
val x328 = println("   med_min_dist = 4.4593519740000005")
val x329 = "   For this "+x298
val x330 = x329+" channel data, KERNEL WIDTH is "
val x331 = x330+22.296759870000002
val x332 = x331+", APPRX WIDTH is "
val x333 = x332+6.689027961000001
val x334 = println(x333)
val x335 = println("   finding local density for each cell ...")
val x370 = new generated.scala.IntVectorImpl(x298,true)
var x375: Int = 0
val x367 = 100000 / x298
val x368 = x367 + 1000
val x371 = x368.doubleValue()
val x372 = x304 / x371
val x373 = Math.ceil(x372)
val x374 = x373.asInstanceOf[Int]
val x376 = x375
val x377 = x376 < x374
val x155 = List()
val x378 = x376 * x368
val x379 = x298 - x378
val x380 = x379 < 0
val x381 = {
def x381thenb(): Int = {
x298
}
def x381elseb(): Int = {
x379
}
if (x380) {
x381thenb()
} else { 
x381elseb()
}
}
val x382 = Math.min(x368, x381)
val x383 = x382.asInstanceOf[Int]
val x384 = { 
x383
}
val x385 = new generated.scala.IndexVectorRangeImpl(0,x384)
val x366 = { (x336: Int, x337: Int) => 
val x343 = x336 * x301
val x347 = x337 * x301
var x364: Double = 0
var x359 = 0
while (x359 < x301) {  // begin fat loop x364
val x467 = x343 + x359
val x468 = x292.dcApply(x467)
val x469 = { 
x468
}
val x470 = x347 + x359
val x471 = x292.dcApply(x470)
val x472 = { 
x471
}
val x473 = x469 - x472
val x474 = java.lang.Math.abs(x473)
val x360 = x364
val x361 = x474
val x363 = x360 + x361
x364 = x363
x359 += 1
} // end fat loop x364
val x365 = { 
x364
}
x365: Double
}
val x369 = new generated.scala.DoubleStreamImpl(x298,x298,x368,x366,true)
val x452 = while ({x377}) {
val x449 = {
var forIdx = 0
while (forIdx < x385.size) { // begin foreach loop x449
val x386 = x385.dcApply(forIdx)
val x390 = x378 + x386
val x420 = x390 % 1000
val x421 = x420==0
val x422 = "  (streaming) # processed node = "+x390
val x425 = {
def x425thenb(): Unit = {
val x423 = println(x422)
x423
}
if (x421) {
x425thenb()
}
}
val x426 = x370(x390)
val x427 = x426==0
val x396 = x390 * x301
val x433 = {
val x429 = new generated.scala.IndexVectorSeqImpl(0)
//TODO: buffer size might be wrong (loop has conditions)
x429
}
var x440: Int = 0
var x388 = 0
while (x388 < x298) {  // begin fat loop x433,x440
val x400 = x388 * x301
var x417: Double = 0
var x412 = 0
while (x412 < x301) {  // begin fat loop x417
val x478 = x396 + x412
val x479 = x292.dcApply(x478)
val x480 = { 
x479
}
val x481 = x400 + x412
val x482 = x292.dcApply(x481)
val x483 = { 
x482
}
val x484 = x480 - x483
val x485 = java.lang.Math.abs(x484)
val x413 = x417
val x414 = x485
val x416 = x413 + x414
x417 = x416
x412 += 1
} // end fat loop x417
val x418 = { 
x417
}
val x475 = x418 < 6.689027961000001
val x476 = x418 < 22.296759870000002
if (x475) x433.insert(x433.length, x388)
if (x476) {
val x435 = x440
val x436 = 1
val x439 = x435 + x436
x440 = x439
}
x388 += 1
} // end fat loop x433,x440
val x447 = {
def x447thenb(): Unit = {
val x445 = {
var forIdx = 0
while (forIdx < x433.size) { // begin foreach loop x445
val x442 = x433.dcApply(forIdx)
val x443 = x370(x442) = x440
x443
forIdx += 1
} // end foreach loop x445
}
x445
}
if (x427) {
x447thenb()
}
}
x447
forIdx += 1
} // end foreach loop x449
}
val x450 = x375 += 1
()
}
val x453 = Seq(x370)
val x454 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
var x455: Int = 0
val x456 = x455
val x457 = x456 < 9
val x463 = while ({x457}) {
val x458 = x370(x456)
val x459 = x458+" "
val x460 = print(x459)
val x461 = x455 += 1
()
}
val x464 = println(())
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
