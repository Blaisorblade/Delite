/*****************************************
  Emitting Generated Code                  
*******************************************/
class SpadeRunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 2
val x6 = {
def x6thenb(): Nothing = {
val x3 = println("Usage: Spade <input data file> <output data file>")
val x4 = exit(-1)
x4
}
def x6elseb(): Unit = {
()
}
if (x2) {
x6thenb()
} else {
x6elseb()
}
}
val x7 = x0(0)
val x52 = { 
val x8 = new java.io.FileReader(x7)
val x9 = new java.io.BufferedReader(x8)
val x10 = x9.readLine()
var x11: java.lang.String = x10
val x12 = x11
val x13 = x12.trim()
x11 = x13
val x15 = x11
val x16 = x15.split("\\s+")
var x17: Array[java.lang.String] = x16
val x18 = x17
val x19 = x18.length
val x20 = new generated.scala.DoubleMatrixImpl(0,x19)
val x49 = while ({val x21 = x11
val x22 = x21 != null
x22}) {
val x24 = x17
val x25 = x24.length
val x26 = new generated.scala.DoubleVectorImpl(x25,true)
var x28 : Int = 0
val x34 = while (x28 < x25) {
val x29 = x17
val x30 = x29(x28)
val x31 = java.lang.Double.parseDouble(x30)
val x32 = x26(x28) = x31
x32
x28 = x28 + 1
}
val x35 = x20.numRows
val x36 = x20.insertRow(x35,x26)
val x37 = x9.readLine()
x11 = x37
val x39 = x11
val x40 = x39 != null
val x47 = {
def x47thenb(): Unit = {
val x41 = x39.trim()
x11 = x41
val x43 = x11
val x44 = x43.split("\\s+")
x17 = x44
()
}
def x47elseb(): Unit = {
()
}
if (x40) {
x47thenb()
} else {
x47elseb()
}
}
x47
}
val x50 = x9.close()
x20
}
val x53 = new generated.scala.IntVectorImpl(0,false)
val x54 = new generated.scala.IntLabelsImpl(x53)
val x55 = new generated.scala.DoubleIntTrainingSetImpl(x52,x54)
val x56 = Seq()
val x57 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
val x58 = new generated.scala.IntVectorImpl(0,true)
val x59 = x58.length
val x60 = x58.insert(x59, 0)
val x61 = x55.numRows
val x62 = "   Input matrix size: "+x61
val x63 = x62+"*"
val x64 = x55.numCols
val x65 = x63+x64
val x66 = println(x65)
val x72 = new generated.scala.IntVectorImpl(0,true)
val x73 = x72.length
val x74 = x72.insert(x73, x61)
val x75 = x72.length
val x76 = x72.insert(x75, 2000)
val x77 = x72.length
val x67 = x61
val x68 = 2.5E9f / x67
val x69 = x68
val x70 = Math.floor(x69)
val x71 = x70.asInstanceOf[Int]
val x78 = x72.insert(x77, x71)
val x79 = x72.length
var x87: Int = 2147483647
var x80 = 0
while (x80 < x79) {  // begin fat loop x87
val x83 = x72(x80)
val x81 = x87
val x82 = x83
val x85 = x81 < x82
val x86 = {
def x86thenb(): Int = {
x81
}
def x86elseb(): Int = {
x82
}
if (x85) {
x86thenb()
} else {
x86elseb()
}
}
x87 = x86
x80 += 1
} // end fat loop x87
val x88 = "   numSamples = "+x87
val x89 = println(x88)
val x90 = println("   finding empirical dist of the min distance between cells ...")
val x113 = new generated.scala.IndexVectorRangeImpl(0,x87)
val x91 = new generated.scala.IndexVectorRangeImpl(0,x61)
val x92 = x91.length
val x93 = new generated.scala.IndexVectorRangeImpl(0,x92)
val x95 = x91.isRow
val x112 = { 
val x94 = x93.cloneL
val x96 = new generated.scala.IntVectorImpl(0,x95)
var x98 : Int = 0
val x110 = while (x98 < x87) {
val x99 = x92 - x98
val x100 = generated.scala.Global.randRef.nextInt(x99)
val x101 = x98 + x100
val x102 = x94(x101)
val x104 = x96.length
val x103 = x91(x102)
val x105 = x96.insert(x104, x103)
val x106 = x94(x98)
val x107 = x94(x101) = x106
val x108 = x94(x98) = x102
x108
x98 = x98 + 1
}
x96
}
val x159 = !false
val x197 = x113.length
val x198 = x113.isRow
def x201_block = {
val x199 = new generated.scala.DoubleVectorImpl(x197,x198)
var mapIdx = 0
while (mapIdx < x113.size) { // begin map loop x201
val x114 = x113.dcApply(mapIdx)
x199.dcUpdate(mapIdx,  {
val x115 = x112(x114)
val x122 = {
val x118 = new generated.scala.DoubleVectorImpl(x64,true)
x118
}
var x117 = 0
while (x117 < x64) {  // begin fat loop x122
val x120 = x55(x115, x117)
val x121 = x120 - x120
x122.dcUpdate(x117, x121)
x117 += 1
} // end fat loop x122
val x128 = {
val x124 = new generated.scala.DoubleVectorImpl(x64,true)
x124
}
var x123 = 0
while (x123 < x64) {  // begin fat loop x128
val x126 = x122(x123)
val x127 = java.lang.Double.longBitsToDouble((java.lang.Double.doubleToRawLongBits(x126)<<1)>>>1)
x128.dcUpdate(x123, x127)
x123 += 1
} // end fat loop x128
var x134: Double = 0
var x129 = 0
while (x129 < x64) {  // begin fat loop x134
val x132 = x128(x129)
val x130 = x134
val x131 = x132
val x133 = x130 + x131
x134 = x133
x129 += 1
} // end fat loop x134
val x135 = { 
x134
}
def x165_block = {
val x163 = new generated.scala.DoubleVectorImpl(x92,x95)
var mapIdx = 0
while (mapIdx < x91.size) { // begin map loop x165
val x136 = x91.dcApply(mapIdx)
x163.dcUpdate(mapIdx,  {
val x144 = {
val x139 = new generated.scala.DoubleVectorImpl(x64,true)
x139
}
var x138 = 0
while (x138 < x64) {  // begin fat loop x144
val x141 = x55(x115, x138)
val x142 = x55(x136, x138)
val x143 = x141 - x142
x144.dcUpdate(x138, x143)
x138 += 1
} // end fat loop x144
val x150 = {
val x146 = new generated.scala.DoubleVectorImpl(x64,true)
x146
}
var x145 = 0
while (x145 < x64) {  // begin fat loop x150
val x148 = x144(x145)
val x149 = java.lang.Double.longBitsToDouble((java.lang.Double.doubleToRawLongBits(x148)<<1)>>>1)
x150.dcUpdate(x145, x149)
x145 += 1
} // end fat loop x150
var x156: Double = 0
var x151 = 0
while (x151 < x64) {  // begin fat loop x156
val x154 = x150(x151)
val x152 = x156
val x153 = x154
val x155 = x152 + x153
x156 = x155
x151 += 1
} // end fat loop x156
val x157 = { 
x156
}
val x158 = x157==x135
val x160 = x158 && x159
val x162 = {
def x162thenb(): Double = {
val x161 = 2147483647.asInstanceOf[Double]
x161
}
def x162elseb(): Double = {
x157
}
if (x160) {
x162thenb()
} else {
x162elseb()
}
}
x162
})
mapIdx += 1
} // end map loop x165
x163
}
val x165 = x165_block
val x166 = x165.length
var x174: Int = 0
var x167 = 0
while (x167 < x166) {  // begin fat loop x174
val x168 = x174
val x169 = x167
val x170 = x165(x168)
val x171 = x165(x169)
val x172 = x170 < x171
val x173 = {
def x173thenb(): Int = {
x168
}
def x173elseb(): Int = {
x169
}
if (x172) {
x173thenb()
} else {
x173elseb()
}
}
x174 = x173
x167 += 1
} // end fat loop x174
val x182 = {
val x177 = new generated.scala.DoubleVectorImpl(x64,true)
x177
}
var x176 = 0
while (x176 < x64) {  // begin fat loop x182
val x179 = x55(x115, x176)
val x180 = x55(x174, x176)
val x181 = x179 - x180
x182.dcUpdate(x176, x181)
x176 += 1
} // end fat loop x182
val x188 = {
val x184 = new generated.scala.DoubleVectorImpl(x64,true)
x184
}
var x183 = 0
while (x183 < x64) {  // begin fat loop x188
val x186 = x182(x183)
val x187 = java.lang.Double.longBitsToDouble((java.lang.Double.doubleToRawLongBits(x186)<<1)>>>1)
x188.dcUpdate(x183, x187)
x183 += 1
} // end fat loop x188
var x194: Double = 0
var x189 = 0
while (x189 < x64) {  // begin fat loop x194
val x192 = x188(x189)
val x190 = x194
val x191 = x192
val x193 = x190 + x191
x194 = x193
x189 += 1
} // end fat loop x194
val x195 = { 
x194
}
x195
})
mapIdx += 1
} // end map loop x201
x199
}
val x201 = x201_block
val x202 = x201.sort
val x203 = x202.length
val x204 = x203 / 2
val x205 = x202(x204)
val x206 = { 
x205
}
val x207 = "   med_min_dist = "+x206
val x208 = println(x207)
val x210 = 1.5 * x206
val x209 = 5.0 * x206
val x211 = "   For this "+x61
val x212 = x211+" channel data, KERNEL WIDTH is "
val x213 = x212+x209
val x214 = x213+", APPRX WIDTH is "
val x215 = x214+x210
val x216 = println(x215)
val x217 = println("   finding local density for each cell ...")
val x246 = new generated.scala.IntVectorImpl(x61,true)
var x256: Int = 0
val x242 = { (x218: Int, x219: Int) => 
val x228 = {
val x223 = new generated.scala.DoubleVectorImpl(x64,true)
x223
}
var x222 = 0
while (x222 < x64) {  // begin fat loop x228
val x225 = x55(x218, x222)
val x226 = x55(x219, x222)
val x227 = x225 - x226
x228.dcUpdate(x222, x227)
x222 += 1
} // end fat loop x228
val x234 = {
val x230 = new generated.scala.DoubleVectorImpl(x64,true)
x230
}
var x229 = 0
while (x229 < x64) {  // begin fat loop x234
val x232 = x228(x229)
val x233 = java.lang.Double.longBitsToDouble((java.lang.Double.doubleToRawLongBits(x232)<<1)>>>1)
x234.dcUpdate(x229, x233)
x229 += 1
} // end fat loop x234
var x240: Double = 0
var x235 = 0
while (x235 < x64) {  // begin fat loop x240
val x238 = x234(x235)
val x236 = x240
val x237 = x238
val x239 = x236 + x237
x240 = x239
x235 += 1
} // end fat loop x240
val x241 = { 
x240
}
x241: Double
}
val x243 = 100000 / x61
val x244 = x243 + 1000
val x245 = new generated.scala.DoubleStreamImpl(x61,x61,x244,x242,true)
val x247 = x245.numRows
val x248 = x247
val x249 = x245.numCols
val x250 = 100000 / x249
val x251 = x250 + 1000
val x252 = x251.doubleValue()
val x253 = x248 / x252
val x254 = Math.ceil(x253)
val x255 = x254.asInstanceOf[Int]
val x264 = x245.isPure
val x355 = while ({val x257 = x256
val x258 = x257 < x255
x258}) {
val x260 = x256
val x352 = {
def x352thenb(): Unit = {
val x265 = x256
val x261 = x245.rowsIn(x260)
val x262 = new generated.scala.IndexVectorRangeImpl(0,x261)
val x267 = List()
val x270 = x265 * x244
def x307_block = {
var forIdx = 0
while (forIdx < x262.size) { // begin foreach loop x307
val x263 = x262.dcApply(forIdx)
val x268 = x245.initRow(x263,x265)
val x271 = x270 + x263
val x272 = x271 % 1000
val x273 = x272==0
val x277 = {
def x277thenb(): Unit = {
val x274 = "  (streaming) # processed node = "+x271
val x275 = println(x274)
x275
}
def x277elseb(): Unit = {
()
}
if (x273) {
x277thenb()
} else {
x277elseb()
}
}
val x278 = x246(x271)
val x279 = x278==0
val x305 = {
def x305thenb(): Unit = {
val x284 = x263 * x249
val x289 = {
val x281 = new generated.scala.IntVectorImpl(0,true)
val x282 = new generated.scala.IndexVectorSeqImpl(x281)
//TODO: buffer size might be wrong (loop has conditions)
x282
}
var x280 = 0
while (x280 < x249) {  // begin fat loop x289
val x285 = x284 + x280
val x286 = x245.rawElem(x285)
val x287 = { 
x286
}
val x288 = x287 < x210
if (x288) x289.insert(x289.length, x280)
x280 += 1
} // end fat loop x289
var x298: Int = 0
var x290 = 0
while (x290 < x249) {  // begin fat loop x298
val x293 = x284 + x290
val x294 = x245.rawElem(x293)
val x295 = { 
x294
}
val x296 = x295 < x209
if (x296) {
val x291 = x298
val x292 = 1
val x297 = x291 + x292
x298 = x297
}
x290 += 1
} // end fat loop x298
def x303_block = {
var forIdx = 0
while (forIdx < x289.size) { // begin foreach loop x303
val x300 = x289.dcApply(forIdx)
val x301 = x246(x300) = x298
x301
forIdx += 1
} // end foreach loop x303
}
val x303 = x303_block
x303
}
def x305elseb(): Unit = {
()
}
if (x279) {
x305thenb()
} else {
x305elseb()
}
}
x305
forIdx += 1
} // end foreach loop x307
}
val x307 = x307_block
x307
}
def x352elseb(): Unit = {
val x309 = x256
val x310 = x245.initChunk(x309)
val x311 = x256
val x261 = x245.rowsIn(x260)
val x262 = new generated.scala.IndexVectorRangeImpl(0,x261)
val x267 = List()
val x314 = x311 * x244
def x350_block = {
var forIdx = 0
while (forIdx < x262.size) { // begin foreach loop x350
val x263 = x262.dcApply(forIdx)
val x315 = x314 + x263
val x316 = x315 % 1000
val x317 = x316==0
val x321 = {
def x321thenb(): Unit = {
val x318 = "  (streaming) # processed node = "+x315
val x319 = println(x318)
x319
}
def x321elseb(): Unit = {
()
}
if (x317) {
x321thenb()
} else {
x321elseb()
}
}
val x322 = x246(x315)
val x323 = x322==0
val x348 = {
def x348thenb(): Unit = {
val x284 = x263 * x249
val x332 = {
val x325 = new generated.scala.IntVectorImpl(0,true)
val x326 = new generated.scala.IndexVectorSeqImpl(x325)
//TODO: buffer size might be wrong (loop has conditions)
x326
}
var x324 = 0
while (x324 < x249) {  // begin fat loop x332
val x328 = x284 + x324
val x329 = x245.rawElem(x328)
val x330 = { 
x329
}
val x331 = x330 < x210
if (x331) x332.insert(x332.length, x324)
x324 += 1
} // end fat loop x332
var x341: Int = 0
var x333 = 0
while (x333 < x249) {  // begin fat loop x341
val x336 = x284 + x333
val x337 = x245.rawElem(x336)
val x338 = { 
x337
}
val x339 = x338 < x209
if (x339) {
val x334 = x341
val x335 = 1
val x340 = x334 + x335
x341 = x340
}
x333 += 1
} // end fat loop x341
def x346_block = {
var forIdx = 0
while (forIdx < x332.size) { // begin foreach loop x346
val x343 = x332.dcApply(forIdx)
val x344 = x246(x343) = x341
x344
forIdx += 1
} // end foreach loop x346
}
val x346 = x346_block
x346
}
def x348elseb(): Unit = {
()
}
if (x323) {
x348thenb()
} else {
x348elseb()
}
}
x348
forIdx += 1
} // end foreach loop x350
}
val x350 = x350_block
x350
}
if (x264) {
x352thenb()
} else {
x352elseb()
}
}
val x353 = x256 += 1
()
}
val x356 = Seq(x246)
val x357 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
var x358: Int = 0
val x368 = while ({val x359 = x358
val x360 = x359 < 9
x360}) {
val x362 = x358
val x363 = x246(x362)
val x364 = x363+" "
val x365 = print(x364)
val x366 = x358 += 1
()
}
val x369 = println(())
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
