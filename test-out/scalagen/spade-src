/*****************************************
  Emitting Generated Code                  
*******************************************/
class SpadeRunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 2
val x6 = {
def x6thenb(): Nothing = {
val x3 = println("Usage: Spade <input data file> <output data file>")
val x4 = exit(-1)
x4
}
if (x2) {
x6thenb()
}
}
val x7 = x0(0)
val x53 = { 
val x8 = new java.io.FileReader(x7)
val x9 = new java.io.BufferedReader(x8)
val x10 = x9.readLine()
var x11: java.lang.String = x10
val x12 = x11
val x13 = x12.trim()
x11 = x13
val x15 = x11
val x16 = x15.split("\\s+")
var x17: Array[java.lang.String] = x16
val x18 = x17
val x19 = x18.length
val x20 = new generated.scala.DoubleMatrixImpl(0,x19)
val x50 = while ({val x21 = x11
val x22 = x21 != null
x22}) {
val x24 = x17
val x25 = x24.length
val x26 = new generated.scala.DoubleVectorImpl(x25,true)
var x28 : Int = 0
val x34 = while (x28 < x25) {
val x29 = x17
val x30 = x29(x28)
val x31 = java.lang.Double.parseDouble(x30)
val x32 = x26(x28) = x31
x32
x28 = x28 + 1
}
val x35 = x26.cloneL
val x36 = x20.numRows
val x37 = x20.insertRow(x36,x35)
val x38 = x9.readLine()
x11 = x38
val x40 = x11
val x41 = x40 != null
val x48 = {
def x48thenb(): Unit = {
val x42 = x40.trim()
x11 = x42
val x44 = x11
val x45 = x44.split("\\s+")
x17 = x45
()
}
if (x41) {
x48thenb()
}
}
x48
}
val x51 = x9.close()
x20
}
val x54 = new generated.scala.IntVectorImpl(0,false)
val x55 = new generated.scala.IntLabelsImpl(x54)
val x56 = new generated.scala.DoubleIntTrainingSetImpl(x53,x55)
val x57 = Seq()
val x58 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
val x59 = new generated.scala.IntVectorImpl(0,true)
val x60 = x59.length
val x61 = x59.insert(x60, 0)
val x62 = x59.cloneL
val x63 = x56.numRows
val x66 = x56.numCols
val x64 = "   Input matrix size: "+x63
val x65 = x64+"*"
val x67 = x65+x66
val x68 = println(x67)
val x69 = x56.numRows
val x75 = new generated.scala.IntVectorImpl(0,true)
val x76 = x75.length
val x77 = x75.insert(x76, x69)
val x78 = x75.length
val x79 = x75.insert(x78, 2000)
val x80 = x75.length
val x70 = x69
val x71 = 2.5E9f / x70
val x72 = x71
val x73 = Math.floor(x72)
val x74 = x73.asInstanceOf[Int]
val x81 = x75.insert(x80, x74)
val x82 = x75.cloneL
val x83 = x75.length
var x90: Int = 2147483647
var x84 = 0
while (x84 < x83) {  // begin fat loop x90
val x87 = x82(x84)
val x85 = x90
val x86 = x87
val x88 = x85 < x86
val x89 = {
def x89thenb(): Int = {
x85
}
def x89elseb(): Int = {
x86
}
if (x88) {
x89thenb()
} else { 
x89elseb()
}
}
x90 = x89
x84 += 1
} // end fat loop x90
val x91 = "   numSamples = "+x90
val x92 = println(x91)
val x93 = println("   finding empirical dist of the min distance between cells ...")
val x94 = println("   med_min_dist = 4.4593519740000005")
val x95 = x56.numRows
val x96 = "   For this "+x95
val x97 = x96+" channel data, KERNEL WIDTH is "
val x98 = x97+22.296759870000002
val x99 = x98+", APPRX WIDTH is "
val x100 = x99+6.689027961000001
val x101 = println(x100)
val x102 = println("   finding local density for each cell ...")
val x103 = x56.numRows
val x138 = { (x104: Int, x105: Int) => 
val x106 = x56.getRow(x104)
val x107 = x56.getRow(x105)
val x136 = { 
val x108 = x106.length
val x109 = x106.isRow
// a *thin* loop follows: x117
val x117 = {
val x111 = new generated.scala.DoubleVectorImpl(x108,x109)
x111
}
var x110 = 0
while (x110 < x108) {  // begin fat loop x117
val x113 = x106(x110)
val x114 = x107(x110)
val x115 = x113 - x114
x117.dcUpdate(x110, x115)
x110 += 1
} // end fat loop x117
val x118 = x117.length
val x119 = x117.isRow
// a *thin* loop follows: x126
val x126 = {
val x121 = new generated.scala.DoubleVectorImpl(x118,x119)
x121
}
var x120 = 0
while (x120 < x118) {  // begin fat loop x126
val x123 = x117(x120)
val x124 = java.lang.Math.abs(x123)
x126.dcUpdate(x120, x124)
x120 += 1
} // end fat loop x126
val x127 = x126.length
// a *thin* loop follows: x134
var x134: Double = 0
var x128 = 0
while (x128 < x127) {  // begin fat loop x134
val x131 = x126(x128)
val x129 = x134
val x130 = x131
val x133 = x129 + x130
x134 = x133
x128 += 1
} // end fat loop x134
x134
}
x136: Double
}
val x139 = 100000 / x103
val x140 = x139 + 1000
val x141 = new generated.scala.DoubleStreamImpl(x103,x103,x140,x138,false)
val x142 = new generated.scala.IntVectorImpl(x103,true)
var x148: Int = 0
val x143 = x103
val x144 = x140.doubleValue()
val x145 = x143 / x144
val x146 = Math.ceil(x145)
val x147 = x146.asInstanceOf[Int]
val x149 = x148
val x150 = x149 < x147
val x151 = x149 * x140
val x152 = x103 - x151
val x153 = x152 < 0
val x175 = List()
val x214 = while ({x150}) {
val x158 = { 
val x154 = {
def x154thenb(): Int = {
x103
}
def x154elseb(): Int = {
x152
}
if (x153) {
x154thenb()
} else { 
x154elseb()
}
}
val x155 = Math.min(x140, x154)
val x156 = x155.asInstanceOf[Int]
x156
}
val x173 = { 
var x165: Int = 0
val x166 = x165
val x167 = x166 < x158
val x171 = while ({x167}) {
val x168 = x141.initRow(x166,x149)
val x169 = x165 += 1
()
}
()
}
val x159 = new generated.scala.IndexVectorRangeImpl(0,x158)
val x211 = {
var forIdx = 0
while (forIdx < x159.size) { // begin foreach loop x211
val x160 = x159.dcApply(forIdx)
val x176 = x141.chunkRow(x160,x149)
val x177 = x176.index
val x178 = x177 % 1000
val x179 = x178==0
val x183 = {
def x183thenb(): Unit = {
val x180 = "  (streaming) # processed node = "+x177
val x181 = println(x180)
x181
}
if (x179) {
x183thenb()
}
}
val x184 = x176.index
val x185 = x142(x184)
val x186 = x185==0
val x209 = {
def x209thenb(): Unit = {
val x187 = x176.length
// a *thin* loop follows: x194
val x194 = {
val x189 = new generated.scala.IndexVectorSeqImpl(0)
//TODO: buffer size might be wrong (loop has conditions)
x189
}
var x188 = 0
while (x188 < x187) {  // begin fat loop x194
val x191 = x176(x188)
val x192 = x191 < 6.689027961000001
if (x192) x194.insert(x194.length, x188)
x188 += 1
} // end fat loop x194
// a *thin* loop follows: x202
var x202: Int = 0
var x195 = 0
while (x195 < x187) {  // begin fat loop x202
val x198 = x176(x195)
val x199 = x198 < 22.296759870000002
if (x199) {
val x196 = x202
val x197 = 1
val x201 = x196 + x197
x202 = x201
}
x195 += 1
} // end fat loop x202
val x207 = {
var forIdx = 0
while (forIdx < x194.size) { // begin foreach loop x207
val x204 = x194.dcApply(forIdx)
val x205 = x142(x204) = x202
x205
forIdx += 1
} // end foreach loop x207
}
x207
}
if (x186) {
x209thenb()
}
}
x209
forIdx += 1
} // end foreach loop x211
}
val x212 = x148 += 1
()
}
val x215 = Seq(x142)
val x216 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
var x217: Int = 0
val x218 = x217
val x219 = x218 < 9
val x225 = while ({x219}) {
val x220 = x142(x218)
val x221 = x220+" "
val x222 = print(x221)
val x223 = x217 += 1
()
}
val x226 = println(())
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
