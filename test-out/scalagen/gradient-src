/*****************************************
  Emitting Generated Code                  
*******************************************/
class gradientRunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0(0)
def x54_block = { 
val x2 = new java.io.FileReader(x1)
val x3 = new java.io.BufferedReader(x2)
val x4 = x3.readLine()
var x5: java.lang.String = x4
val x6 = x5
val x7 = x6.trim()
x5 = x7
val x9 = x5
val x10 = x9.split("\\s+")
var x11: Array[java.lang.String] = x10
val x12 = x11
val x13 = x12.length
val x14 = new generated.scala.IntMatrixImpl(0,x13)
val x50 = while ({val x15 = x5
val x16 = x15 != null
x16}) {
val x18 = x11
val x19 = x18.length
val x20 = new generated.scala.IntVectorImpl(x19,true)
var x21: Int = 0
val x35 = while ({val x22 = x21
val x23 = x11
val x24 = x23.length
val x25 = x22 < x24
x25}) {
val x27 = x21
val x28 = x11
val x29 = x21
val x30 = x28(x29)
val x31 = java.lang.Integer.parseInt(x30)
val x32 = x20(x27) = x31
val x33 = x21 += 1
()
}
val x36 = x14.numRows
val x37 = x14.insertRow(x36,x20)
val x38 = x3.readLine()
x5 = x38
val x40 = x5
val x41 = x40 != null
val x48 = {
def x48thenb(): Unit = {
val x42 = x40.trim()
x5 = x42
val x44 = x5
val x45 = x44.split("\\s+")
x11 = x45
()
}
def x48elseb(): Unit = {
()
}
if (x41) {
x48thenb()
} else {
x48elseb()
}
}
x48
}
val x51 = x3.close()
val x52 = new generated.scala.GrayscaleImageImpl(x14)
x52
}
val x54 = x54_block
val x55 = x0(1)
def x229_block = { 
val x56 = new generated.scala.VectorImpl[java.lang.String](0,true)
val x57 = new java.io.File(x55)
val x58 = x57.getCanonicalFile()
val x59 = x58.listFiles()
val x65=x59.foreach{
x60 => 
val x62 = x56.length
val x61 = x60.getPath()
val x63 = x56.insert(x62, x61)
x63
}
def x227_block = {
val x223 = x56.length
val x224 = x56.isRow
val x225 = new generated.scala.VectorImpl[scala.Tuple2[java.lang.String, generated.scala.Vector[generated.scala.BinarizedGradientTemplate]]](x223,x224)
var mapIdx = 0
while (mapIdx < x56.size) {
val x66 = x56.dcApply(mapIdx)
x225.dcUpdate(mapIdx,  {
val x67 = "Loading model: "+x66
val x68 = println(x67)
val x69 = new generated.scala.VectorImpl[generated.scala.BinarizedGradientTemplate](0,true)
val x70 = new java.io.FileReader(x66)
val x71 = new java.io.BufferedReader(x70)
val x72 = x71.readLine()
val x73 = x72 != "bigg_object:"
val x76 = {
def x76thenb(): Nothing = {
val x74 = error("Illegal data format")
x74
}
def x76elseb(): Unit = {
()
}
if (x73) {
x76thenb()
} else {
x76elseb()
}
}
val x77 = x71.readLine()
val x78 = x71.readLine()
val x79 = x78.trim()
val x80 = x79.split(" ")
val x81 = x80(0)
val x82 = x81 != "obj_name/obj_num/num_objs:"
val x85 = {
def x85thenb(): Nothing = {
val x83 = error("Illegal data format")
x83
}
def x85elseb(): Unit = {
()
}
if (x82) {
x85thenb()
} else {
x85elseb()
}
}
var x90: Int = 0
val x88 = x80(3)
val x89 = java.lang.Integer.parseInt(x88)
val x220 = while ({val x91 = x90
val x92 = x91 < x89
x92}) {
val x94 = x71.readLine()
val x95 = x94.trim()
val x96 = x95 != "====OneBiGG====:"
val x99 = {
def x99thenb(): Nothing = {
val x97 = error("Illegal data format")
x97
}
def x99elseb(): Unit = {
()
}
if (x96) {
x99thenb()
} else {
x99elseb()
}
}
val x100 = x71.readLine()
val x101 = x100.trim()
val x102 = x101.split(" ")
var x103: Array[java.lang.String] = x102
val x104 = x103
val x105 = x104(0)
val x106 = x105 != "view/radius/reduction:"
val x109 = {
def x109thenb(): Nothing = {
val x107 = error("Illegal data format")
x107
}
def x109elseb(): Unit = {
()
}
if (x106) {
x109thenb()
} else {
x109elseb()
}
}
val x110 = x103
val x117 = x71.readLine()
val x118 = x117.trim()
val x119 = x118.split(" ")
x103 = x119
val x121 = x103
val x122 = x121(0)
val x123 = x122 != "Gradients:"
val x126 = {
def x126thenb(): Nothing = {
val x124 = error("Illegal data format")
x124
}
def x126elseb(): Unit = {
()
}
if (x123) {
x126thenb()
} else {
x126elseb()
}
}
val x127 = x103
val x128 = x127(1)
val x129 = java.lang.Integer.parseInt(x128)
val x130 = new generated.scala.IntVectorImpl(x129,true)
val x131 = x71.readLine()
var x134: Int = 0
val x132 = x131.trim()
val x133 = x132.split(" ")
val x145 = while ({val x135 = x134
val x136 = x135 < x129
x136}) {
val x138 = x134
val x139 = x134
val x140 = x133(x139)
val x141 = java.lang.Integer.parseInt(x140)
val x142 = x130(x138) = x141
val x143 = x134 += 1
()
}
val x146 = x71.readLine()
val x147 = x146.trim()
val x148 = x147.split(" ")
x103 = x148
val x150 = x103
val x151 = x150(0)
val x152 = x151 != "Match_list:"
val x155 = {
def x155thenb(): Nothing = {
val x153 = error("Illegal data format")
x153
}
def x155elseb(): Unit = {
()
}
if (x152) {
x155thenb()
} else {
x155elseb()
}
}
val x156 = x103
val x159 = new generated.scala.IntVectorImpl(0,true)
val x160 = new generated.scala.IndexVectorSeqImpl(x159)
val x161 = x71.readLine()
x134 = 0
val x157 = x156(1)
val x158 = java.lang.Integer.parseInt(x157)
val x162 = x161.trim()
val x163 = x162.split(" ")
val x175 = while ({val x165 = x134
val x166 = x165 < x158
x166}) {
val x168 = x134
val x171 = x160.length
val x169 = x163(x168)
val x170 = java.lang.Integer.parseInt(x169)
val x172 = x160.insert(x171, x170)
val x173 = x134 += 1
()
}
val x176 = x71.readLine()
val x177 = x176.trim()
val x178 = x177.split(" ")
x103 = x178
val x180 = x103
val x181 = x180(0)
val x182 = x181 != "Occlusions:"
val x185 = {
def x185thenb(): Nothing = {
val x183 = error("Illegal data format")
x183
}
def x185elseb(): Unit = {
()
}
if (x182) {
x185thenb()
} else {
x185elseb()
}
}
val x186 = x103
val x189 = new generated.scala.VectorImpl[generated.scala.Vector[Int]](0,true)
val x190 = x71.readLine()
val x187 = x186(1)
val x188 = java.lang.Integer.parseInt(x187)
val x193 = x188 != 0
val x196 = {
def x196thenb(): Nothing = {
val x194 = error("Occlusions not supported.")
x194
}
def x196elseb(): Unit = {
()
}
if (x193) {
x196thenb()
} else {
x196elseb()
}
}
val x197 = x71.readLine()
val x198 = x197.trim()
val x199 = x198 != "BoundingBox:"
val x202 = {
def x202thenb(): Nothing = {
val x200 = error("Illegal data format")
x200
}
def x202elseb(): Unit = {
()
}
if (x199) {
x202thenb()
} else {
x202elseb()
}
}
val x203 = x71.readLine()
val x204 = x203.trim()
val x205 = x204.split(" ")
val x206 = x205(0)
val x207 = java.lang.Integer.parseInt(x206)
val x208 = x205(1)
val x209 = java.lang.Integer.parseInt(x208)
val x210 = x205(2)
val x211 = java.lang.Integer.parseInt(x210)
val x212 = x205(3)
val x213 = java.lang.Integer.parseInt(x212)
val x214 = new generated.scala.Rect(x207,x209,x211,x213)
val x113 = x110(2)
val x114 = java.lang.Integer.parseInt(x113)
val x215 = new generated.scala.BinarizedGradientTemplate(x114,x214,null,0,x130,x160,x189,null,null)
val x216 = x69.length
val x217 = x69.insert(x216, x215)
val x218 = x90 += 1
()
}
val x86 = x80(1)
val x221 = (x86,x69)
x221
})
mapIdx += 1
} // end while
x225
}
val x227 = x227_block
x227
}
val x229 = x229_block
val x230 = Seq()
val x231 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
var x232: Int = 0
val x266 = x54.numRows
val x267 = new generated.scala.IndexVectorRangeImpl(0,x266)
val x268 = x54.numCols
val x269 = new generated.scala.IndexVectorRangeImpl(0,x268)
val x270 = new generated.scala.IndexVector2Impl(x267,x269)
val x271 = x270.rowInd
val x272 = x271.length
val x276 = x270.colInd
val x334 = x276.length
val x335 = x276.isRow
val x485 = Math.Pi
val x538 = 2 / 2
val x1232 = while ({val x233 = x232
val x234 = x233 < 3
x234}) {
val x236 = new generated.scala.IntMatrixImpl(3,3)
val x237 = x236(0, 0) = -3
val x238 = x236(0, 1) = -10
val x239 = x236(0, 2) = -3
val x240 = x236(2, 0) = 3
val x241 = x236(2, 1) = 10
val x242 = x236(2, 2) = 3
def x259_block = { 
val x243 = x236.numCols
val x244 = x236.numRows
val x245 = new generated.scala.IntMatrixImpl(x243,x244)
val x246 = x245.numRows
var x248 : Int = 0
val x257 = while (x248 < x246) {
val x249 = x245.numCols
var x251 : Int = 0
val x255 = while (x251 < x249) {
val x252 = x236(x251, x248)
val x253 = x245(x248, x251) = x252
x253
x251 = x251 + 1
}
x255
x248 = x248 + 1
}
x245
}
val x259 = x259_block
val x260 = x259.numRows
val x262 = x260 - 1
val x263 = x262 / 2
val x279 = x266 - x263
val x261 = x259.numCols
val x264 = x261 - 1
val x265 = x264 / 2
val x284 = x268 - x265
def x339_block = {
val x273 = new generated.scala.VectorImpl[generated.scala.Vector[Int]](x272,true)
var mapIdx = 0
while (mapIdx < x271.size) {
val x275 = x271.dcApply(mapIdx)
x273.dcUpdate(mapIdx,  {
val x278 = x275 >= x263
val x280 = x275 < x279
val x281 = x278 && x280
def x338_block = {
val x336 = new generated.scala.IntVectorImpl(x334,x335)
var mapIdx = 0
while (mapIdx < x276.size) {
val x277 = x276.dcApply(mapIdx)
x336.dcUpdate(mapIdx,  {
val x282 = x277 >= x265
val x283 = x281 && x282
val x285 = x277 < x284
val x286 = x283 && x285
val x333 = {
def x333thenb(): Int = {
val x287 = x275 - x263
val x288 = x275 + x263
val x289 = x288 + 1
val x290 = x277 - x265
val x291 = x277 + x265
val x292 = x291 + 1
val x293 = x289 - x287
val x294 = x292 - x290
def x319_block = { 
val x295 = new generated.scala.IntMatrixImpl(x293,x294)
var x296: Int = x287
val x317 = while ({val x297 = x296
val x298 = x297 < x289
x298}) {
var x300: Int = x290
val x314 = while ({val x301 = x300
val x302 = x301 < x292
x302}) {
val x304 = x296
val x306 = x300
val x308 = x296
val x309 = x300
val x305 = x304 - x287
val x307 = x306 - x290
val x310 = x54(x308, x309)
val x311 = x295(x305, x307) = x310
val x312 = x300 += 1
()
}
val x315 = x296 += 1
()
}
x295
}
val x319 = x319_block
val x320 = x319.numRows
val x321 = x319.numCols
def x327_block = {
val x322 = new generated.scala.IntMatrixImpl(x320,x321)
var zipIdx = 0
while (zipIdx < x319.size) {
val x324 = x319.dcApply(zipIdx)
val x325 = x259.dcApply(zipIdx)
x322.dcUpdate(zipIdx,  {
val x326 = x324 * x325
x326
})
zipIdx += 1
} // end while
x322
}
val x327 = x327_block
def x331_block = {
var x328 = x327.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x327.size) {
val x329 = x327.dcApply(reduceIdx)
x328 = {
val x330 = x328 + x329
x330
}
reduceIdx += 1
} // end while
x328
}
val x331 = x331_block
x331
}
def x333elseb(): Int = {
val x332 = 0.asInstanceOf[Int]
x332
}
if (x286) {
x333thenb()
} else {
x333elseb()
}
}
x333
})
mapIdx += 1
} // end while
x336
}
val x338 = x338_block
x338
})
mapIdx += 1
} // end while
x273
}
val x339 = x339_block
val x340 = x339.length
val x341 = x340 > 0
val x344 = {
def x344thenb(): Int = {
val x342 = x339(0)
val x343 = x342.length
x343
}
def x344elseb(): Int = {
0
}
if (x341) {
x344thenb()
} else {
x344elseb()
}
}
def x358_block = { 
val x345 = new generated.scala.IntMatrixImpl(x340,x344)
var x347 : Int = 0
val x356 = while (x347 < x340) {
val x350 = x339(x347)
var x349 : Int = 0
val x354 = while (x349 < x344) {
val x351 = x350(x349)
val x352 = x345(x347, x349) = x351
x352
x349 = x349 + 1
}
x354
x347 = x347 + 1
}
x345
}
val x358 = x358_block
val x359 = new generated.scala.IntImageImpl(x358)
val x360 = x236.numRows
val x361 = x236.numCols
val x362 = x360 - 1
val x363 = x362 / 2
val x371 = x266 - x363
val x364 = x361 - 1
val x365 = x364 / 2
val x376 = x268 - x365
def x430_block = {
val x366 = new generated.scala.VectorImpl[generated.scala.Vector[Int]](x272,true)
var mapIdx = 0
while (mapIdx < x271.size) {
val x368 = x271.dcApply(mapIdx)
x366.dcUpdate(mapIdx,  {
val x370 = x368 >= x363
val x372 = x368 < x371
val x373 = x370 && x372
def x429_block = {
val x427 = new generated.scala.IntVectorImpl(x334,x335)
var mapIdx = 0
while (mapIdx < x276.size) {
val x369 = x276.dcApply(mapIdx)
x427.dcUpdate(mapIdx,  {
val x374 = x369 >= x365
val x375 = x373 && x374
val x377 = x369 < x376
val x378 = x375 && x377
val x425 = {
def x425thenb(): Int = {
val x379 = x368 - x363
val x380 = x368 + x363
val x381 = x380 + 1
val x382 = x369 - x365
val x383 = x369 + x365
val x384 = x383 + 1
val x385 = x381 - x379
val x386 = x384 - x382
def x411_block = { 
val x387 = new generated.scala.IntMatrixImpl(x385,x386)
var x388: Int = x379
val x409 = while ({val x389 = x388
val x390 = x389 < x381
x390}) {
var x392: Int = x382
val x406 = while ({val x393 = x392
val x394 = x393 < x384
x394}) {
val x396 = x388
val x398 = x392
val x400 = x388
val x401 = x392
val x397 = x396 - x379
val x399 = x398 - x382
val x402 = x54(x400, x401)
val x403 = x387(x397, x399) = x402
val x404 = x392 += 1
()
}
val x407 = x388 += 1
()
}
x387
}
val x411 = x411_block
val x412 = x411.numRows
val x413 = x411.numCols
def x419_block = {
val x414 = new generated.scala.IntMatrixImpl(x412,x413)
var zipIdx = 0
while (zipIdx < x411.size) {
val x416 = x411.dcApply(zipIdx)
val x417 = x236.dcApply(zipIdx)
x414.dcUpdate(zipIdx,  {
val x418 = x416 * x417
x418
})
zipIdx += 1
} // end while
x414
}
val x419 = x419_block
def x423_block = {
var x420 = x419.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x419.size) {
val x421 = x419.dcApply(reduceIdx)
x420 = {
val x422 = x420 + x421
x422
}
reduceIdx += 1
} // end while
x420
}
val x423 = x423_block
x423
}
def x425elseb(): Int = {
val x332 = 0.asInstanceOf[Int]
x332
}
if (x378) {
x425thenb()
} else {
x425elseb()
}
}
x425
})
mapIdx += 1
} // end while
x427
}
val x429 = x429_block
x429
})
mapIdx += 1
} // end while
x366
}
val x430 = x430_block
val x431 = x430.length
val x432 = x431 > 0
val x435 = {
def x435thenb(): Int = {
val x433 = x430(0)
val x434 = x433.length
x434
}
def x435elseb(): Int = {
0
}
if (x432) {
x435thenb()
} else {
x435elseb()
}
}
def x449_block = { 
val x436 = new generated.scala.IntMatrixImpl(x431,x435)
var x438 : Int = 0
val x447 = while (x438 < x431) {
val x441 = x430(x438)
var x440 : Int = 0
val x445 = while (x440 < x435) {
val x442 = x441(x440)
val x443 = x436(x438, x440) = x442
x443
x440 = x440 + 1
}
x445
x438 = x438 + 1
}
x436
}
val x449 = x449_block
val x450 = new generated.scala.IntImageImpl(x449)
val x453 = x359.numRows
val x454 = x359.numCols
def x457_block = {
val x455 = new generated.scala.FloatMatrixImpl(x453,x454)
var mapIdx = 0
while (mapIdx < x359.size) {
val x451 = x359.dcApply(mapIdx)
x455.dcUpdate(mapIdx,  {
val x452 = x451
x452
})
mapIdx += 1
} // end while
x455
}
val x457 = x457_block
val x460 = x450.numRows
val x461 = x450.numCols
def x464_block = {
val x462 = new generated.scala.FloatMatrixImpl(x460,x461)
var mapIdx = 0
while (mapIdx < x450.size) {
val x458 = x450.dcApply(mapIdx)
x462.dcUpdate(mapIdx,  {
val x459 = x458
x459
})
mapIdx += 1
} // end while
x462
}
val x464 = x464_block
val x465 = x457.numRows
val x466 = x457.numCols
def x488_block = {
val x477 = new generated.scala.FloatMatrixImpl(x465,x466)
var zipIdx = 0
while (zipIdx < x457.size) {
val x479 = x457.dcApply(zipIdx)
val x480 = x464.dcApply(zipIdx)
x477.dcUpdate(zipIdx,  {
val x481 = x480
val x482 = x479
val x483 = Math.atan2(x481, x482)
val x484 = x483 * 180.0
val x486 = x484 / x485
val x487 = x486.asInstanceOf[Float]
x487
})
zipIdx += 1
} // end while
x477
}
val x488 = x488_block
def x493_block = {
var mapIdx = 0
while (mapIdx < x488.size) {
val x489 = x488.dcApply(mapIdx)
x488.dcUpdate(mapIdx,  {
val x490 = x489 < 0.0f
val x492 = {
def x492thenb(): Float = {
val x491 = x489 + 360.0f
x491
}
def x492elseb(): Float = {
x489
}
if (x490) {
x492thenb()
} else {
x492elseb()
}
}
x492
})
mapIdx += 1
} // end while
x488
}
val x493 = x493_block
def x494_block = {
val x467 = new generated.scala.FloatMatrixImpl(x465,x466)
var zipIdx = 0
while (zipIdx < x457.size) {
val x469 = x457.dcApply(zipIdx)
val x470 = x464.dcApply(zipIdx)
x467.dcUpdate(zipIdx,  {
val x471 = x469 * x469
val x472 = x470 * x470
val x473 = x471 + x472
val x474 = x473
val x475 = Math.sqrt(x474)
val x476 = x475.asInstanceOf[Float]
x476
})
zipIdx += 1
} // end while
x467
}
val x494 = x494_block
val x516 = x494.numRows
val x517 = x494.numCols
def x520_block = {
val x518 = new generated.scala.IntMatrixImpl(x516,x517)
var zipIdx = 0
while (zipIdx < x494.size) {
val x496 = x494.dcApply(zipIdx)
val x497 = x493.dcApply(zipIdx)
x518.dcUpdate(zipIdx,  {
val x498 = x496 >= 200.0f
val x514 = {
def x514thenb(): Int = {
var x499: Float = x497
val x500 = x499
val x501 = x500 >= 180.0f
val x505 = {
def x505thenb(): Unit = {
val x502 = x500 - 180.0f
x499 = x502
()
}
def x505elseb(): Unit = {
()
}
if (x501) {
x505thenb()
} else {
x505elseb()
}
}
val x506 = x499
val x507 = x506.asInstanceOf[Double]
val x508 = x507 / 22.5
val x509 = x508.asInstanceOf[Int]
val x510 = x509
val x511 = Math.pow(2.0,x510)
val x512 = x511.asInstanceOf[Int]
x512
}
def x514elseb(): Int = {
0
}
if (x498) {
x514thenb()
} else {
x514elseb()
}
}
x514
})
zipIdx += 1
} // end while
x518
}
val x520 = x520_block
val x521 = new generated.scala.GrayscaleImageImpl(x520)
val x522 = x521.getRow(0)
def x524_block = {
var mapIdx = 0
while (mapIdx < x522.size) {
val x523 = x522.dcApply(mapIdx)
x522.dcUpdate(mapIdx,  {
0
})
mapIdx += 1
} // end while
x522
}
val x524 = x524_block
val x525 = x521.numRows
val x526 = x525 - 1
val x527 = x521.getRow(x526)
def x529_block = {
var mapIdx = 0
while (mapIdx < x527.size) {
val x528 = x527.dcApply(mapIdx)
x527.dcUpdate(mapIdx,  {
0
})
mapIdx += 1
} // end while
x527
}
val x529 = x529_block
val x530 = x521.getCol(0)
def x532_block = {
var mapIdx = 0
while (mapIdx < x530.size) {
val x531 = x530.dcApply(mapIdx)
x530.dcUpdate(mapIdx,  {
0
})
mapIdx += 1
} // end while
x530
}
val x532 = x532_block
val x533 = x521.numCols
val x534 = x533 - 1
val x535 = x521.getCol(x534)
def x537_block = {
var mapIdx = 0
while (mapIdx < x535.size) {
val x536 = x535.dcApply(mapIdx)
x535.dcUpdate(mapIdx,  {
0
})
mapIdx += 1
} // end while
x535
}
val x537 = x537_block
val x539 = new generated.scala.IndexVectorRangeImpl(0,x525)
val x540 = new generated.scala.IndexVectorRangeImpl(0,x533)
val x541 = new generated.scala.IndexVector2Impl(x539,x540)
val x542 = x541.rowInd
val x543 = x542.length
val x547 = x541.colInd
val x550 = x525 - x538
val x555 = x533 - x538
val x647 = x547.length
val x648 = x547.isRow
def x652_block = {
val x544 = new generated.scala.VectorImpl[generated.scala.Vector[Int]](x543,true)
var mapIdx = 0
while (mapIdx < x542.size) {
val x546 = x542.dcApply(mapIdx)
x544.dcUpdate(mapIdx,  {
val x549 = x546 >= x538
val x551 = x546 < x550
val x552 = x549 && x551
def x651_block = {
val x649 = new generated.scala.IntVectorImpl(x647,x648)
var mapIdx = 0
while (mapIdx < x547.size) {
val x548 = x547.dcApply(mapIdx)
x649.dcUpdate(mapIdx,  {
val x553 = x548 >= x538
val x554 = x552 && x553
val x556 = x548 < x555
val x557 = x554 && x556
val x645 = {
def x645thenb(): Int = {
val x591 = new generated.scala.IntVectorImpl(256,true)
var x592: Int = 0
val x558 = x546 - x538
val x559 = x546 + x538
val x560 = x559 + 1
val x561 = x548 - x538
val x562 = x548 + x538
val x563 = x562 + 1
val x564 = x560 - x558
val x565 = x563 - x561
def x590_block = { 
val x566 = new generated.scala.IntMatrixImpl(x564,x565)
var x567: Int = x558
val x588 = while ({val x568 = x567
val x569 = x568 < x560
x569}) {
var x571: Int = x561
val x585 = while ({val x572 = x571
val x573 = x572 < x563
x573}) {
val x575 = x567
val x577 = x571
val x579 = x567
val x580 = x571
val x576 = x575 - x558
val x578 = x577 - x561
val x581 = x521(x579, x580)
val x582 = x566(x576, x578) = x581
val x583 = x571 += 1
()
}
val x586 = x567 += 1
()
}
x566
}
val x590 = x590_block
val x594 = x590.numRows
val x599 = x590.numCols
val x616 = while ({val x593 = x592
val x595 = x593 < x594
x595}) {
var x597: Int = 0
val x613 = while ({val x598 = x597
val x600 = x598 < x599
x600}) {
val x602 = x592
val x603 = x597
val x605 = x592
val x606 = x597
val x607 = x590(x605, x606)
val x608 = x591(x607)
val x604 = x590(x602, x603)
val x609 = x608 + 1
val x610 = x591(x604) = x609
val x611 = x597 += 1
()
}
val x614 = x592 += 1
()
}
var x617: Int = 2
val x618 = x591(1)
var x619: Int = x618
var x620: Int = 1
val x638 = while ({val x621 = x617
val x622 = x591.length
val x623 = x621 < x622
x623}) {
val x625 = x617
val x626 = x591(x625)
val x627 = x619
val x628 = x626 > x627
val x635 = {
def x635thenb(): Unit = {
val x629 = x617
val x630 = x591(x629)
x619 = x630
val x632 = x617
x620 = x632
()
}
def x635elseb(): Unit = {
()
}
if (x628) {
x635thenb()
} else {
x635elseb()
}
}
val x636 = x617 += 1
()
}
val x639 = x619
val x640 = x639 > 1
val x643 = {
def x643thenb(): Int = {
val x641 = x620
x641
}
def x643elseb(): Int = {
0
}
if (x640) {
x643thenb()
} else {
x643elseb()
}
}
x643
}
def x645elseb(): Int = {
val x332 = 0.asInstanceOf[Int]
x332
}
if (x557) {
x645thenb()
} else {
x645elseb()
}
}
x645
})
mapIdx += 1
} // end while
x649
}
val x651 = x651_block
x651
})
mapIdx += 1
} // end while
x544
}
val x652 = x652_block
val x653 = x652.length
val x654 = x653 > 0
val x657 = {
def x657thenb(): Int = {
val x655 = x652(0)
val x656 = x655.length
x656
}
def x657elseb(): Int = {
0
}
if (x654) {
x657thenb()
} else {
x657elseb()
}
}
def x671_block = { 
val x658 = new generated.scala.IntMatrixImpl(x653,x657)
var x660 : Int = 0
val x669 = while (x660 < x653) {
val x663 = x652(x660)
var x662 : Int = 0
val x667 = while (x662 < x657) {
val x664 = x663(x662)
val x665 = x658(x660, x662) = x664
x665
x662 = x662 + 1
}
x667
x660 = x660 + 1
}
x658
}
val x671 = x671_block
val x672 = new generated.scala.IntImageImpl(x671)
val x673 = new generated.scala.GrayscaleImageImpl(x672)
var x674: generated.scala.GrayscaleImage = x673
var x675: Int = 0
val x676 = new generated.scala.VectorImpl[generated.scala.GrayscaleImage](0,true)
val x677 = new generated.scala.BinarizedGradientPyramid(x676,3,1,3)
val x679 = x677.start_level
val x680 = x677.levels
val x681 = x679 + x680
val x686 = x677.pyramid
val x692 = x681 - 1
val x780 = while ({val x678 = x675
val x682 = x678 < x681
x682}) {
val x684 = x675
val x685 = x684 >= x679
val x691 = {
def x691thenb(): Unit = {
val x687 = x674
val x688 = x686.length
val x689 = x686.insert(x688, x687)
x689
}
def x691elseb(): Unit = {
()
}
if (x685) {
x691thenb()
} else {
x691elseb()
}
}
val x693 = x675
val x694 = x693 != x692
val x777 = {
def x777thenb(): Unit = {
val x695 = x674
val x696 = x695.numRows
val x697 = x696 / 2
val x698 = new generated.scala.IndexVectorRangeImpl(0,x697)
val x699 = x695.numCols
val x700 = x699 / 2
val x701 = new generated.scala.IndexVectorRangeImpl(0,x700)
val x702 = new generated.scala.IndexVector2Impl(x698,x701)
val x703 = x702.rowInd
val x704 = x703.length
val x708 = x702.colInd
val x748 = x708.length
val x749 = x708.isRow
def x753_block = {
val x705 = new generated.scala.VectorImpl[generated.scala.Vector[Int]](x704,true)
var mapIdx = 0
while (mapIdx < x703.size) {
val x707 = x703.dcApply(mapIdx)
x705.dcUpdate(mapIdx,  {
val x710 = 2 * x707
val x711 = x710 + 2
val x714 = x711 - x710
def x752_block = {
val x750 = new generated.scala.IntVectorImpl(x748,x749)
var mapIdx = 0
while (mapIdx < x708.size) {
val x709 = x708.dcApply(mapIdx)
x750.dcUpdate(mapIdx,  {
val x712 = 2 * x709
val x713 = x712 + 2
val x715 = x713 - x712
def x740_block = { 
val x716 = new generated.scala.IntMatrixImpl(x714,x715)
var x717: Int = x710
val x738 = while ({val x718 = x717
val x719 = x718 < x711
x719}) {
var x721: Int = x712
val x735 = while ({val x722 = x721
val x723 = x722 < x713
x723}) {
val x725 = x717
val x727 = x721
val x729 = x717
val x730 = x721
val x726 = x725 - x710
val x728 = x727 - x712
val x731 = x695(x729, x730)
val x732 = x716(x726, x728) = x731
val x733 = x721 += 1
()
}
val x736 = x717 += 1
()
}
x716
}
val x740 = x740_block
val x741 = x740(0, 0)
val x742 = x740(1, 0)
val x743 = x741 | x742
val x744 = x740(0, 1)
val x745 = x743 | x744
val x746 = x740(1, 1)
val x747 = x745 | x746
x747
})
mapIdx += 1
} // end while
x750
}
val x752 = x752_block
x752
})
mapIdx += 1
} // end while
x705
}
val x753 = x753_block
val x754 = x753.length
val x755 = x754 > 0
val x758 = {
def x758thenb(): Int = {
val x756 = x753(0)
val x757 = x756.length
x757
}
def x758elseb(): Int = {
0
}
if (x755) {
x758thenb()
} else {
x758elseb()
}
}
def x772_block = { 
val x759 = new generated.scala.IntMatrixImpl(x754,x758)
var x761 : Int = 0
val x770 = while (x761 < x754) {
val x764 = x753(x761)
var x763 : Int = 0
val x768 = while (x763 < x758) {
val x765 = x764(x763)
val x766 = x759(x761, x763) = x765
x766
x763 = x763 + 1
}
x768
x761 = x761 + 1
}
x759
}
val x772 = x772_block
val x773 = new generated.scala.IntImageImpl(x772)
val x774 = new generated.scala.GrayscaleImageImpl(x773)
x674 = x774
()
}
def x777elseb(): Unit = {
()
}
if (x694) {
x777thenb()
} else {
x777elseb()
}
}
val x778 = x675 += 1
()
}
val x789 = x677.fixedLevelIndex
val x790 = x789 - x679
val x791 = x686(x790)
val x792 = x791.numRows
val x793 = x792 - 5
val x794 = new generated.scala.IndexVectorRangeImpl(5,x793)
val x796 = x791.numCols
val x797 = x796 - 5
val x798 = new generated.scala.IndexVectorRangeImpl(5,x797)
def x1093_block = {
val x781 = x229.dcApply(0)
var x1065 = {
val x782 = x781._1
val x784 = "Name: "+x782
val x785 = println(x784)
val x783 = x781._2
val x786 = x783.length
val x787 = "Templates: "+x786
val x788 = println(x787)
val x871 = new generated.scala.IndexVectorRangeImpl(0,x786)
def x1060_block = {
val x795 = x794.dcApply(0)
var x1032 = {
val x818 = x795 - 15
val x819 = x818 < 0
val x823 = {
def x823thenb(): scala.Tuple2[Int, Int] = {
val x820 = 15 - x795
val x821 = (0,x820)
x821
}
def x823elseb(): scala.Tuple2[Int, Int] = {
val x822 = (x818,0)
x822
}
if (x819) {
x823thenb()
} else {
x823elseb()
}
}
val x824 = x823._1
val x826 = x795 + 15
val x827 = x826 > x792
val x828 = {
def x828thenb(): Int = {
x792
}
def x828elseb(): Int = {
x826
}
if (x827) {
x828thenb()
} else {
x828elseb()
}
}
val x825 = x823._2
def x1031_block = {
val x799 = x798.dcApply(0)
var x1003 = {
val x803 = new generated.scala.IntVectorImpl(900,false)
val x804 = new generated.scala.IntVectorImpl(0,true)
val x805 = new generated.scala.IndexVectorSeqImpl(x804)
val x806 = new generated.scala.BinarizedGradientTemplate(15,null,null,x789,x803,x805,null,null,null)
var x829: Int = x824
val x807 = x799 - 15
val x808 = x807 < 0
val x812 = {
def x812thenb(): scala.Tuple2[Int, Int] = {
val x809 = 15 - x799
val x810 = (0,x809)
x810
}
def x812elseb(): scala.Tuple2[Int, Int] = {
val x811 = (x807,0)
x811
}
if (x808) {
x812thenb()
} else {
x812elseb()
}
}
val x813 = x812._1
val x815 = x799 + 15
val x816 = x815 > x796
val x817 = {
def x817thenb(): Int = {
x796
}
def x817elseb(): Int = {
x815
}
if (x816) {
x817thenb()
} else {
x817elseb()
}
}
val x814 = x812._2
val x848 = x806.binary_gradients
val x856 = x806.match_list
val x857 = x856.length
val x866 = while ({val x830 = x829
val x831 = x830 < x828
x831}) {
val x833 = x829
var x835: Int = x813
val x863 = while ({val x836 = x835
val x837 = x836 < x817
x837}) {
val x839 = x829
val x843 = x835
val x840 = x825 + x839
val x841 = x840 - x824
val x842 = x841 * 30
val x844 = x814 + x843
val x845 = x844 - x813
val x846 = x842 + x845
var x847: Int = x846
val x849 = x847
val x850 = x835
val x851 = x791(x833, x850)
val x852 = x848(x849) = x851
val x853 = x835
val x854 = x791(x833, x853)
val x855 = x854 > 0
val x860 = {
def x860thenb(): Unit = {
val x858 = x856.insert(x857, x849)
x858
}
def x860elseb(): Unit = {
()
}
if (x855) {
x860thenb()
} else {
x860elseb()
}
}
val x861 = x835 += 1
()
}
val x864 = x829 += 1
()
}
val x867 = x857 < 0
val x870 = {
def x870thenb(): Unit = {
val x868 = println("dummy")
x868
}
def x870elseb(): Unit = {
()
}
if (x867) {
x870thenb()
} else {
x870elseb()
}
}
val x875 = x806.radius
def x1001_block = {
val x872 = x871.dcApply(0)
var x973 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
var mapReduceIdx = 1
while (mapReduceIdx < x871.size) {
val x872 = x871.dcApply(mapReduceIdx)
val x974 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
x973 = {
val x975 = x973.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1000_block = { 
val x998 = {
def x998thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x974
}
def x998elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x976 = x974.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x996 = {
def x996thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x973
}
def x996elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x977 = x973.length
val x978 = x974.length
val x979 = x977 + x978
val x980 = x973.isRow
val x981 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x979,x980)
var x983 : Int = 0
val x987 = while (x983 < x977) {
val x984 = x973(x983)
val x985 = x981(x983) = x984
x985
x983 = x983 + 1
}
var x989 : Int = 0
val x994 = while (x989 < x978) {
val x990 = x989 + x977
val x991 = x974(x989)
val x992 = x981(x990) = x991
x992
x989 = x989 + 1
}
x981
}
if (x976) {
x996thenb()
} else {
x996elseb()
}
}
x996
}
if (x975) {
x998thenb()
} else {
x998elseb()
}
}
x998
}
val x1000 = x1000_block
x1000
}
mapReduceIdx += 1
} // end while
x973
}
val x1001 = x1001_block
x1001
}
var mapReduceIdx = 1
while (mapReduceIdx < x798.size) {
val x799 = x798.dcApply(mapReduceIdx)
val x1004 = {
val x803 = new generated.scala.IntVectorImpl(900,false)
val x804 = new generated.scala.IntVectorImpl(0,true)
val x805 = new generated.scala.IndexVectorSeqImpl(x804)
val x806 = new generated.scala.BinarizedGradientTemplate(15,null,null,x789,x803,x805,null,null,null)
var x829: Int = x824
val x807 = x799 - 15
val x808 = x807 < 0
val x812 = {
def x812thenb(): scala.Tuple2[Int, Int] = {
val x809 = 15 - x799
val x810 = (0,x809)
x810
}
def x812elseb(): scala.Tuple2[Int, Int] = {
val x811 = (x807,0)
x811
}
if (x808) {
x812thenb()
} else {
x812elseb()
}
}
val x813 = x812._1
val x815 = x799 + 15
val x816 = x815 > x796
val x817 = {
def x817thenb(): Int = {
x796
}
def x817elseb(): Int = {
x815
}
if (x816) {
x817thenb()
} else {
x817elseb()
}
}
val x814 = x812._2
val x848 = x806.binary_gradients
val x856 = x806.match_list
val x857 = x856.length
val x866 = while ({val x830 = x829
val x831 = x830 < x828
x831}) {
val x833 = x829
var x835: Int = x813
val x863 = while ({val x836 = x835
val x837 = x836 < x817
x837}) {
val x839 = x829
val x843 = x835
val x840 = x825 + x839
val x841 = x840 - x824
val x842 = x841 * 30
val x844 = x814 + x843
val x845 = x844 - x813
val x846 = x842 + x845
var x847: Int = x846
val x849 = x847
val x850 = x835
val x851 = x791(x833, x850)
val x852 = x848(x849) = x851
val x853 = x835
val x854 = x791(x833, x853)
val x855 = x854 > 0
val x860 = {
def x860thenb(): Unit = {
val x858 = x856.insert(x857, x849)
x858
}
def x860elseb(): Unit = {
()
}
if (x855) {
x860thenb()
} else {
x860elseb()
}
}
val x861 = x835 += 1
()
}
val x864 = x829 += 1
()
}
val x867 = x857 < 0
val x870 = {
def x870thenb(): Unit = {
val x868 = println("dummy")
x868
}
def x870elseb(): Unit = {
()
}
if (x867) {
x870thenb()
} else {
x870elseb()
}
}
val x875 = x806.radius
def x1001_block = {
val x872 = x871.dcApply(0)
var x973 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
var mapReduceIdx = 1
while (mapReduceIdx < x871.size) {
val x872 = x871.dcApply(mapReduceIdx)
val x974 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
x973 = {
val x975 = x973.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1000_block = { 
val x998 = {
def x998thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x974
}
def x998elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x976 = x974.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x996 = {
def x996thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x973
}
def x996elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x977 = x973.length
val x978 = x974.length
val x979 = x977 + x978
val x980 = x973.isRow
val x981 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x979,x980)
var x983 : Int = 0
val x987 = while (x983 < x977) {
val x984 = x973(x983)
val x985 = x981(x983) = x984
x985
x983 = x983 + 1
}
var x989 : Int = 0
val x994 = while (x989 < x978) {
val x990 = x989 + x977
val x991 = x974(x989)
val x992 = x981(x990) = x991
x992
x989 = x989 + 1
}
x981
}
if (x976) {
x996thenb()
} else {
x996elseb()
}
}
x996
}
if (x975) {
x998thenb()
} else {
x998elseb()
}
}
x998
}
val x1000 = x1000_block
x1000
}
mapReduceIdx += 1
} // end while
x973
}
val x1001 = x1001_block
x1001
}
x1003 = {
val x1005 = x1003.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1030_block = { 
val x1028 = {
def x1028thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1004
}
def x1028elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1006 = x1004.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x1026 = {
def x1026thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1003
}
def x1026elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1007 = x1003.length
val x1008 = x1004.length
val x1009 = x1007 + x1008
val x1010 = x1003.isRow
val x1011 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x1009,x1010)
var x1013 : Int = 0
val x1017 = while (x1013 < x1007) {
val x1014 = x1003(x1013)
val x1015 = x1011(x1013) = x1014
x1015
x1013 = x1013 + 1
}
var x1019 : Int = 0
val x1024 = while (x1019 < x1008) {
val x1020 = x1019 + x1007
val x1021 = x1004(x1019)
val x1022 = x1011(x1020) = x1021
x1022
x1019 = x1019 + 1
}
x1011
}
if (x1006) {
x1026thenb()
} else {
x1026elseb()
}
}
x1026
}
if (x1005) {
x1028thenb()
} else {
x1028elseb()
}
}
x1028
}
val x1030 = x1030_block
x1030
}
mapReduceIdx += 1
} // end while
x1003
}
val x1031 = x1031_block
x1031
}
var mapReduceIdx = 1
while (mapReduceIdx < x794.size) {
val x795 = x794.dcApply(mapReduceIdx)
val x1033 = {
val x818 = x795 - 15
val x819 = x818 < 0
val x823 = {
def x823thenb(): scala.Tuple2[Int, Int] = {
val x820 = 15 - x795
val x821 = (0,x820)
x821
}
def x823elseb(): scala.Tuple2[Int, Int] = {
val x822 = (x818,0)
x822
}
if (x819) {
x823thenb()
} else {
x823elseb()
}
}
val x824 = x823._1
val x826 = x795 + 15
val x827 = x826 > x792
val x828 = {
def x828thenb(): Int = {
x792
}
def x828elseb(): Int = {
x826
}
if (x827) {
x828thenb()
} else {
x828elseb()
}
}
val x825 = x823._2
def x1031_block = {
val x799 = x798.dcApply(0)
var x1003 = {
val x803 = new generated.scala.IntVectorImpl(900,false)
val x804 = new generated.scala.IntVectorImpl(0,true)
val x805 = new generated.scala.IndexVectorSeqImpl(x804)
val x806 = new generated.scala.BinarizedGradientTemplate(15,null,null,x789,x803,x805,null,null,null)
var x829: Int = x824
val x807 = x799 - 15
val x808 = x807 < 0
val x812 = {
def x812thenb(): scala.Tuple2[Int, Int] = {
val x809 = 15 - x799
val x810 = (0,x809)
x810
}
def x812elseb(): scala.Tuple2[Int, Int] = {
val x811 = (x807,0)
x811
}
if (x808) {
x812thenb()
} else {
x812elseb()
}
}
val x813 = x812._1
val x815 = x799 + 15
val x816 = x815 > x796
val x817 = {
def x817thenb(): Int = {
x796
}
def x817elseb(): Int = {
x815
}
if (x816) {
x817thenb()
} else {
x817elseb()
}
}
val x814 = x812._2
val x848 = x806.binary_gradients
val x856 = x806.match_list
val x857 = x856.length
val x866 = while ({val x830 = x829
val x831 = x830 < x828
x831}) {
val x833 = x829
var x835: Int = x813
val x863 = while ({val x836 = x835
val x837 = x836 < x817
x837}) {
val x839 = x829
val x843 = x835
val x840 = x825 + x839
val x841 = x840 - x824
val x842 = x841 * 30
val x844 = x814 + x843
val x845 = x844 - x813
val x846 = x842 + x845
var x847: Int = x846
val x849 = x847
val x850 = x835
val x851 = x791(x833, x850)
val x852 = x848(x849) = x851
val x853 = x835
val x854 = x791(x833, x853)
val x855 = x854 > 0
val x860 = {
def x860thenb(): Unit = {
val x858 = x856.insert(x857, x849)
x858
}
def x860elseb(): Unit = {
()
}
if (x855) {
x860thenb()
} else {
x860elseb()
}
}
val x861 = x835 += 1
()
}
val x864 = x829 += 1
()
}
val x867 = x857 < 0
val x870 = {
def x870thenb(): Unit = {
val x868 = println("dummy")
x868
}
def x870elseb(): Unit = {
()
}
if (x867) {
x870thenb()
} else {
x870elseb()
}
}
val x875 = x806.radius
def x1001_block = {
val x872 = x871.dcApply(0)
var x973 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
var mapReduceIdx = 1
while (mapReduceIdx < x871.size) {
val x872 = x871.dcApply(mapReduceIdx)
val x974 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
x973 = {
val x975 = x973.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1000_block = { 
val x998 = {
def x998thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x974
}
def x998elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x976 = x974.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x996 = {
def x996thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x973
}
def x996elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x977 = x973.length
val x978 = x974.length
val x979 = x977 + x978
val x980 = x973.isRow
val x981 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x979,x980)
var x983 : Int = 0
val x987 = while (x983 < x977) {
val x984 = x973(x983)
val x985 = x981(x983) = x984
x985
x983 = x983 + 1
}
var x989 : Int = 0
val x994 = while (x989 < x978) {
val x990 = x989 + x977
val x991 = x974(x989)
val x992 = x981(x990) = x991
x992
x989 = x989 + 1
}
x981
}
if (x976) {
x996thenb()
} else {
x996elseb()
}
}
x996
}
if (x975) {
x998thenb()
} else {
x998elseb()
}
}
x998
}
val x1000 = x1000_block
x1000
}
mapReduceIdx += 1
} // end while
x973
}
val x1001 = x1001_block
x1001
}
var mapReduceIdx = 1
while (mapReduceIdx < x798.size) {
val x799 = x798.dcApply(mapReduceIdx)
val x1004 = {
val x803 = new generated.scala.IntVectorImpl(900,false)
val x804 = new generated.scala.IntVectorImpl(0,true)
val x805 = new generated.scala.IndexVectorSeqImpl(x804)
val x806 = new generated.scala.BinarizedGradientTemplate(15,null,null,x789,x803,x805,null,null,null)
var x829: Int = x824
val x807 = x799 - 15
val x808 = x807 < 0
val x812 = {
def x812thenb(): scala.Tuple2[Int, Int] = {
val x809 = 15 - x799
val x810 = (0,x809)
x810
}
def x812elseb(): scala.Tuple2[Int, Int] = {
val x811 = (x807,0)
x811
}
if (x808) {
x812thenb()
} else {
x812elseb()
}
}
val x813 = x812._1
val x815 = x799 + 15
val x816 = x815 > x796
val x817 = {
def x817thenb(): Int = {
x796
}
def x817elseb(): Int = {
x815
}
if (x816) {
x817thenb()
} else {
x817elseb()
}
}
val x814 = x812._2
val x848 = x806.binary_gradients
val x856 = x806.match_list
val x857 = x856.length
val x866 = while ({val x830 = x829
val x831 = x830 < x828
x831}) {
val x833 = x829
var x835: Int = x813
val x863 = while ({val x836 = x835
val x837 = x836 < x817
x837}) {
val x839 = x829
val x843 = x835
val x840 = x825 + x839
val x841 = x840 - x824
val x842 = x841 * 30
val x844 = x814 + x843
val x845 = x844 - x813
val x846 = x842 + x845
var x847: Int = x846
val x849 = x847
val x850 = x835
val x851 = x791(x833, x850)
val x852 = x848(x849) = x851
val x853 = x835
val x854 = x791(x833, x853)
val x855 = x854 > 0
val x860 = {
def x860thenb(): Unit = {
val x858 = x856.insert(x857, x849)
x858
}
def x860elseb(): Unit = {
()
}
if (x855) {
x860thenb()
} else {
x860elseb()
}
}
val x861 = x835 += 1
()
}
val x864 = x829 += 1
()
}
val x867 = x857 < 0
val x870 = {
def x870thenb(): Unit = {
val x868 = println("dummy")
x868
}
def x870elseb(): Unit = {
()
}
if (x867) {
x870thenb()
} else {
x870elseb()
}
}
val x875 = x806.radius
def x1001_block = {
val x872 = x871.dcApply(0)
var x973 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
var mapReduceIdx = 1
while (mapReduceIdx < x871.size) {
val x872 = x871.dcApply(mapReduceIdx)
val x974 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
x973 = {
val x975 = x973.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1000_block = { 
val x998 = {
def x998thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x974
}
def x998elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x976 = x974.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x996 = {
def x996thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x973
}
def x996elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x977 = x973.length
val x978 = x974.length
val x979 = x977 + x978
val x980 = x973.isRow
val x981 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x979,x980)
var x983 : Int = 0
val x987 = while (x983 < x977) {
val x984 = x973(x983)
val x985 = x981(x983) = x984
x985
x983 = x983 + 1
}
var x989 : Int = 0
val x994 = while (x989 < x978) {
val x990 = x989 + x977
val x991 = x974(x989)
val x992 = x981(x990) = x991
x992
x989 = x989 + 1
}
x981
}
if (x976) {
x996thenb()
} else {
x996elseb()
}
}
x996
}
if (x975) {
x998thenb()
} else {
x998elseb()
}
}
x998
}
val x1000 = x1000_block
x1000
}
mapReduceIdx += 1
} // end while
x973
}
val x1001 = x1001_block
x1001
}
x1003 = {
val x1005 = x1003.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1030_block = { 
val x1028 = {
def x1028thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1004
}
def x1028elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1006 = x1004.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x1026 = {
def x1026thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1003
}
def x1026elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1007 = x1003.length
val x1008 = x1004.length
val x1009 = x1007 + x1008
val x1010 = x1003.isRow
val x1011 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x1009,x1010)
var x1013 : Int = 0
val x1017 = while (x1013 < x1007) {
val x1014 = x1003(x1013)
val x1015 = x1011(x1013) = x1014
x1015
x1013 = x1013 + 1
}
var x1019 : Int = 0
val x1024 = while (x1019 < x1008) {
val x1020 = x1019 + x1007
val x1021 = x1004(x1019)
val x1022 = x1011(x1020) = x1021
x1022
x1019 = x1019 + 1
}
x1011
}
if (x1006) {
x1026thenb()
} else {
x1026elseb()
}
}
x1026
}
if (x1005) {
x1028thenb()
} else {
x1028elseb()
}
}
x1028
}
val x1030 = x1030_block
x1030
}
mapReduceIdx += 1
} // end while
x1003
}
val x1031 = x1031_block
x1031
}
x1032 = {
val x1034 = x1032.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1059_block = { 
val x1057 = {
def x1057thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1033
}
def x1057elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1035 = x1033.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x1055 = {
def x1055thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1032
}
def x1055elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1036 = x1032.length
val x1037 = x1033.length
val x1038 = x1036 + x1037
val x1039 = x1032.isRow
val x1040 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x1038,x1039)
var x1042 : Int = 0
val x1046 = while (x1042 < x1036) {
val x1043 = x1032(x1042)
val x1044 = x1040(x1042) = x1043
x1044
x1042 = x1042 + 1
}
var x1048 : Int = 0
val x1053 = while (x1048 < x1037) {
val x1049 = x1048 + x1036
val x1050 = x1033(x1048)
val x1051 = x1040(x1049) = x1050
x1051
x1048 = x1048 + 1
}
x1040
}
if (x1035) {
x1055thenb()
} else {
x1055elseb()
}
}
x1055
}
if (x1034) {
x1057thenb()
} else {
x1057elseb()
}
}
x1057
}
val x1059 = x1059_block
x1059
}
mapReduceIdx += 1
} // end while
x1032
}
val x1060 = x1060_block
val x1061 = x1060.length
val x1062 = "Detections: "+x1061
val x1063 = println(x1062)
x1060
}
var mapReduceIdx = 1
while (mapReduceIdx < x229.size) {
val x781 = x229.dcApply(mapReduceIdx)
val x1066 = {
val x782 = x781._1
val x784 = "Name: "+x782
val x785 = println(x784)
val x783 = x781._2
val x786 = x783.length
val x787 = "Templates: "+x786
val x788 = println(x787)
val x871 = new generated.scala.IndexVectorRangeImpl(0,x786)
def x1060_block = {
val x795 = x794.dcApply(0)
var x1032 = {
val x818 = x795 - 15
val x819 = x818 < 0
val x823 = {
def x823thenb(): scala.Tuple2[Int, Int] = {
val x820 = 15 - x795
val x821 = (0,x820)
x821
}
def x823elseb(): scala.Tuple2[Int, Int] = {
val x822 = (x818,0)
x822
}
if (x819) {
x823thenb()
} else {
x823elseb()
}
}
val x824 = x823._1
val x826 = x795 + 15
val x827 = x826 > x792
val x828 = {
def x828thenb(): Int = {
x792
}
def x828elseb(): Int = {
x826
}
if (x827) {
x828thenb()
} else {
x828elseb()
}
}
val x825 = x823._2
def x1031_block = {
val x799 = x798.dcApply(0)
var x1003 = {
val x803 = new generated.scala.IntVectorImpl(900,false)
val x804 = new generated.scala.IntVectorImpl(0,true)
val x805 = new generated.scala.IndexVectorSeqImpl(x804)
val x806 = new generated.scala.BinarizedGradientTemplate(15,null,null,x789,x803,x805,null,null,null)
var x829: Int = x824
val x807 = x799 - 15
val x808 = x807 < 0
val x812 = {
def x812thenb(): scala.Tuple2[Int, Int] = {
val x809 = 15 - x799
val x810 = (0,x809)
x810
}
def x812elseb(): scala.Tuple2[Int, Int] = {
val x811 = (x807,0)
x811
}
if (x808) {
x812thenb()
} else {
x812elseb()
}
}
val x813 = x812._1
val x815 = x799 + 15
val x816 = x815 > x796
val x817 = {
def x817thenb(): Int = {
x796
}
def x817elseb(): Int = {
x815
}
if (x816) {
x817thenb()
} else {
x817elseb()
}
}
val x814 = x812._2
val x848 = x806.binary_gradients
val x856 = x806.match_list
val x857 = x856.length
val x866 = while ({val x830 = x829
val x831 = x830 < x828
x831}) {
val x833 = x829
var x835: Int = x813
val x863 = while ({val x836 = x835
val x837 = x836 < x817
x837}) {
val x839 = x829
val x843 = x835
val x840 = x825 + x839
val x841 = x840 - x824
val x842 = x841 * 30
val x844 = x814 + x843
val x845 = x844 - x813
val x846 = x842 + x845
var x847: Int = x846
val x849 = x847
val x850 = x835
val x851 = x791(x833, x850)
val x852 = x848(x849) = x851
val x853 = x835
val x854 = x791(x833, x853)
val x855 = x854 > 0
val x860 = {
def x860thenb(): Unit = {
val x858 = x856.insert(x857, x849)
x858
}
def x860elseb(): Unit = {
()
}
if (x855) {
x860thenb()
} else {
x860elseb()
}
}
val x861 = x835 += 1
()
}
val x864 = x829 += 1
()
}
val x867 = x857 < 0
val x870 = {
def x870thenb(): Unit = {
val x868 = println("dummy")
x868
}
def x870elseb(): Unit = {
()
}
if (x867) {
x870thenb()
} else {
x870elseb()
}
}
val x875 = x806.radius
def x1001_block = {
val x872 = x871.dcApply(0)
var x973 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
var mapReduceIdx = 1
while (mapReduceIdx < x871.size) {
val x872 = x871.dcApply(mapReduceIdx)
val x974 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
x973 = {
val x975 = x973.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1000_block = { 
val x998 = {
def x998thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x974
}
def x998elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x976 = x974.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x996 = {
def x996thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x973
}
def x996elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x977 = x973.length
val x978 = x974.length
val x979 = x977 + x978
val x980 = x973.isRow
val x981 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x979,x980)
var x983 : Int = 0
val x987 = while (x983 < x977) {
val x984 = x973(x983)
val x985 = x981(x983) = x984
x985
x983 = x983 + 1
}
var x989 : Int = 0
val x994 = while (x989 < x978) {
val x990 = x989 + x977
val x991 = x974(x989)
val x992 = x981(x990) = x991
x992
x989 = x989 + 1
}
x981
}
if (x976) {
x996thenb()
} else {
x996elseb()
}
}
x996
}
if (x975) {
x998thenb()
} else {
x998elseb()
}
}
x998
}
val x1000 = x1000_block
x1000
}
mapReduceIdx += 1
} // end while
x973
}
val x1001 = x1001_block
x1001
}
var mapReduceIdx = 1
while (mapReduceIdx < x798.size) {
val x799 = x798.dcApply(mapReduceIdx)
val x1004 = {
val x803 = new generated.scala.IntVectorImpl(900,false)
val x804 = new generated.scala.IntVectorImpl(0,true)
val x805 = new generated.scala.IndexVectorSeqImpl(x804)
val x806 = new generated.scala.BinarizedGradientTemplate(15,null,null,x789,x803,x805,null,null,null)
var x829: Int = x824
val x807 = x799 - 15
val x808 = x807 < 0
val x812 = {
def x812thenb(): scala.Tuple2[Int, Int] = {
val x809 = 15 - x799
val x810 = (0,x809)
x810
}
def x812elseb(): scala.Tuple2[Int, Int] = {
val x811 = (x807,0)
x811
}
if (x808) {
x812thenb()
} else {
x812elseb()
}
}
val x813 = x812._1
val x815 = x799 + 15
val x816 = x815 > x796
val x817 = {
def x817thenb(): Int = {
x796
}
def x817elseb(): Int = {
x815
}
if (x816) {
x817thenb()
} else {
x817elseb()
}
}
val x814 = x812._2
val x848 = x806.binary_gradients
val x856 = x806.match_list
val x857 = x856.length
val x866 = while ({val x830 = x829
val x831 = x830 < x828
x831}) {
val x833 = x829
var x835: Int = x813
val x863 = while ({val x836 = x835
val x837 = x836 < x817
x837}) {
val x839 = x829
val x843 = x835
val x840 = x825 + x839
val x841 = x840 - x824
val x842 = x841 * 30
val x844 = x814 + x843
val x845 = x844 - x813
val x846 = x842 + x845
var x847: Int = x846
val x849 = x847
val x850 = x835
val x851 = x791(x833, x850)
val x852 = x848(x849) = x851
val x853 = x835
val x854 = x791(x833, x853)
val x855 = x854 > 0
val x860 = {
def x860thenb(): Unit = {
val x858 = x856.insert(x857, x849)
x858
}
def x860elseb(): Unit = {
()
}
if (x855) {
x860thenb()
} else {
x860elseb()
}
}
val x861 = x835 += 1
()
}
val x864 = x829 += 1
()
}
val x867 = x857 < 0
val x870 = {
def x870thenb(): Unit = {
val x868 = println("dummy")
x868
}
def x870elseb(): Unit = {
()
}
if (x867) {
x870thenb()
} else {
x870elseb()
}
}
val x875 = x806.radius
def x1001_block = {
val x872 = x871.dcApply(0)
var x973 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
var mapReduceIdx = 1
while (mapReduceIdx < x871.size) {
val x872 = x871.dcApply(mapReduceIdx)
val x974 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
x973 = {
val x975 = x973.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1000_block = { 
val x998 = {
def x998thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x974
}
def x998elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x976 = x974.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x996 = {
def x996thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x973
}
def x996elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x977 = x973.length
val x978 = x974.length
val x979 = x977 + x978
val x980 = x973.isRow
val x981 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x979,x980)
var x983 : Int = 0
val x987 = while (x983 < x977) {
val x984 = x973(x983)
val x985 = x981(x983) = x984
x985
x983 = x983 + 1
}
var x989 : Int = 0
val x994 = while (x989 < x978) {
val x990 = x989 + x977
val x991 = x974(x989)
val x992 = x981(x990) = x991
x992
x989 = x989 + 1
}
x981
}
if (x976) {
x996thenb()
} else {
x996elseb()
}
}
x996
}
if (x975) {
x998thenb()
} else {
x998elseb()
}
}
x998
}
val x1000 = x1000_block
x1000
}
mapReduceIdx += 1
} // end while
x973
}
val x1001 = x1001_block
x1001
}
x1003 = {
val x1005 = x1003.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1030_block = { 
val x1028 = {
def x1028thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1004
}
def x1028elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1006 = x1004.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x1026 = {
def x1026thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1003
}
def x1026elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1007 = x1003.length
val x1008 = x1004.length
val x1009 = x1007 + x1008
val x1010 = x1003.isRow
val x1011 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x1009,x1010)
var x1013 : Int = 0
val x1017 = while (x1013 < x1007) {
val x1014 = x1003(x1013)
val x1015 = x1011(x1013) = x1014
x1015
x1013 = x1013 + 1
}
var x1019 : Int = 0
val x1024 = while (x1019 < x1008) {
val x1020 = x1019 + x1007
val x1021 = x1004(x1019)
val x1022 = x1011(x1020) = x1021
x1022
x1019 = x1019 + 1
}
x1011
}
if (x1006) {
x1026thenb()
} else {
x1026elseb()
}
}
x1026
}
if (x1005) {
x1028thenb()
} else {
x1028elseb()
}
}
x1028
}
val x1030 = x1030_block
x1030
}
mapReduceIdx += 1
} // end while
x1003
}
val x1031 = x1031_block
x1031
}
var mapReduceIdx = 1
while (mapReduceIdx < x794.size) {
val x795 = x794.dcApply(mapReduceIdx)
val x1033 = {
val x818 = x795 - 15
val x819 = x818 < 0
val x823 = {
def x823thenb(): scala.Tuple2[Int, Int] = {
val x820 = 15 - x795
val x821 = (0,x820)
x821
}
def x823elseb(): scala.Tuple2[Int, Int] = {
val x822 = (x818,0)
x822
}
if (x819) {
x823thenb()
} else {
x823elseb()
}
}
val x824 = x823._1
val x826 = x795 + 15
val x827 = x826 > x792
val x828 = {
def x828thenb(): Int = {
x792
}
def x828elseb(): Int = {
x826
}
if (x827) {
x828thenb()
} else {
x828elseb()
}
}
val x825 = x823._2
def x1031_block = {
val x799 = x798.dcApply(0)
var x1003 = {
val x803 = new generated.scala.IntVectorImpl(900,false)
val x804 = new generated.scala.IntVectorImpl(0,true)
val x805 = new generated.scala.IndexVectorSeqImpl(x804)
val x806 = new generated.scala.BinarizedGradientTemplate(15,null,null,x789,x803,x805,null,null,null)
var x829: Int = x824
val x807 = x799 - 15
val x808 = x807 < 0
val x812 = {
def x812thenb(): scala.Tuple2[Int, Int] = {
val x809 = 15 - x799
val x810 = (0,x809)
x810
}
def x812elseb(): scala.Tuple2[Int, Int] = {
val x811 = (x807,0)
x811
}
if (x808) {
x812thenb()
} else {
x812elseb()
}
}
val x813 = x812._1
val x815 = x799 + 15
val x816 = x815 > x796
val x817 = {
def x817thenb(): Int = {
x796
}
def x817elseb(): Int = {
x815
}
if (x816) {
x817thenb()
} else {
x817elseb()
}
}
val x814 = x812._2
val x848 = x806.binary_gradients
val x856 = x806.match_list
val x857 = x856.length
val x866 = while ({val x830 = x829
val x831 = x830 < x828
x831}) {
val x833 = x829
var x835: Int = x813
val x863 = while ({val x836 = x835
val x837 = x836 < x817
x837}) {
val x839 = x829
val x843 = x835
val x840 = x825 + x839
val x841 = x840 - x824
val x842 = x841 * 30
val x844 = x814 + x843
val x845 = x844 - x813
val x846 = x842 + x845
var x847: Int = x846
val x849 = x847
val x850 = x835
val x851 = x791(x833, x850)
val x852 = x848(x849) = x851
val x853 = x835
val x854 = x791(x833, x853)
val x855 = x854 > 0
val x860 = {
def x860thenb(): Unit = {
val x858 = x856.insert(x857, x849)
x858
}
def x860elseb(): Unit = {
()
}
if (x855) {
x860thenb()
} else {
x860elseb()
}
}
val x861 = x835 += 1
()
}
val x864 = x829 += 1
()
}
val x867 = x857 < 0
val x870 = {
def x870thenb(): Unit = {
val x868 = println("dummy")
x868
}
def x870elseb(): Unit = {
()
}
if (x867) {
x870thenb()
} else {
x870elseb()
}
}
val x875 = x806.radius
def x1001_block = {
val x872 = x871.dcApply(0)
var x973 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
var mapReduceIdx = 1
while (mapReduceIdx < x871.size) {
val x872 = x871.dcApply(mapReduceIdx)
val x974 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
x973 = {
val x975 = x973.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1000_block = { 
val x998 = {
def x998thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x974
}
def x998elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x976 = x974.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x996 = {
def x996thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x973
}
def x996elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x977 = x973.length
val x978 = x974.length
val x979 = x977 + x978
val x980 = x973.isRow
val x981 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x979,x980)
var x983 : Int = 0
val x987 = while (x983 < x977) {
val x984 = x973(x983)
val x985 = x981(x983) = x984
x985
x983 = x983 + 1
}
var x989 : Int = 0
val x994 = while (x989 < x978) {
val x990 = x989 + x977
val x991 = x974(x989)
val x992 = x981(x990) = x991
x992
x989 = x989 + 1
}
x981
}
if (x976) {
x996thenb()
} else {
x996elseb()
}
}
x996
}
if (x975) {
x998thenb()
} else {
x998elseb()
}
}
x998
}
val x1000 = x1000_block
x1000
}
mapReduceIdx += 1
} // end while
x973
}
val x1001 = x1001_block
x1001
}
var mapReduceIdx = 1
while (mapReduceIdx < x798.size) {
val x799 = x798.dcApply(mapReduceIdx)
val x1004 = {
val x803 = new generated.scala.IntVectorImpl(900,false)
val x804 = new generated.scala.IntVectorImpl(0,true)
val x805 = new generated.scala.IndexVectorSeqImpl(x804)
val x806 = new generated.scala.BinarizedGradientTemplate(15,null,null,x789,x803,x805,null,null,null)
var x829: Int = x824
val x807 = x799 - 15
val x808 = x807 < 0
val x812 = {
def x812thenb(): scala.Tuple2[Int, Int] = {
val x809 = 15 - x799
val x810 = (0,x809)
x810
}
def x812elseb(): scala.Tuple2[Int, Int] = {
val x811 = (x807,0)
x811
}
if (x808) {
x812thenb()
} else {
x812elseb()
}
}
val x813 = x812._1
val x815 = x799 + 15
val x816 = x815 > x796
val x817 = {
def x817thenb(): Int = {
x796
}
def x817elseb(): Int = {
x815
}
if (x816) {
x817thenb()
} else {
x817elseb()
}
}
val x814 = x812._2
val x848 = x806.binary_gradients
val x856 = x806.match_list
val x857 = x856.length
val x866 = while ({val x830 = x829
val x831 = x830 < x828
x831}) {
val x833 = x829
var x835: Int = x813
val x863 = while ({val x836 = x835
val x837 = x836 < x817
x837}) {
val x839 = x829
val x843 = x835
val x840 = x825 + x839
val x841 = x840 - x824
val x842 = x841 * 30
val x844 = x814 + x843
val x845 = x844 - x813
val x846 = x842 + x845
var x847: Int = x846
val x849 = x847
val x850 = x835
val x851 = x791(x833, x850)
val x852 = x848(x849) = x851
val x853 = x835
val x854 = x791(x833, x853)
val x855 = x854 > 0
val x860 = {
def x860thenb(): Unit = {
val x858 = x856.insert(x857, x849)
x858
}
def x860elseb(): Unit = {
()
}
if (x855) {
x860thenb()
} else {
x860elseb()
}
}
val x861 = x835 += 1
()
}
val x864 = x829 += 1
()
}
val x867 = x857 < 0
val x870 = {
def x870thenb(): Unit = {
val x868 = println("dummy")
x868
}
def x870elseb(): Unit = {
()
}
if (x867) {
x870thenb()
} else {
x870elseb()
}
}
val x875 = x806.radius
def x1001_block = {
val x872 = x871.dcApply(0)
var x973 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
var mapReduceIdx = 1
while (mapReduceIdx < x871.size) {
val x872 = x871.dcApply(mapReduceIdx)
val x974 = {
val x873 = x783(x872)
val x874 = x873.radius
val x876 = x874 != x875
val x951 = {
def x951thenb(): Float = {
-1.0f
}
def x951elseb(): Float = {
val x877 = x873.match_list
val x878 = x877.length
val x879 = x878.asInstanceOf[Float]
val x880 = x879==0.0
val x949 = {
def x949thenb(): Float = {
-1.0f
}
def x949elseb(): Float = {
val x881 = x857.asInstanceOf[Float]
val x882 = x881 / x879
val x883 = x882 < 0.82f
val x947 = {
def x947thenb(): Float = {
x882
}
def x947elseb(): Float = {
var x884: Float = 0.0f
val x885 = x879 * 0.18f
val x886 = x885 + 0.5f
val x887 = x886.asInstanceOf[Int]
var x888: Int = x887
var x889: Int = 0
var x890: Boolean = true
val x898 = x873.binary_gradients
val x938 = while ({val x891 = x889
val x893 = x890
val x892 = x891 < x878
val x894 = x892 && x893
x894}) {
val x896 = x889
val x899 = x889
val x903 = x889
val x900 = x877(x899)
val x901 = x898(x900)
val x902 = x901==0
val x904 = x877(x903)
val x905 = x848(x904)
val x906 = x905==0
val x907 = x902 && x906
val x935 = {
def x935thenb(): Unit = {
val x908 = x884
val x909 = x908 + 1.0f
x884 = x909
()
}
def x935elseb(): Unit = {
val x912 = x889
val x915 = x889
val x913 = x877(x912)
val x914 = x898(x913)
val x916 = x877(x915)
val x917 = x848(x916)
val x918 = x914 & x917
val x919 = x918 > 0
val x933 = {
def x933thenb(): Unit = {
val x920 = x884
val x921 = x920 + 1.0f
x884 = x921
()
}
def x933elseb(): Unit = {
val x924 = x888
val x925 = x924 - 1
x888 = x925
val x927 = x888
val x928 = x927 <= 0
val x931 = {
def x931thenb(): Unit = {
x890 = false
()
}
def x931elseb(): Unit = {
()
}
if (x928) {
x931thenb()
} else {
x931elseb()
}
}
x931
}
if (x919) {
x933thenb()
} else {
x933elseb()
}
}
x933
}
if (x907) {
x935thenb()
} else {
x935elseb()
}
}
val x936 = x889 += 1
()
}
val x939 = x890
val x940 = !x939
val x945 = {
def x945thenb(): Float = {
0.819999f
}
def x945elseb(): Float = {
val x941 = x884
val x942 = x941 / x879
val x943 = x942.asInstanceOf[Float]
x943
}
if (x940) {
x945thenb()
} else {
x945elseb()
}
}
x945
}
if (x883) {
x947thenb()
} else {
x947elseb()
}
}
x947
}
if (x880) {
x949thenb()
} else {
x949elseb()
}
}
x949
}
if (x876) {
x951thenb()
} else {
x951elseb()
}
}
val x952 = x951 > 0.82f
val x971 = {
def x971thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x953 = x873.rect
val x955 = x953.width
val x800 = x789
val x801 = Math.pow(2.0,x800)
val x802 = x801.asInstanceOf[Int]
val x954 = x802 * x799
val x956 = x955 / 2
val x957 = x954 - x956
val x958 = x957.asInstanceOf[Int]
val x960 = x953.height
val x959 = x802 * x795
val x961 = x960 / 2
val x962 = x959 - x961
val x963 = x962.asInstanceOf[Int]
val x964 = new generated.scala.Rect(x958,x963,x955,x960)
val x965 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](1,true)
val x966 = new generated.scala.BiGGDetection(x782,x951,x964,null,x872,x799,x795,x873,x806)
val x967 = x965(0) = x966
x965
}
def x971elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x969 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](0,true)
x969
}
if (x952) {
x971thenb()
} else {
x971elseb()
}
}
x971
}
x973 = {
val x975 = x973.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1000_block = { 
val x998 = {
def x998thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x974
}
def x998elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x976 = x974.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x996 = {
def x996thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x973
}
def x996elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x977 = x973.length
val x978 = x974.length
val x979 = x977 + x978
val x980 = x973.isRow
val x981 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x979,x980)
var x983 : Int = 0
val x987 = while (x983 < x977) {
val x984 = x973(x983)
val x985 = x981(x983) = x984
x985
x983 = x983 + 1
}
var x989 : Int = 0
val x994 = while (x989 < x978) {
val x990 = x989 + x977
val x991 = x974(x989)
val x992 = x981(x990) = x991
x992
x989 = x989 + 1
}
x981
}
if (x976) {
x996thenb()
} else {
x996elseb()
}
}
x996
}
if (x975) {
x998thenb()
} else {
x998elseb()
}
}
x998
}
val x1000 = x1000_block
x1000
}
mapReduceIdx += 1
} // end while
x973
}
val x1001 = x1001_block
x1001
}
x1003 = {
val x1005 = x1003.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1030_block = { 
val x1028 = {
def x1028thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1004
}
def x1028elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1006 = x1004.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x1026 = {
def x1026thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1003
}
def x1026elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1007 = x1003.length
val x1008 = x1004.length
val x1009 = x1007 + x1008
val x1010 = x1003.isRow
val x1011 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x1009,x1010)
var x1013 : Int = 0
val x1017 = while (x1013 < x1007) {
val x1014 = x1003(x1013)
val x1015 = x1011(x1013) = x1014
x1015
x1013 = x1013 + 1
}
var x1019 : Int = 0
val x1024 = while (x1019 < x1008) {
val x1020 = x1019 + x1007
val x1021 = x1004(x1019)
val x1022 = x1011(x1020) = x1021
x1022
x1019 = x1019 + 1
}
x1011
}
if (x1006) {
x1026thenb()
} else {
x1026elseb()
}
}
x1026
}
if (x1005) {
x1028thenb()
} else {
x1028elseb()
}
}
x1028
}
val x1030 = x1030_block
x1030
}
mapReduceIdx += 1
} // end while
x1003
}
val x1031 = x1031_block
x1031
}
x1032 = {
val x1034 = x1032.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1059_block = { 
val x1057 = {
def x1057thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1033
}
def x1057elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1035 = x1033.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x1055 = {
def x1055thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1032
}
def x1055elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1036 = x1032.length
val x1037 = x1033.length
val x1038 = x1036 + x1037
val x1039 = x1032.isRow
val x1040 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x1038,x1039)
var x1042 : Int = 0
val x1046 = while (x1042 < x1036) {
val x1043 = x1032(x1042)
val x1044 = x1040(x1042) = x1043
x1044
x1042 = x1042 + 1
}
var x1048 : Int = 0
val x1053 = while (x1048 < x1037) {
val x1049 = x1048 + x1036
val x1050 = x1033(x1048)
val x1051 = x1040(x1049) = x1050
x1051
x1048 = x1048 + 1
}
x1040
}
if (x1035) {
x1055thenb()
} else {
x1055elseb()
}
}
x1055
}
if (x1034) {
x1057thenb()
} else {
x1057elseb()
}
}
x1057
}
val x1059 = x1059_block
x1059
}
mapReduceIdx += 1
} // end while
x1032
}
val x1060 = x1060_block
val x1061 = x1060.length
val x1062 = "Detections: "+x1061
val x1063 = println(x1062)
x1060
}
x1065 = {
val x1067 = x1065.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
def x1092_block = { 
val x1090 = {
def x1090thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1066
}
def x1090elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1068 = x1066.isInstanceOf[generated.scala.NilVector[generated.scala.BiGGDetection]]
val x1088 = {
def x1088thenb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
x1065
}
def x1088elseb(): generated.scala.Vector[generated.scala.BiGGDetection] = {
val x1069 = x1065.length
val x1070 = x1066.length
val x1071 = x1069 + x1070
val x1072 = x1065.isRow
val x1073 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x1071,x1072)
var x1075 : Int = 0
val x1079 = while (x1075 < x1069) {
val x1076 = x1065(x1075)
val x1077 = x1073(x1075) = x1076
x1077
x1075 = x1075 + 1
}
var x1081 : Int = 0
val x1086 = while (x1081 < x1070) {
val x1082 = x1081 + x1069
val x1083 = x1066(x1081)
val x1084 = x1073(x1082) = x1083
x1084
x1081 = x1081 + 1
}
x1073
}
if (x1068) {
x1088thenb()
} else {
x1088elseb()
}
}
x1088
}
if (x1067) {
x1090thenb()
} else {
x1090elseb()
}
}
x1090
}
val x1092 = x1092_block
x1092
}
mapReduceIdx += 1
} // end while
x1065
}
val x1093 = x1093_block
val x1094 = x1093.length
var x1095: Int = x1094
val x1096 = x1095
val x1097 = "Detections before NMS: "+x1096
val x1098 = println(x1097)
var x1099: Int = 0
val x1213 = while ({val x1100 = x1099
val x1101 = x1095
val x1102 = x1101 - 1
val x1103 = x1100 < x1102
x1103}) {
val x1105 = x1099
val x1106 = x1105 + 1
var x1107: Int = x1106
var x1108: Boolean = false
val x1210 = while ({val x1109 = x1107
val x1110 = x1095
val x1112 = x1108
val x1111 = x1109 < x1110
val x1113 = x1112==false
val x1114 = x1111 && x1113
x1114}) {
val x1116 = x1099
val x1119 = x1107
val x1117 = x1093(x1116)
val x1118 = x1117.roi
val x1122 = x1118.x
val x1120 = x1093(x1119)
val x1121 = x1120.roi
val x1123 = x1121.x
val x1124 = x1121.width
val x1125 = x1123 + x1124
val x1126 = x1122 < x1125
val x1127 = x1118.width
val x1128 = x1122 + x1127
val x1129 = x1128 > x1123
val x1130 = x1126 && x1129
val x1131 = x1118.y
val x1132 = x1118.height
val x1133 = x1131 + x1132
val x1134 = x1121.y
val x1135 = x1133 > x1134
val x1136 = x1130 && x1135
val x1137 = x1121.height
val x1138 = x1134 + x1137
val x1139 = x1131 < x1138
val x1140 = x1136 && x1139
val x1161 = {
def x1161thenb(): Float = {
val x1147 = x1131 > x1134
val x1148 = {
def x1148thenb(): Int = {
x1131
}
def x1148elseb(): Int = {
x1134
}
if (x1147) {
x1148thenb()
} else {
x1148elseb()
}
}
val x1152 = x1133 < x1138
val x1153 = {
def x1153thenb(): Int = {
x1133
}
def x1153elseb(): Int = {
x1138
}
if (x1152) {
x1153thenb()
} else {
x1153elseb()
}
}
val x1154 = x1153 - x1148
val x1155 = x1154
val x1156 = 2.0f * x1155
val x1145 = x1122 > x1123
val x1146 = {
def x1146thenb(): Int = {
x1122
}
def x1146elseb(): Int = {
x1123
}
if (x1145) {
x1146thenb()
} else {
x1146elseb()
}
}
val x1149 = x1128 < x1125
val x1150 = {
def x1150thenb(): Int = {
x1128
}
def x1150elseb(): Int = {
x1125
}
if (x1149) {
x1150thenb()
} else {
x1150elseb()
}
}
val x1151 = x1150 - x1146
val x1157 = x1151
val x1158 = x1156 * x1157
val x1141 = x1137 * x1124
val x1142 = x1127 * x1132
val x1143 = x1141 + x1142
val x1144 = x1143
val x1159 = x1144 + 1.0E-6f
val x1160 = x1158 / x1159
x1160
}
def x1161elseb(): Float = {
0.0f
}
if (x1140) {
x1161thenb()
} else {
x1161elseb()
}
}
val x1162 = x1161 > 0.6f
val x1207 = {
def x1207thenb(): Unit = {
val x1163 = x1099
val x1166 = x1107
val x1164 = x1093(x1163)
val x1165 = x1164.score
val x1167 = x1093(x1166)
val x1168 = x1167.score
val x1169 = x1165 >= x1168
val x1205 = {
def x1205thenb(): Unit = {
val x1170 = x1095
val x1173 = x1095
val x1175 = x1107
val x1174 = x1173 - 1
val x1176 = x1093(x1175)
val x1177 = x1093(x1174) = x1176
val x1178 = x1107
val x1171 = x1170 - 1
val x1172 = x1093(x1171)
val x1179 = x1093(x1178) = x1172
val x1180 = x1095
val x1181 = x1180 - 1
x1095 = x1181
val x1183 = x1107
val x1184 = x1183 - 1
x1107 = x1184
()
}
def x1205elseb(): Unit = {
val x1187 = x1095
val x1190 = x1095
val x1192 = x1099
val x1191 = x1190 - 1
val x1193 = x1093(x1192)
val x1194 = x1093(x1191) = x1193
val x1195 = x1099
val x1188 = x1187 - 1
val x1189 = x1093(x1188)
val x1196 = x1093(x1195) = x1189
val x1197 = x1095
val x1198 = x1197 - 1
x1095 = x1198
val x1200 = x1099
val x1201 = x1200 - 1
x1099 = x1201
x1108 = true
()
}
if (x1169) {
x1205thenb()
} else {
x1205elseb()
}
}
x1205
}
def x1207elseb(): Unit = {
()
}
if (x1162) {
x1207thenb()
} else {
x1207elseb()
}
}
val x1208 = x1107 += 1
()
}
val x1211 = x1099 += 1
()
}
val x1214 = x1095
val x1215 = x1214 - 0
val x1216 = x1093.isRow
def x1226_block = { 
val x1217 = new generated.scala.VectorImpl[generated.scala.BiGGDetection](x1215,x1216)
var x1219 : Int = 0
val x1224 = while (x1219 < x1214) {
val x1220 = x1219 - 0
val x1221 = x1093(x1219)
val x1222 = x1217(x1220) = x1221
x1222
x1219 = x1219 + 1
}
x1217
}
val x1226 = x1226_block
val x1227 = x1226.length
val x1228 = "Total detections: "+x1227
val x1229 = println(x1228)
val x1230 = x232 += 1
()
}
val x1233 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
