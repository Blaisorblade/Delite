/*****************************************
  Emitting Generated Code                  
*******************************************/
class SpadeRunnerFusing extends ((Array[java.lang.String])=>(Unit)) {
def apply(x239:Array[java.lang.String]): Unit = {
val x240 = x239.length
val x241 = x240 < 2
val x245 = {
def x245thenb(): Nothing = {
val x242 = println("Usage: Spade <input data file> <output data file>")
val x243 = exit(-1)
x243
}
if (x241) {
x245thenb()
}
}
val x246 = x239(0)
val x291 = { 
val x247 = new java.io.FileReader(x246)
val x248 = new java.io.BufferedReader(x247)
val x249 = x248.readLine()
var x250: java.lang.String = x249
val x251 = x250
val x252 = x251.trim()
x250 = x252
val x254 = x250
val x255 = x254.split("\\s+")
var x256: Array[java.lang.String] = x255
val x257 = x256
val x258 = x257.length
val x259 = new generated.scala.DoubleMatrixImpl(0,x258)
val x288 = while ({val x260 = x250
val x261 = x260 != null
x261}) {
val x263 = x256
val x264 = x263.length
val x265 = new generated.scala.DoubleVectorImpl(x264,true)
var x267 : Int = 0
val x273 = while (x267 < x264) {
val x268 = x256
val x269 = x268(x267)
val x270 = java.lang.Double.parseDouble(x269)
val x271 = x265(x267) = x270
x271
x267 = x267 + 1
}
val x274 = x259.numRows
val x275 = x259.insertRow(x274,x265)
val x276 = x248.readLine()
x250 = x276
val x278 = x250
val x279 = x278 != null
val x286 = {
def x286thenb(): Unit = {
val x280 = x278.trim()
x250 = x280
val x282 = x250
val x283 = x282.split("\\s+")
x256 = x283
()
}
if (x279) {
x286thenb()
}
}
x286
}
val x289 = x248.close()
x259
}
val x292 = new generated.scala.IntVectorImpl(0,false)
val x293 = new generated.scala.IntLabelsImpl(x292)
val x294 = new generated.scala.DoubleIntTrainingSetImpl(x291,x293)
val x56 = Seq()
val x295 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
val x296 = new generated.scala.IntVectorImpl(0,true)
val x297 = x296.length
val x298 = x296.insert(x297, 0)
val x299 = x294.numRows
val x300 = "   Input matrix size: "+x299
val x301 = x300+"*"
val x302 = x294.numCols
val x303 = x301+x302
val x304 = println(x303)
val x310 = new generated.scala.IntVectorImpl(0,true)
val x311 = x310.length
val x312 = x310.insert(x311, x299)
val x313 = x310.length
val x314 = x310.insert(x313, 2000)
val x315 = x310.length
val x305 = x299
val x306 = 2.5E9f / x305
val x307 = x306
val x308 = Math.floor(x307)
val x309 = x308.asInstanceOf[Int]
val x316 = x310.insert(x315, x309)
val x317 = x310.length
// a *thin* loop follows: x325
var x325: Int = 2147483647
var x318 = 0
while (x318 < x317) {  // begin fat loop x325
val x321 = x310(x318)
val x319 = x325
val x320 = x321
val x323 = x319 < x320
val x324 = {
def x324thenb(): Int = {
x319
}
def x324elseb(): Int = {
x320
}
if (x323) {
x324thenb()
} else { 
x324elseb()
}
}
x325 = x324
x318 += 1
} // end fat loop x325
val x326 = "   numSamples = "+x325
val x327 = println(x326)
val x328 = println("   finding empirical dist of the min distance between cells ...")
val x329 = println("   med_min_dist = 4.4593519740000005")
val x330 = "   For this "+x299
val x331 = x330+" channel data, KERNEL WIDTH is "
val x332 = x331+22.296759870000002
val x333 = x332+", APPRX WIDTH is "
val x334 = x333+6.689027961000001
val x335 = println(x334)
val x336 = println("   finding local density for each cell ...")
val x367 = { (x337: Int, x338: Int) => 
val x344 = x337 * x302
val x348 = x338 * x302
var x365: Double = 0
var x360 = 0
while (x360 < x302) {  // begin fat loop x365
val x477 = x344 + x360
val x478 = x294.dcApply(x477)
val x479 = { 
x478
}
val x480 = x348 + x360
val x481 = x294.dcApply(x480)
val x482 = { 
x481
}
val x483 = x479 - x482
val x484 = java.lang.Math.abs(x483)
val x361 = x365
val x362 = x484
val x364 = x361 + x362
x365 = x364
x360 += 1
} // end fat loop x365
val x366 = { 
x365
}
x366: Double
}
val x368 = 100000 / x299
val x369 = x368 + 1000
val x370 = new generated.scala.DoubleStreamImpl(x299,x299,x369,x367,true)
val x371 = new generated.scala.IntVectorImpl(x299,true)
var x376: Int = 0
val x372 = x369.doubleValue()
val x373 = x305 / x372
val x374 = Math.ceil(x373)
val x375 = x374.asInstanceOf[Int]
val x154 = List()
val x460 = while ({val x377 = x376
val x378 = x377 < x375
x378}) {
val x380 = x376
val x381 = x380 * x369
val x382 = x299 - x381
val x383 = x382 < 0
val x384 = {
def x384thenb(): Int = {
x299
}
def x384elseb(): Int = {
x382
}
if (x383) {
x384thenb()
} else { 
x384elseb()
}
}
val x385 = Math.min(x369, x384)
val x386 = x385.asInstanceOf[Int]
val x387 = { 
x386
}
val x390 = x376
val x388 = new generated.scala.IndexVectorRangeImpl(0,x387)
val x395 = x390 * x369
val x457 = {
var forIdx = 0
while (forIdx < x388.size) { // begin foreach loop x457
val x389 = x388.dcApply(forIdx)
val x396 = x395 + x389
val x402 = x396 * x302
// a *thin* loop follows: x425
val x425 = {
val x393 = x370.chunkRow(x389,x390)
x393
}
var x392 = 0
while (x392 < x299) {  // begin fat loop x425
val x406 = x392 * x302
var x423: Double = 0
var x418 = 0
while (x418 < x302) {  // begin fat loop x423
val x486 = x402 + x418
val x487 = x294.dcApply(x486)
val x488 = { 
x487
}
val x489 = x406 + x418
val x490 = x294.dcApply(x489)
val x491 = { 
x490
}
val x492 = x488 - x491
val x493 = java.lang.Math.abs(x492)
val x419 = x423
val x420 = x493
val x422 = x419 + x420
x423 = x422
x418 += 1
} // end fat loop x423
val x424 = { 
x423
}
x425.dcUpdate(x392, x424)
x392 += 1
} // end fat loop x425
val x426 = x425.index
val x427 = x426 % 1000
val x428 = x427==0
val x432 = {
def x432thenb(): Unit = {
val x429 = "  (streaming) # processed node = "+x426
val x430 = println(x429)
x430
}
if (x428) {
x432thenb()
}
}
val x433 = x371(x426)
val x434 = x433==0
val x455 = {
def x455thenb(): Unit = {
val x435 = x425.length
val x441 = {
val x437 = new generated.scala.IndexVectorSeqImpl(0)
//TODO: buffer size might be wrong (loop has conditions)
x437
}
var x448: Int = 0
var x436 = 0
while (x436 < x435) {  // begin fat loop x441,x448
val x439 = x425(x436)
val x440 = x439 < 6.689027961000001
val x494 = x439 < 22.296759870000002
if (x440) x441.insert(x441.length, x436)
if (x494) {
val x443 = x448
val x444 = 1
val x447 = x443 + x444
x448 = x447
}
x436 += 1
} // end fat loop x441,x448
val x453 = {
var forIdx = 0
while (forIdx < x441.size) { // begin foreach loop x453
val x450 = x441.dcApply(forIdx)
val x451 = x371(x450) = x448
x451
forIdx += 1
} // end foreach loop x453
}
x453
}
if (x434) {
x455thenb()
}
}
x455
forIdx += 1
} // end foreach loop x457
}
val x458 = x376 += 1
()
}
val x461 = Seq(x371)
val x462 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
var x463: Int = 0
val x473 = while ({val x464 = x463
val x465 = x464 < 9
x465}) {
val x467 = x463
val x468 = x371(x467)
val x469 = x468+" "
val x470 = print(x469)
val x471 = x463 += 1
()
}
val x474 = println(())
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
