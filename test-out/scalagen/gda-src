/*****************************************
  Emitting Generated Code                  
*******************************************/
class GDARunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 2
val x6 = {
def x6thenb(): Nothing = {
val x3 = println("Usage: GDA <input data file> <output label data file>")
val x4 = exit(-1)
x4
}
if (x2) {
x6thenb()
}
}
val x7 = x0(0)
val x53 = { 
val x8 = new java.io.FileReader(x7)
val x9 = new java.io.BufferedReader(x8)
val x10 = x9.readLine()
var x11: java.lang.String = x10
val x12 = x11
val x13 = x12.trim()
x11 = x13
val x15 = x11
val x16 = x15.split("\\s+")
var x17: Array[java.lang.String] = x16
val x18 = x17
val x19 = x18.length
val x20 = new generated.scala.DoubleMatrixImpl(0,x19)
val x50 = while ({val x21 = x11
val x22 = x21 != null
x22}) {
val x24 = x17
val x25 = x24.length
val x26 = new generated.scala.DoubleVectorImpl(x25,true)
var x28 : Int = 0
val x34 = while (x28 < x25) {
val x29 = x17
val x30 = x29(x28)
val x31 = java.lang.Double.parseDouble(x30)
val x32 = x26(x28) = x31
x32
x28 = x28 + 1
}
val x35 = x26.cloneL
val x36 = x20.numRows
val x37 = x20.insertRow(x36,x35)
val x38 = x9.readLine()
x11 = x38
val x40 = x11
val x41 = x40 != null
val x48 = {
def x48thenb(): Unit = {
val x42 = x40.trim()
x11 = x42
val x44 = x11
val x45 = x44.split("\\s+")
x17 = x45
()
}
if (x41) {
x48thenb()
}
}
x48
}
val x51 = x9.close()
x20
}
val x54 = x0(1)
val x76 = { 
val x55 = new generated.scala.DoubleVectorImpl(0,true)
val x56 = new java.io.FileReader(x54)
val x57 = new java.io.BufferedReader(x56)
val x58 = x57.readLine()
var x59: java.lang.String = x58
val x73 = while ({val x60 = x59
val x61 = x60 != null
x61}) {
val x63 = x59
val x64 = x63.trim()
x59 = x64
val x66 = x59
val x68 = x55.length
val x67 = java.lang.Double.parseDouble(x66)
val x69 = x55.insert(x68, x67)
val x70 = x57.readLine()
x59 = x70
()
}
val x74 = x57.close()
x55
}
val x85 = Seq()
val x86 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
val x80 = x76.length
val x81 = x76.isRow
def x84_block = {
val x82 = new generated.scala.BooleanVectorImpl(x80,x81)
var mapIdx = 0
while (mapIdx < x76.size) { // begin map loop x84
val x77 = x76.dcApply(mapIdx)
x82.dcUpdate(mapIdx,  {
val x78 = x77 <= 0.0
val x79 = {
def x79thenb(): Boolean = {
false
}
def x79elseb(): Boolean = {
true
}
if (x78) {
x79thenb()
} else { 
x79elseb()
}
}
x79
})
mapIdx += 1
} // end map loop x84
x82
}
val x84 = x84_block
val x87 = x84.length
val x98 = new generated.scala.RangeVectorImpl(0,x87,1,true)
def x138_block = {
val x89 = x98.dcApply(0)
var x99 = {
val x90 = x84(x89)
val x91 = x90==false
val x97 = {
def x97thenb(): scala.Tuple4[Double, Double, generated.scala.MatrixRow[Double], generated.scala.Vector[Double]] = {
val x92 = x53.getRow(x89)
val x88 = x53.numCols
val x93 = new generated.scala.ZeroVectorDoubleImpl(x88, true)
val x94 = x93.asInstanceOf[generated.scala.Vector[Double]]
val x95 = (1.0,0.0,x92,x94)
x95
}
def x97elseb(): scala.Tuple4[Double, Double, generated.scala.Vector[Double], generated.scala.MatrixRow[Double]] = {
val x92 = x53.getRow(x89)
val x88 = x53.numCols
val x93 = new generated.scala.ZeroVectorDoubleImpl(x88, true)
val x94 = x93.asInstanceOf[generated.scala.Vector[Double]]
val x96 = (0.0,1.0,x94,x92)
x96
}
if (x91) {
x97thenb()
} else { 
x97elseb()
}
}
x97
}
var mapReduceIdx = 1
while (mapReduceIdx < x98.size) { // begin mapReduce loop x138
val x89 = x98.dcApply(mapReduceIdx)
val x100 = {
val x90 = x84(x89)
val x91 = x90==false
val x97 = {
def x97thenb(): scala.Tuple4[Double, Double, generated.scala.MatrixRow[Double], generated.scala.Vector[Double]] = {
val x92 = x53.getRow(x89)
val x88 = x53.numCols
val x93 = new generated.scala.ZeroVectorDoubleImpl(x88, true)
val x94 = x93.asInstanceOf[generated.scala.Vector[Double]]
val x95 = (1.0,0.0,x92,x94)
x95
}
def x97elseb(): scala.Tuple4[Double, Double, generated.scala.Vector[Double], generated.scala.MatrixRow[Double]] = {
val x92 = x53.getRow(x89)
val x88 = x53.numCols
val x93 = new generated.scala.ZeroVectorDoubleImpl(x88, true)
val x94 = x93.asInstanceOf[generated.scala.Vector[Double]]
val x96 = (0.0,1.0,x94,x92)
x96
}
if (x91) {
x97thenb()
} else { 
x97elseb()
}
}
x97
}
x99 = {
val x101 = x99._1
val x105 = x100._1
val x109 = x101 + x105
val x102 = x99._2
val x106 = x100._2
val x110 = x102 + x106
val x103 = x99._3
val x111 = x103.isInstanceOf[generated.scala.ZeroVector[Double]]
val x123 = {
def x123thenb(): generated.scala.Vector[Double] = {
val x107 = x100._3
x107
}
def x123elseb(): generated.scala.Vector[Double] = {
val x107 = x100._3
val x112 = x107.isInstanceOf[generated.scala.ZeroVector[Double]]
val x122 = {
def x122thenb(): generated.scala.Vector[Double] = {
x103
}
def x122elseb(): generated.scala.Vector[Double] = {
val x113 = x103.length
val x114 = x103.isRow
val x121 = {
val x116 = new generated.scala.DoubleVectorImpl(x113,x114)
x116
}
var x115 = 0
while (x115 < x113) {  // begin fat loop x121
val x118 = x103(x115)
val x119 = x107(x115)
val x120 = x118 + x119
x121.dcUpdate(x115, x120)
x115 += 1
} // end fat loop x121
x121
}
if (x112) {
x122thenb()
} else { 
x122elseb()
}
}
x122
}
if (x111) {
x123thenb()
} else { 
x123elseb()
}
}
val x104 = x99._4
val x124 = x104.isInstanceOf[generated.scala.ZeroVector[Double]]
val x136 = {
def x136thenb(): generated.scala.Vector[Double] = {
val x108 = x100._4
x108
}
def x136elseb(): generated.scala.Vector[Double] = {
val x108 = x100._4
val x125 = x108.isInstanceOf[generated.scala.ZeroVector[Double]]
val x135 = {
def x135thenb(): generated.scala.Vector[Double] = {
x104
}
def x135elseb(): generated.scala.Vector[Double] = {
val x126 = x104.length
val x127 = x104.isRow
val x134 = {
val x129 = new generated.scala.DoubleVectorImpl(x126,x127)
x129
}
var x128 = 0
while (x128 < x126) {  // begin fat loop x134
val x131 = x104(x128)
val x132 = x108(x128)
val x133 = x131 + x132
x134.dcUpdate(x128, x133)
x128 += 1
} // end fat loop x134
x134
}
if (x125) {
x135thenb()
} else { 
x135elseb()
}
}
x135
}
if (x124) {
x136thenb()
} else { 
x136elseb()
}
}
val x137 = (x109,x110,x123,x136)
x137
}
mapReduceIdx += 1
} // end mapReduce loop x138
x99
}
val x138 = x138_block
def x247_block = {
val x162 = x98.dcApply(0)
var x240 = {
val x163 = x84(x162)
val x164 = x163==false
val x239 = {
def x239thenb(): generated.scala.Matrix[Double] = {
val x88 = x53.numCols
val x169 = x162 * x88
val x141 = x138._3
val x146 = x141.length
val x147 = x141.isRow
val x139 = x138._1
val x153 = {
val x149 = new generated.scala.DoubleVectorImpl(x146,x147)
x149
}
var x148 = 0
while (x148 < x146) {  // begin fat loop x153
val x151 = x141(x148)
val x152 = x151 / x139
x153.dcUpdate(x148, x152)
x148 += 1
} // end fat loop x153
val x175 = {
val x167 = new generated.scala.DoubleVectorImpl(x88,true)
x167
}
var x166 = 0
while (x166 < x88) {  // begin fat loop x175
val x170 = x169 + x166
val x171 = x53.dcApply(x170)
val x172 = { 
x171
}
val x173 = x153(x166)
val x174 = x172 - x173
x175.dcUpdate(x166, x174)
x166 += 1
} // end fat loop x175
val x203 = { 
val x190 = new generated.scala.DoubleMatrixImpl(x88,x88)
var x192 : Int = 0
val x201 = while (x192 < x88) {
val x194 = x175(x192)
var x193 : Int = 0
val x199 = while (x193 < x88) {
val x195 = x175(x193)
val x196 = x194 * x195
val x197 = x190(x192, x193) = x196
x197
x193 = x193 + 1
}
x199
x192 = x192 + 1
}
x190
}
x203
}
def x239elseb(): generated.scala.Matrix[Double] = {
val x88 = x53.numCols
val x169 = x162 * x88
val x142 = x138._4
val x154 = x142.length
val x155 = x142.isRow
val x140 = x138._2
val x161 = {
val x157 = new generated.scala.DoubleVectorImpl(x154,x155)
x157
}
var x156 = 0
while (x156 < x154) {  // begin fat loop x161
val x159 = x142(x156)
val x160 = x159 / x140
x161.dcUpdate(x156, x160)
x156 += 1
} // end fat loop x161
val x212 = {
val x205 = new generated.scala.DoubleVectorImpl(x88,true)
x205
}
var x204 = 0
while (x204 < x88) {  // begin fat loop x212
val x207 = x169 + x204
val x208 = x53.dcApply(x207)
val x209 = { 
x208
}
val x210 = x161(x204)
val x211 = x209 - x210
x212.dcUpdate(x204, x211)
x204 += 1
} // end fat loop x212
val x238 = { 
val x226 = new generated.scala.DoubleMatrixImpl(x88,x88)
var x227 : Int = 0
val x236 = while (x227 < x88) {
val x229 = x212(x227)
var x228 : Int = 0
val x234 = while (x228 < x88) {
val x230 = x212(x228)
val x231 = x229 * x230
val x232 = x226(x227, x228) = x231
x232
x228 = x228 + 1
}
x234
x227 = x227 + 1
}
x226
}
x238
}
if (x164) {
x239thenb()
} else { 
x239elseb()
}
}
x239
}
var mapReduceIdx = 1
while (mapReduceIdx < x98.size) { // begin mapReduce loop x247
val x162 = x98.dcApply(mapReduceIdx)
val x241 = {
val x163 = x84(x162)
val x164 = x163==false
val x239 = {
def x239thenb(): generated.scala.Matrix[Double] = {
val x88 = x53.numCols
val x169 = x162 * x88
val x141 = x138._3
val x146 = x141.length
val x147 = x141.isRow
val x139 = x138._1
val x153 = {
val x149 = new generated.scala.DoubleVectorImpl(x146,x147)
x149
}
var x148 = 0
while (x148 < x146) {  // begin fat loop x153
val x151 = x141(x148)
val x152 = x151 / x139
x153.dcUpdate(x148, x152)
x148 += 1
} // end fat loop x153
val x175 = {
val x167 = new generated.scala.DoubleVectorImpl(x88,true)
x167
}
var x166 = 0
while (x166 < x88) {  // begin fat loop x175
val x170 = x169 + x166
val x171 = x53.dcApply(x170)
val x172 = { 
x171
}
val x173 = x153(x166)
val x174 = x172 - x173
x175.dcUpdate(x166, x174)
x166 += 1
} // end fat loop x175
val x203 = { 
val x190 = new generated.scala.DoubleMatrixImpl(x88,x88)
var x192 : Int = 0
val x201 = while (x192 < x88) {
val x194 = x175(x192)
var x193 : Int = 0
val x199 = while (x193 < x88) {
val x195 = x175(x193)
val x196 = x194 * x195
val x197 = x190(x192, x193) = x196
x197
x193 = x193 + 1
}
x199
x192 = x192 + 1
}
x190
}
x203
}
def x239elseb(): generated.scala.Matrix[Double] = {
val x88 = x53.numCols
val x169 = x162 * x88
val x142 = x138._4
val x154 = x142.length
val x155 = x142.isRow
val x140 = x138._2
val x161 = {
val x157 = new generated.scala.DoubleVectorImpl(x154,x155)
x157
}
var x156 = 0
while (x156 < x154) {  // begin fat loop x161
val x159 = x142(x156)
val x160 = x159 / x140
x161.dcUpdate(x156, x160)
x156 += 1
} // end fat loop x161
val x212 = {
val x205 = new generated.scala.DoubleVectorImpl(x88,true)
x205
}
var x204 = 0
while (x204 < x88) {  // begin fat loop x212
val x207 = x169 + x204
val x208 = x53.dcApply(x207)
val x209 = { 
x208
}
val x210 = x161(x204)
val x211 = x209 - x210
x212.dcUpdate(x204, x211)
x204 += 1
} // end fat loop x212
val x238 = { 
val x226 = new generated.scala.DoubleMatrixImpl(x88,x88)
var x227 : Int = 0
val x236 = while (x227 < x88) {
val x229 = x212(x227)
var x228 : Int = 0
val x234 = while (x228 < x88) {
val x230 = x212(x228)
val x231 = x229 * x230
val x232 = x226(x227, x228) = x231
x232
x228 = x228 + 1
}
x234
x227 = x227 + 1
}
x226
}
x238
}
if (x164) {
x239thenb()
} else { 
x239elseb()
}
}
x239
}
x240 = {
def x245_block = {
var zipIdx = 0
while (zipIdx < x240.size) { // begin zip loop x245
val x242 = x240.dcApply(zipIdx)
val x243 = x241.dcApply(zipIdx)
x240.dcUpdate(zipIdx,  {
val x244 = x242 + x243
x244
})
zipIdx += 1
} // end zip loop x245
x240
}
val x245 = x245_block
x245
}
mapReduceIdx += 1
} // end mapReduce loop x247
x240
}
val x247 = x247_block
val x248 = Seq(x247)
val x249 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
val x250 = println(x247)
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
