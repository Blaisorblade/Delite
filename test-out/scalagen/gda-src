/*****************************************
  Emitting Generated Code                  
*******************************************/
class GDARunner extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 2
val x6 = {
def x6thenb(): Nothing = {
val x3 = println("Usage: GDA <input data file> <output label data file>")
val x4 = exit(-1)
x4
}
def x6elseb(): Unit = {
()
}
if (x2) {
x6thenb()
} else {
x6elseb()
}
}
val x7 = x0(0)
def x52_block = { 
val x8 = new java.io.FileReader(x7)
val x9 = new java.io.BufferedReader(x8)
val x10 = x9.readLine()
var x11: java.lang.String = x10
val x12 = x11
val x13 = x12.trim()
x11 = x13
val x15 = x11
val x16 = x15.split("\\s+")
var x17: Array[java.lang.String] = x16
val x18 = x17
val x19 = x18.length
val x20 = new generated.scala.DoubleMatrixImpl(0,x19)
val x49 = while ({val x21 = x11
val x22 = x21 != null
x22}) {
val x24 = x17
val x25 = x24.length
val x26 = new generated.scala.DoubleVectorImpl(x25,true)
var x28 : Int = 0
val x34 = while (x28 < x25) {
val x29 = x17
val x30 = x29(x28)
val x31 = java.lang.Double.parseDouble(x30)
val x32 = x26(x28) = x31
x32
x28 = x28 + 1
}
val x35 = x20.numRows
val x36 = x20.insertRow(x35,x26)
val x37 = x9.readLine()
x11 = x37
val x39 = x11
val x40 = x39 != null
val x47 = {
def x47thenb(): Unit = {
val x41 = x39.trim()
x11 = x41
val x43 = x11
val x44 = x43.split("\\s+")
x17 = x44
()
}
def x47elseb(): Unit = {
()
}
if (x40) {
x47thenb()
} else {
x47elseb()
}
}
x47
}
val x50 = x9.close()
x20
}
val x52 = x52_block
val x53 = x0(1)
def x75_block = { 
val x54 = new generated.scala.DoubleVectorImpl(0,true)
val x55 = new java.io.FileReader(x53)
val x56 = new java.io.BufferedReader(x55)
val x57 = x56.readLine()
var x58: java.lang.String = x57
val x72 = while ({val x59 = x58
val x60 = x59 != null
x60}) {
val x62 = x58
val x63 = x62.trim()
x58 = x63
val x65 = x58
val x67 = x54.length
val x66 = java.lang.Double.parseDouble(x65)
val x68 = x54.insert(x67, x66)
val x69 = x56.readLine()
x58 = x69
()
}
val x73 = x56.close()
x54
}
val x75 = x75_block
val x84 = Seq()
val x85 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
val x79 = x75.length
val x80 = x75.isRow
def x83_block = {
val x81 = new generated.scala.BooleanVectorImpl(x79,x80)
var mapIdx = 0
while (mapIdx < x75.size) {
val x76 = x75.dcApply(mapIdx)
x81.dcUpdate(mapIdx,  {
val x77 = x76 <= 0.0
val x78 = {
def x78thenb(): Boolean = {
false
}
def x78elseb(): Boolean = {
true
}
if (x77) {
x78thenb()
} else {
x78elseb()
}
}
x78
})
mapIdx += 1
} // end while
x81
}
val x83 = x83_block
val x86 = x83.length
val x97 = new generated.scala.RangeVectorImpl(0,x86,1,true)
def x137_block = {
val x88 = x97.dcApply(0)
var x98 = {
val x89 = x83(x88)
val x90 = x89==false
val x96 = {
def x96thenb(): scala.Tuple4[Double, Double, generated.scala.MatrixRow[Double], generated.scala.Vector[Double]] = {
val x91 = x52.getRow(x88)
val x87 = x52.numCols
val x92 = new generated.scala.ZeroVectorDoubleImpl(x87, true)
val x93 = x92.asInstanceOf[generated.scala.Vector[Double]]
val x94 = (1.0,0.0,x91,x93)
x94
}
def x96elseb(): scala.Tuple4[Double, Double, generated.scala.Vector[Double], generated.scala.MatrixRow[Double]] = {
val x91 = x52.getRow(x88)
val x87 = x52.numCols
val x92 = new generated.scala.ZeroVectorDoubleImpl(x87, true)
val x93 = x92.asInstanceOf[generated.scala.Vector[Double]]
val x95 = (0.0,1.0,x93,x91)
x95
}
if (x90) {
x96thenb()
} else {
x96elseb()
}
}
x96
}
var mapReduceIdx = 1
while (mapReduceIdx < x97.size) {
val x88 = x97.dcApply(mapReduceIdx)
val x99 = {
val x89 = x83(x88)
val x90 = x89==false
val x96 = {
def x96thenb(): scala.Tuple4[Double, Double, generated.scala.MatrixRow[Double], generated.scala.Vector[Double]] = {
val x91 = x52.getRow(x88)
val x87 = x52.numCols
val x92 = new generated.scala.ZeroVectorDoubleImpl(x87, true)
val x93 = x92.asInstanceOf[generated.scala.Vector[Double]]
val x94 = (1.0,0.0,x91,x93)
x94
}
def x96elseb(): scala.Tuple4[Double, Double, generated.scala.Vector[Double], generated.scala.MatrixRow[Double]] = {
val x91 = x52.getRow(x88)
val x87 = x52.numCols
val x92 = new generated.scala.ZeroVectorDoubleImpl(x87, true)
val x93 = x92.asInstanceOf[generated.scala.Vector[Double]]
val x95 = (0.0,1.0,x93,x91)
x95
}
if (x90) {
x96thenb()
} else {
x96elseb()
}
}
x96
}
x98 = {
val x100 = x98._1
val x104 = x99._1
val x108 = x100 + x104
val x101 = x98._2
val x105 = x99._2
val x109 = x101 + x105
val x102 = x98._3
val x110 = x102.isInstanceOf[generated.scala.ZeroVector[Double]]
val x122 = {
def x122thenb(): generated.scala.Vector[Double] = {
val x106 = x99._3
x106
}
def x122elseb(): generated.scala.Vector[Double] = {
val x106 = x99._3
val x111 = x106.isInstanceOf[generated.scala.ZeroVector[Double]]
val x121 = {
def x121thenb(): generated.scala.Vector[Double] = {
x102
}
def x121elseb(): generated.scala.Vector[Double] = {
val x112 = x102.length
val x113 = x102.isRow
val x120 = {
val x115 = new generated.scala.DoubleVectorImpl(x112,x113)
x115
}
var x114 = 0
while (x114 < x112) {  // begin fat loop x120
val x117 = x102(x114)
val x118 = x106(x114)
val x119 = x117 + x118
x120.dcUpdate(x114, x119)
x114 += 1
} // end fat loop x120
x120
}
if (x111) {
x121thenb()
} else {
x121elseb()
}
}
x121
}
if (x110) {
x122thenb()
} else {
x122elseb()
}
}
val x103 = x98._4
val x123 = x103.isInstanceOf[generated.scala.ZeroVector[Double]]
val x135 = {
def x135thenb(): generated.scala.Vector[Double] = {
val x107 = x99._4
x107
}
def x135elseb(): generated.scala.Vector[Double] = {
val x107 = x99._4
val x124 = x107.isInstanceOf[generated.scala.ZeroVector[Double]]
val x134 = {
def x134thenb(): generated.scala.Vector[Double] = {
x103
}
def x134elseb(): generated.scala.Vector[Double] = {
val x125 = x103.length
val x126 = x103.isRow
val x133 = {
val x128 = new generated.scala.DoubleVectorImpl(x125,x126)
x128
}
var x127 = 0
while (x127 < x125) {  // begin fat loop x133
val x130 = x103(x127)
val x131 = x107(x127)
val x132 = x130 + x131
x133.dcUpdate(x127, x132)
x127 += 1
} // end fat loop x133
x133
}
if (x124) {
x134thenb()
} else {
x134elseb()
}
}
x134
}
if (x123) {
x135thenb()
} else {
x135elseb()
}
}
val x136 = (x108,x109,x122,x135)
x136
}
mapReduceIdx += 1
} // end while
x98
}
val x137 = x137_block
def x237_block = {
val x161 = x97.dcApply(0)
var x230 = {
val x162 = x83(x161)
val x163 = x162==false
val x229 = {
def x229thenb(): generated.scala.Matrix[Double] = {
val x87 = x52.numCols
val x140 = x137._3
val x145 = x140.length
val x146 = x140.isRow
val x138 = x137._1
val x152 = {
val x148 = new generated.scala.DoubleVectorImpl(x145,x146)
x148
}
var x147 = 0
while (x147 < x145) {  // begin fat loop x152
val x150 = x140(x147)
val x151 = x150 / x138
x152.dcUpdate(x147, x151)
x147 += 1
} // end fat loop x152
val x171 = {
val x166 = new generated.scala.DoubleVectorImpl(x87,true)
x166
}
var x165 = 0
while (x165 < x87) {  // begin fat loop x171
val x168 = x52(x161, x165)
val x169 = x152(x165)
val x170 = x168 - x169
x171.dcUpdate(x165, x170)
x165 += 1
} // end fat loop x171
val x172 = !true
val x177 = {
val x174 = new generated.scala.DoubleVectorImpl(x87,x172)
x174
}
var x173 = 0
while (x173 < x87) {  // begin fat loop x177
val x176 = x171(x173)
x177.dcUpdate(x173, x176)
x173 += 1
} // end fat loop x177
def x197_block = { 
val x184 = new generated.scala.DoubleMatrixImpl(x87,x87)
var x186 : Int = 0
val x195 = while (x186 < x87) {
val x188 = x171(x186)
var x187 : Int = 0
val x193 = while (x187 < x87) {
val x189 = x171(x187)
val x190 = x188 * x189
val x191 = x184(x186, x187) = x190
x191
x187 = x187 + 1
}
x193
x186 = x186 + 1
}
x184
}
val x197 = x197_block
x197
}
def x229elseb(): generated.scala.Matrix[Double] = {
val x87 = x52.numCols
val x141 = x137._4
val x153 = x141.length
val x154 = x141.isRow
val x139 = x137._2
val x160 = {
val x156 = new generated.scala.DoubleVectorImpl(x153,x154)
x156
}
var x155 = 0
while (x155 < x153) {  // begin fat loop x160
val x158 = x141(x155)
val x159 = x158 / x139
x160.dcUpdate(x155, x159)
x155 += 1
} // end fat loop x160
val x204 = {
val x199 = new generated.scala.DoubleVectorImpl(x87,true)
x199
}
var x198 = 0
while (x198 < x87) {  // begin fat loop x204
val x201 = x52(x161, x198)
val x202 = x160(x198)
val x203 = x201 - x202
x204.dcUpdate(x198, x203)
x198 += 1
} // end fat loop x204
val x172 = !true
val x209 = {
val x206 = new generated.scala.DoubleVectorImpl(x87,x172)
x206
}
var x205 = 0
while (x205 < x87) {  // begin fat loop x209
val x208 = x204(x205)
x209.dcUpdate(x205, x208)
x205 += 1
} // end fat loop x209
def x228_block = { 
val x216 = new generated.scala.DoubleMatrixImpl(x87,x87)
var x217 : Int = 0
val x226 = while (x217 < x87) {
val x219 = x204(x217)
var x218 : Int = 0
val x224 = while (x218 < x87) {
val x220 = x204(x218)
val x221 = x219 * x220
val x222 = x216(x217, x218) = x221
x222
x218 = x218 + 1
}
x224
x217 = x217 + 1
}
x216
}
val x228 = x228_block
x228
}
if (x163) {
x229thenb()
} else {
x229elseb()
}
}
x229
}
var mapReduceIdx = 1
while (mapReduceIdx < x97.size) {
val x161 = x97.dcApply(mapReduceIdx)
val x231 = {
val x162 = x83(x161)
val x163 = x162==false
val x229 = {
def x229thenb(): generated.scala.Matrix[Double] = {
val x87 = x52.numCols
val x140 = x137._3
val x145 = x140.length
val x146 = x140.isRow
val x138 = x137._1
val x152 = {
val x148 = new generated.scala.DoubleVectorImpl(x145,x146)
x148
}
var x147 = 0
while (x147 < x145) {  // begin fat loop x152
val x150 = x140(x147)
val x151 = x150 / x138
x152.dcUpdate(x147, x151)
x147 += 1
} // end fat loop x152
val x171 = {
val x166 = new generated.scala.DoubleVectorImpl(x87,true)
x166
}
var x165 = 0
while (x165 < x87) {  // begin fat loop x171
val x168 = x52(x161, x165)
val x169 = x152(x165)
val x170 = x168 - x169
x171.dcUpdate(x165, x170)
x165 += 1
} // end fat loop x171
val x172 = !true
val x177 = {
val x174 = new generated.scala.DoubleVectorImpl(x87,x172)
x174
}
var x173 = 0
while (x173 < x87) {  // begin fat loop x177
val x176 = x171(x173)
x177.dcUpdate(x173, x176)
x173 += 1
} // end fat loop x177
def x197_block = { 
val x184 = new generated.scala.DoubleMatrixImpl(x87,x87)
var x186 : Int = 0
val x195 = while (x186 < x87) {
val x188 = x171(x186)
var x187 : Int = 0
val x193 = while (x187 < x87) {
val x189 = x171(x187)
val x190 = x188 * x189
val x191 = x184(x186, x187) = x190
x191
x187 = x187 + 1
}
x193
x186 = x186 + 1
}
x184
}
val x197 = x197_block
x197
}
def x229elseb(): generated.scala.Matrix[Double] = {
val x87 = x52.numCols
val x141 = x137._4
val x153 = x141.length
val x154 = x141.isRow
val x139 = x137._2
val x160 = {
val x156 = new generated.scala.DoubleVectorImpl(x153,x154)
x156
}
var x155 = 0
while (x155 < x153) {  // begin fat loop x160
val x158 = x141(x155)
val x159 = x158 / x139
x160.dcUpdate(x155, x159)
x155 += 1
} // end fat loop x160
val x204 = {
val x199 = new generated.scala.DoubleVectorImpl(x87,true)
x199
}
var x198 = 0
while (x198 < x87) {  // begin fat loop x204
val x201 = x52(x161, x198)
val x202 = x160(x198)
val x203 = x201 - x202
x204.dcUpdate(x198, x203)
x198 += 1
} // end fat loop x204
val x172 = !true
val x209 = {
val x206 = new generated.scala.DoubleVectorImpl(x87,x172)
x206
}
var x205 = 0
while (x205 < x87) {  // begin fat loop x209
val x208 = x204(x205)
x209.dcUpdate(x205, x208)
x205 += 1
} // end fat loop x209
def x228_block = { 
val x216 = new generated.scala.DoubleMatrixImpl(x87,x87)
var x217 : Int = 0
val x226 = while (x217 < x87) {
val x219 = x204(x217)
var x218 : Int = 0
val x224 = while (x218 < x87) {
val x220 = x204(x218)
val x221 = x219 * x220
val x222 = x216(x217, x218) = x221
x222
x218 = x218 + 1
}
x224
x217 = x217 + 1
}
x216
}
val x228 = x228_block
x228
}
if (x163) {
x229thenb()
} else {
x229elseb()
}
}
x229
}
x230 = {
def x235_block = {
var zipIdx = 0
while (zipIdx < x230.size) {
val x232 = x230.dcApply(zipIdx)
val x233 = x231.dcApply(zipIdx)
x230.dcUpdate(zipIdx,  {
val x234 = x232 + x233
x234
})
zipIdx += 1
} // end while
x230
}
val x235 = x235_block
x235
}
mapReduceIdx += 1
} // end while
x230
}
val x237 = x237_block
val x238 = Seq(x237)
val x239 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
val x240 = println(x237)
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
