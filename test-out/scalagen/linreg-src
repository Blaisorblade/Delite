/*****************************************
  Emitting Generated Code                  
*******************************************/
class LinReg extends ((Array[java.lang.String])=>(Unit)) {
def apply(x0:Array[java.lang.String]): Unit = {
val x1 = x0.length
val x2 = x1 < 2
val x6 = {
def x6thenb(): Nothing = {
val x3 = println("Usage: LinRegSerial <input vector file> <output vector file>")
val x4 = exit(-1)
x4
}
def x6elseb(): Unit = {
()
}
if (x2) {
x6thenb()
} else {
x6elseb()
}
}
val x7 = x0(0)
def x31_block = { 
val x8 = new generated.scala.DoubleVectorImpl(0,true)
val x9 = new java.io.FileReader(x7)
val x10 = new java.io.BufferedReader(x9)
val x11 = x10.readLine()
var x12 = x11
val x13 = x12
val x28 = while ({val x15 = x12
val x16 = x15 != null
x16}) {
val x18 = x12
val x19 = x18.trim()
x12 = x19
val x21 = x12
val x23 = x8.length
val x22 = java.lang.Double.parseDouble(x21)
val x24 = x8.insert(x23, x22)
val x25 = x10.readLine()
x12 = x25
()
}
val x29 = x10.close()
x8
}
val x31 = x31_block
val x32 = x0(1)
def x56_block = { 
val x33 = new generated.scala.DoubleVectorImpl(0,true)
val x34 = new java.io.FileReader(x32)
val x35 = new java.io.BufferedReader(x34)
val x36 = x35.readLine()
var x37 = x36
val x38 = x37
val x53 = while ({val x40 = x37
val x41 = x40 != null
x41}) {
val x43 = x37
val x44 = x43.trim()
x37 = x44
val x46 = x37
val x48 = x33.length
val x47 = java.lang.Double.parseDouble(x46)
val x49 = x33.insert(x48, x47)
val x50 = x35.readLine()
x37 = x50
()
}
val x54 = x35.close()
x33
}
val x56 = x56_block
def x66_block = {
val x62 = x31.length
val x63 = x31.isRow
val x64 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x62,x63)
var mapIdx = 0
while (mapIdx < x31.size) {
val x57 = x31.dcApply(mapIdx)
x64.dcUpdate(mapIdx,  {
val x58 = new generated.scala.DoubleVectorImpl(2,true)
val x59 = x58(0) = 1.0
val x60 = x58(1) = x57
x58
})
mapIdx += 1
} // end while
x64
}
val x66 = x66_block
def x85_block = { 
val x67 = x66.length
val x68 = x67 > 0
val x71 = {
def x71thenb(): Int = {
val x69 = x66(0)
val x70 = x69.length
x70
}
def x71elseb(): Int = {
0
}
if (x68) {
x71thenb()
} else {
x71elseb()
}
}
val x72 = new generated.scala.DoubleMatrixImpl(x67,x71)
var x74 : Int = 0
val x83 = while (x74 < x67) {
var x76 : Int = 0
val x81 = while (x76 < x71) {
val x77 = x66(x74)
val x78 = x77(x76)
val x79 = x72(x74, x76) = x78
x79
x76 = x76 + 1
}
x81
x74 = x74 + 1
}
x72
}
val x85 = x85_block
val x473 = println("Unweighted linear regression")
val x474 = println("theta: ")
def x102_block = { 
val x86 = x85.numCols
val x87 = x85.numRows
val x88 = new generated.scala.DoubleMatrixImpl(x86,x87)
val x89 = x88.numRows
var x91 : Int = 0
val x100 = while (x91 < x89) {
val x92 = x88.numCols
var x94 : Int = 0
val x98 = while (x94 < x92) {
val x95 = x85(x94, x91)
val x96 = x88(x91, x94) = x95
x96
x94 = x94 + 1
}
x98
x91 = x91 + 1
}
x88
}
val x102 = x102_block
def x162_block = { 
val x86 = x85.numCols
val x117 = x102.numRows
val x118 = new generated.scala.DoubleMatrixImpl(x117,x86)
val x119 = new generated.scala.IndexVectorRangeImpl(0,x117)
def x160_block = {
var forIdx = 0
while (forIdx < x119.size) {
val x120 = x119.dcApply(forIdx)
var x121 = 0
val x122 = x121
val x155 = while ({val x125 = x121
val x123 = x118.numCols
val x126 = x125 < x123
x126}) {
var x128 = 1
val x130 = x121
val x129 = x102(x120, 0)
val x131 = x102(x130, 0)
val x132 = x129 * x131
var x133 = x132
val x134 = x128
val x149 = while ({val x137 = x128
val x135 = x102.numCols
val x138 = x137 < x135
x138}) {
val x140 = x128
val x142 = x121
val x143 = x128
val x141 = x102(x120, x140)
val x144 = x102(x142, x143)
val x145 = x141 * x144
val x146 = x133 += x145
val x147 = x128 += 1
()
}
val x150 = x121
val x151 = x133
val x152 = x118(x120, x150) = x151
val x153 = x121 += 1
()
}
()
forIdx += 1
} // end while
}
val x160 = x160_block
x118
}
val x162 = x162_block
def x398_block = { 
val x163 = x162.cloneL
var x164 = x163
val x165 = x162.numCols
def x189_block = { 
def x170_block = { 
val x166 = new generated.scala.DoubleVectorImpl(x165,true)
def x168_block = {
var mapIdx = 0
while (mapIdx < x166.size) {
val x167 = x166.dcApply(mapIdx)
x166.dcUpdate(mapIdx,  {
1.0
})
mapIdx += 1
} // end while
x166
}
val x168 = x168_block
x168
}
val x170 = x170_block
def x187_block = { 
val x171 = new generated.scala.DoubleMatrixImpl(x165,x165)
var x172 = 0
val x173 = x172
val x185 = while ({val x175 = x172
val x176 = x175 < x165
x176}) {
val x178 = x172
val x179 = x172
val x180 = x172
val x181 = x170(x180)
val x182 = x171(x178, x179) = x181
val x183 = x172 += 1
()
}
x171
}
val x187 = x187_block
x187
}
val x189 = x189_block
val x190 = x164
def x196_block = {
val x192 = x190.numRows
val x193 = x190.numCols
val x194 = new generated.scala.DoubleMatrixImpl(x192,x193)
var mapIdx = 0
while (mapIdx < x190.size) {
val x191 = x190.dcApply(mapIdx)
x194.dcUpdate(mapIdx,  {
x191
})
mapIdx += 1
} // end while
x194
}
val x196 = x196_block
val x197 = x164
val x198 = x197.numCols
val x199 = x196.insertAllCols(x198,x189)
var x200 = 0
var x201 = false
var x202 = 0
val x203 = x201
val x205 = x202
val x206 = x196
val x395 = while ({val x210 = x201
val x211 = !x210
val x212 = x202
val x207 = x206.numRows
val x213 = x212 < x207
val x214 = x211 && x213
x214}) {
val x216 = x200
val x207 = x206.numRows
val x217 = x207 <= x216
val x220 = {
def x220thenb(): Unit = {
x201 = true
()
}
def x220elseb(): Unit = {
()
}
if (x217) {
x220thenb()
} else {
x220elseb()
}
}
val x221 = x201
val x222 = !x221
val x392 = {
def x392thenb(): Unit = {
val x223 = x202
var x224 = x223
val x225 = x201
val x227 = x224
val x228 = x200
val x255 = while ({val x232 = x201
val x233 = !x232
val x234 = x224
val x235 = x200
val x236 = x206(x234, x235)
val x237 = x236==0.0
val x238 = x233 && x237
x238}) {
val x241 = x206.numCols
val x240 = x224 += 1
val x242 = x224
val x243 = x241==x242
val x253 = {
def x253thenb(): Unit = {
val x244 = x202
x224 = x244
val x246 = x200 += 1
val x247 = x200
val x248 = x207==x247
val x251 = {
def x251thenb(): Unit = {
x201 = true
()
}
def x251elseb(): Unit = {
()
}
if (x248) {
x251thenb()
} else {
x251elseb()
}
}
x251
}
def x253elseb(): Unit = {
()
}
if (x243) {
x253thenb()
} else {
x253elseb()
}
}
x253
}
val x256 = x201
val x257 = !x256
val x390 = {
def x390thenb(): Unit = {
val x258 = x224
val x262 = x224
val x263 = x202
def x266_block = { 
val x241 = x206.numCols
val x264 = x263 * x241
val x265 = x206.vview(x264,1,x241,true)
x265
}
val x266 = x266_block
def x283_block = { 
var x267 = 0
val x268 = x267
val x269 = x196
val x281 = while ({val x272 = x267
val x270 = x269.numCols
val x273 = x272 < x270
x273}) {
val x275 = x267
val x276 = x267
val x277 = x266(x276)
val x278 = x196(x262, x275) = x277
val x279 = x267 += 1
()
}
()
}
val x283 = x283_block
val x284 = x202
def x261_block = { 
val x241 = x206.numCols
val x259 = x258 * x241
val x260 = x206.vview(x259,1,x241,true)
x260
}
val x261 = x261_block
def x301_block = { 
var x285 = 0
val x286 = x285
val x287 = x196
val x299 = while ({val x290 = x285
val x288 = x287.numCols
val x291 = x290 < x288
x291}) {
val x293 = x285
val x294 = x285
val x295 = x261(x294)
val x296 = x196(x284, x293) = x295
val x297 = x285 += 1
()
}
()
}
val x301 = x301_block
val x302 = x202
val x303 = x202
val x304 = x196
val x309 = x202
val x310 = x200
def x308_block = { 
val x305 = x304.numCols
val x306 = x303 * x305
val x307 = x304.vview(x306,1,x305,true)
x307
}
val x308 = x308_block
def x318_block = {
val x312 = x308.length
val x313 = x308.isRow
val x314 = new generated.scala.DoubleVectorImpl(x312,x313)
var mapIdx = 0
while (mapIdx < x308.size) {
val x316 = x308.dcApply(mapIdx)
x314.dcUpdate(mapIdx,  {
val x311 = x304(x309, x310)
val x317 = x316 / x311
x317
})
mapIdx += 1
} // end while
x314
}
val x318 = x318_block
def x335_block = { 
var x319 = 0
val x320 = x319
val x321 = x196
val x333 = while ({val x324 = x319
val x322 = x321.numCols
val x325 = x324 < x322
x325}) {
val x327 = x319
val x328 = x319
val x329 = x318(x328)
val x330 = x196(x302, x327) = x329
val x331 = x319 += 1
()
}
()
}
val x335 = x335_block
val x336 = x196
val x337 = x336.numRows
var x339 : Int = 0
val x387 = while (x339 < x337) {
val x340 = x202
val x341 = x339 != x340
val x385 = {
def x385thenb(): Unit = {
def x345_block = { 
val x342 = x336.numCols
val x343 = x339 * x342
val x344 = x336.vview(x343,1,x342,true)
x344
}
val x345 = x345_block
val x346 = x202
def x349_block = { 
val x342 = x336.numCols
val x347 = x346 * x342
val x348 = x336.vview(x347,1,x342,true)
x348
}
val x349 = x349_block
val x350 = x200
def x358_block = {
val x352 = x349.length
val x353 = x349.isRow
val x354 = new generated.scala.DoubleVectorImpl(x352,x353)
var mapIdx = 0
while (mapIdx < x349.size) {
val x356 = x349.dcApply(mapIdx)
x354.dcUpdate(mapIdx,  {
val x351 = x336(x339, x350)
val x357 = x356 * x351
x357
})
mapIdx += 1
} // end while
x354
}
val x358 = x358_block
def x366_block = {
val x359 = x345.length
val x360 = x345.isRow
val x361 = new generated.scala.DoubleVectorImpl(x359,x360)
var zipIdx = 0
while (zipIdx < x345.size) {
val x363 = x345.dcApply(zipIdx)
val x364 = x358.dcApply(zipIdx)
x361.dcUpdate(zipIdx,  {
val x365 = x363 - x364
x365
})
zipIdx += 1
} // end while
x361
}
val x366 = x366_block
def x383_block = { 
var x367 = 0
val x368 = x367
val x369 = x196
val x381 = while ({val x372 = x367
val x370 = x369.numCols
val x373 = x372 < x370
x373}) {
val x375 = x367
val x376 = x367
val x377 = x366(x376)
val x378 = x196(x339, x375) = x377
val x379 = x367 += 1
()
}
()
}
val x383 = x383_block
x383
}
def x385elseb(): Unit = {
()
}
if (x341) {
x385thenb()
} else {
x385elseb()
}
}
x385
x339 = x339 + 1
}
val x388 = x200 += 1
()
}
def x390elseb(): Unit = {
()
}
if (x257) {
x390thenb()
} else {
x390elseb()
}
}
x390
}
def x392elseb(): Unit = {
()
}
if (x222) {
x392thenb()
} else {
x392elseb()
}
}
val x393 = x202 += 1
()
}
val x396 = x196.removeCols(0,x165)
x196
}
val x398 = x398_block
def x419_block = {
val x413 = x56.length
val x414 = x56.isRow
val x415 = !x414
val x416 = new generated.scala.DoubleVectorImpl(x413,x415)
var mapIdx = 0
while (mapIdx < x56.size) {
val x418 = x56.dcApply(mapIdx)
x416.dcUpdate(mapIdx,  {
x418
})
mapIdx += 1
} // end while
x416
}
val x419 = x419_block
def x444_block = { 
val x117 = x102.numRows
val x420 = new generated.scala.DoubleVectorImpl(x117,false)
val x119 = new generated.scala.IndexVectorRangeImpl(0,x117)
def x442_block = {
var forIdx = 0
while (forIdx < x119.size) {
val x421 = x119.dcApply(forIdx)
def x424_block = { 
val x135 = x102.numCols
val x422 = x421 * x135
val x423 = x102.vview(x422,1,x135,true)
x423
}
val x424 = x424_block
def x432_block = {
val x425 = x424.length
val x426 = x424.isRow
val x427 = new generated.scala.DoubleVectorImpl(x425,x426)
var zipIdx = 0
while (zipIdx < x424.size) {
val x429 = x424.dcApply(zipIdx)
val x430 = x419.dcApply(zipIdx)
x427.dcUpdate(zipIdx,  {
val x431 = x429 * x430
x431
})
zipIdx += 1
} // end while
x427
}
val x432 = x432_block
def x436_block = {
var x433 = x432.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x432.size) {
val x434 = x432.dcApply(reduceIdx)
x433 = {
val x435 = x433 + x434
x435
}
reduceIdx += 1
} // end while
x433
}
val x436 = x436_block
val x437 = x420(x421) = x436
x437
forIdx += 1
} // end while
}
val x442 = x442_block
x420
}
val x444 = x444_block
def x472_block = { 
val x445 = x398.numRows
val x446 = new generated.scala.DoubleVectorImpl(x445,false)
val x447 = new generated.scala.IndexVectorRangeImpl(0,x445)
def x470_block = {
var forIdx = 0
while (forIdx < x447.size) {
val x448 = x447.dcApply(forIdx)
def x452_block = { 
val x449 = x398.numCols
val x450 = x448 * x449
val x451 = x398.vview(x450,1,x449,true)
x451
}
val x452 = x452_block
def x460_block = {
val x453 = x452.length
val x454 = x452.isRow
val x455 = new generated.scala.DoubleVectorImpl(x453,x454)
var zipIdx = 0
while (zipIdx < x452.size) {
val x457 = x452.dcApply(zipIdx)
val x458 = x444.dcApply(zipIdx)
x455.dcUpdate(zipIdx,  {
val x459 = x457 * x458
x459
})
zipIdx += 1
} // end while
x455
}
val x460 = x460_block
def x464_block = {
var x461 = x460.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x460.size) {
val x462 = x460.dcApply(reduceIdx)
x461 = {
val x463 = x461 + x462
x463
}
reduceIdx += 1
} // end while
x461
}
val x464 = x464_block
val x465 = x446(x448) = x464
x465
forIdx += 1
} // end while
}
val x470 = x470_block
x446
}
val x472 = x472_block
def x497_block = { 
val x475 = x472.isRow
val x495 = {
def x495thenb(): Unit = {
val x476 = print("[ ")
val x477 = x472.length
var x479 : Int = 0
val x484 = while (x479 < x477) {
val x480 = x472(x479)
val x481 = print(x480)
val x482 = print(" ")
x482
x479 = x479 + 1
}
val x485 = print("]\n")
x485
}
def x495elseb(): Unit = {
val x477 = x472.length
var x487 : Int = 0
val x493 = while (x487 < x477) {
val x488 = print("[")
val x489 = x472(x487)
val x490 = print(x489)
val x491 = print(" ]\n")
x491
x487 = x487 + 1
}
x493
}
if (x475) {
x495thenb()
} else {
x495elseb()
}
}
x495
}
val x497 = x497_block
val x498 = print("\n")
val x499 = ppl.delite.runtime.profiler.PerformanceTimer.start("app", false)
def x507_block = {
val x62 = x31.length
val x63 = x31.isRow
val x505 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x62,x63)
var mapIdx = 0
while (mapIdx < x31.size) {
val x500 = x31.dcApply(mapIdx)
x505.dcUpdate(mapIdx,  {
val x501 = new generated.scala.DoubleVectorImpl(2,true)
val x502 = x501(0) = 1.0
val x503 = x501(1) = x500
x501
})
mapIdx += 1
} // end while
x505
}
val x507 = x507_block
def x526_block = { 
val x508 = x507.length
val x509 = x508 > 0
val x512 = {
def x512thenb(): Int = {
val x510 = x507(0)
val x511 = x510.length
x511
}
def x512elseb(): Int = {
0
}
if (x509) {
x512thenb()
} else {
x512elseb()
}
}
val x513 = new generated.scala.DoubleMatrixImpl(x508,x512)
var x515 : Int = 0
val x524 = while (x515 < x508) {
var x517 : Int = 0
val x522 = while (x517 < x512) {
val x518 = x507(x515)
val x519 = x518(x517)
val x520 = x513(x515, x517) = x519
x520
x517 = x517 + 1
}
x522
x515 = x515 + 1
}
x513
}
val x526 = x526_block
val x527 = x526.numRows
val x528 = x527
val x529 = 25.0 / x528
def x544_block = { 
val x530 = 14.99 - -10.0
val x531 = x530 / x529
val x532 = Math.ceil(x531)
val x533 = x532.asInstanceOf[Int]
val x534 = new generated.scala.DoubleVectorImpl(x533,true)
var x536 : Int = 0
val x542 = while (x536 < x533) {
val x537 = x536
val x538 = x529 * x537
val x539 = x538 + -10.0
val x540 = x534(x536) = x539
x540
x536 = x536 + 1
}
x534
}
val x544 = x544_block
def x551_block = {
val x545 = x544.length
val x546 = x544.isRow
val x547 = !x546
val x548 = new generated.scala.DoubleVectorImpl(x545,x547)
var mapIdx = 0
while (mapIdx < x544.size) {
val x550 = x544.dcApply(mapIdx)
x548.dcUpdate(mapIdx,  {
x550
})
mapIdx += 1
} // end while
x548
}
val x551 = x551_block
def x561_block = {
val x557 = x551.length
val x558 = x551.isRow
val x559 = new generated.scala.VectorImpl[generated.scala.Vector[Double]](x557,x558)
var mapIdx = 0
while (mapIdx < x551.size) {
val x552 = x551.dcApply(mapIdx)
x559.dcUpdate(mapIdx,  {
val x553 = new generated.scala.DoubleVectorImpl(2,true)
val x554 = x553(0) = 1.0
val x555 = x553(1) = x552
x553
})
mapIdx += 1
} // end while
x559
}
val x561 = x561_block
def x580_block = { 
val x562 = x561.length
val x563 = x562 > 0
val x566 = {
def x566thenb(): Int = {
val x564 = x561(0)
val x565 = x564.length
x565
}
def x566elseb(): Int = {
0
}
if (x563) {
x566thenb()
} else {
x566elseb()
}
}
val x567 = new generated.scala.DoubleMatrixImpl(x562,x566)
var x569 : Int = 0
val x578 = while (x569 < x562) {
var x571 : Int = 0
val x576 = while (x571 < x566) {
val x572 = x561(x569)
val x573 = x572(x571)
val x574 = x567(x569, x571) = x573
x574
x571 = x571 + 1
}
x576
x569 = x569 + 1
}
x567
}
val x580 = x580_block
val x597 = x580.numRows
val x598 = new generated.scala.IndexVectorRangeImpl(0,x597)
def x1077_block = {
val x1073 = x598.length
val x1074 = x598.isRow
val x1075 = new generated.scala.DoubleVectorImpl(x1073,x1074)
var mapIdx = 0
while (mapIdx < x598.size) {
val x599 = x598.dcApply(mapIdx)
x1075.dcUpdate(mapIdx,  {
def x596_block = { 
val x581 = x526.numCols
val x582 = new generated.scala.DoubleMatrixImpl(x581,x527)
val x583 = x582.numRows
var x585 : Int = 0
val x594 = while (x585 < x583) {
val x586 = x582.numCols
var x588 : Int = 0
val x592 = while (x588 < x586) {
val x589 = x526(x588, x585)
val x590 = x582(x585, x588) = x589
x590
x588 = x588 + 1
}
x592
x585 = x585 + 1
}
x582
}
val x596 = x596_block
def x610_block = {
val x62 = x31.length
val x63 = x31.isRow
val x608 = new generated.scala.DoubleVectorImpl(x62,x63)
var mapIdx = 0
while (mapIdx < x31.size) {
val x601 = x31.dcApply(mapIdx)
x608.dcUpdate(mapIdx,  {
val x600 = x580(x599, 1)
val x602 = x600 - x601
val x603 = -0.1 * x602
val x604 = x603 * x602
val x605 = x604 / 200.0
val x606 = Math.exp(x605)
val x607 = x606 / 2.0
x607
})
mapIdx += 1
} // end while
x608
}
val x610 = x610_block
val x611 = x610.length
def x628_block = { 
val x612 = new generated.scala.DoubleMatrixImpl(x611,x611)
var x613 = 0
val x614 = x613
val x626 = while ({val x616 = x613
val x617 = x616 < x611
x617}) {
val x619 = x613
val x620 = x613
val x621 = x613
val x622 = x610(x621)
val x623 = x612(x619, x620) = x622
val x624 = x613 += 1
()
}
x612
}
val x628 = x628_block
def x691_block = { 
val x646 = x596.numRows
val x629 = x628.numCols
val x647 = new generated.scala.DoubleMatrixImpl(x646,x629)
val x648 = new generated.scala.IndexVectorRangeImpl(0,x646)
def x689_block = {
var forIdx = 0
while (forIdx < x648.size) {
val x649 = x648.dcApply(forIdx)
var x650 = 0
val x651 = x650
val x684 = while ({val x654 = x650
val x652 = x647.numCols
val x655 = x654 < x652
x655}) {
var x657 = 1
val x659 = x650
val x658 = x596(x649, 0)
def x645_block = { 
val x630 = x628.numRows
val x631 = new generated.scala.DoubleMatrixImpl(x629,x630)
val x632 = x631.numRows
var x634 : Int = 0
val x643 = while (x634 < x632) {
val x635 = x631.numCols
var x637 : Int = 0
val x641 = while (x637 < x635) {
val x638 = x628(x637, x634)
val x639 = x631(x634, x637) = x638
x639
x637 = x637 + 1
}
x641
x634 = x634 + 1
}
x631
}
val x645 = x645_block
val x660 = x645(x659, 0)
val x661 = x658 * x660
var x662 = x661
val x663 = x657
val x678 = while ({val x666 = x657
val x664 = x645.numCols
val x667 = x666 < x664
x667}) {
val x669 = x657
val x671 = x650
val x672 = x657
val x670 = x596(x649, x669)
val x673 = x645(x671, x672)
val x674 = x670 * x673
val x675 = x662 += x674
val x676 = x657 += 1
()
}
val x679 = x650
val x680 = x662
val x681 = x647(x649, x679) = x680
val x682 = x650 += 1
()
}
()
forIdx += 1
} // end while
}
val x689 = x689_block
x647
}
val x691 = x691_block
def x751_block = { 
val x581 = x526.numCols
val x706 = x691.numRows
val x707 = new generated.scala.DoubleMatrixImpl(x706,x581)
val x708 = new generated.scala.IndexVectorRangeImpl(0,x706)
def x749_block = {
var forIdx = 0
while (forIdx < x708.size) {
val x709 = x708.dcApply(forIdx)
var x710 = 0
val x711 = x710
val x744 = while ({val x714 = x710
val x712 = x707.numCols
val x715 = x714 < x712
x715}) {
var x717 = 1
val x719 = x710
val x718 = x691(x709, 0)
val x720 = x596(x719, 0)
val x721 = x718 * x720
var x722 = x721
val x723 = x717
val x738 = while ({val x726 = x717
val x724 = x596.numCols
val x727 = x726 < x724
x727}) {
val x729 = x717
val x731 = x710
val x732 = x717
val x730 = x691(x709, x729)
val x733 = x596(x731, x732)
val x734 = x730 * x733
val x735 = x722 += x734
val x736 = x717 += 1
()
}
val x739 = x710
val x740 = x722
val x741 = x707(x709, x739) = x740
val x742 = x710 += 1
()
}
()
forIdx += 1
} // end while
}
val x749 = x749_block
x707
}
val x751 = x751_block
def x987_block = { 
val x752 = x751.cloneL
var x753 = x752
val x754 = x751.numCols
def x778_block = { 
def x759_block = { 
val x755 = new generated.scala.DoubleVectorImpl(x754,true)
def x757_block = {
var mapIdx = 0
while (mapIdx < x755.size) {
val x756 = x755.dcApply(mapIdx)
x755.dcUpdate(mapIdx,  {
1.0
})
mapIdx += 1
} // end while
x755
}
val x757 = x757_block
x757
}
val x759 = x759_block
def x776_block = { 
val x760 = new generated.scala.DoubleMatrixImpl(x754,x754)
var x761 = 0
val x762 = x761
val x774 = while ({val x764 = x761
val x765 = x764 < x754
x765}) {
val x767 = x761
val x768 = x761
val x769 = x761
val x770 = x759(x769)
val x771 = x760(x767, x768) = x770
val x772 = x761 += 1
()
}
x760
}
val x776 = x776_block
x776
}
val x778 = x778_block
val x779 = x753
def x785_block = {
val x781 = x779.numRows
val x782 = x779.numCols
val x783 = new generated.scala.DoubleMatrixImpl(x781,x782)
var mapIdx = 0
while (mapIdx < x779.size) {
val x780 = x779.dcApply(mapIdx)
x783.dcUpdate(mapIdx,  {
x780
})
mapIdx += 1
} // end while
x783
}
val x785 = x785_block
val x786 = x753
val x787 = x786.numCols
val x788 = x785.insertAllCols(x787,x778)
var x789 = 0
var x790 = false
var x791 = 0
val x792 = x790
val x794 = x791
val x795 = x785
val x984 = while ({val x799 = x790
val x800 = !x799
val x801 = x791
val x796 = x795.numRows
val x802 = x801 < x796
val x803 = x800 && x802
x803}) {
val x805 = x789
val x796 = x795.numRows
val x806 = x796 <= x805
val x809 = {
def x809thenb(): Unit = {
x790 = true
()
}
def x809elseb(): Unit = {
()
}
if (x806) {
x809thenb()
} else {
x809elseb()
}
}
val x810 = x790
val x811 = !x810
val x981 = {
def x981thenb(): Unit = {
val x812 = x791
var x813 = x812
val x814 = x790
val x816 = x813
val x817 = x789
val x844 = while ({val x821 = x790
val x822 = !x821
val x823 = x813
val x824 = x789
val x825 = x795(x823, x824)
val x826 = x825==0.0
val x827 = x822 && x826
x827}) {
val x830 = x795.numCols
val x829 = x813 += 1
val x831 = x813
val x832 = x830==x831
val x842 = {
def x842thenb(): Unit = {
val x833 = x791
x813 = x833
val x835 = x789 += 1
val x836 = x789
val x837 = x796==x836
val x840 = {
def x840thenb(): Unit = {
x790 = true
()
}
def x840elseb(): Unit = {
()
}
if (x837) {
x840thenb()
} else {
x840elseb()
}
}
x840
}
def x842elseb(): Unit = {
()
}
if (x832) {
x842thenb()
} else {
x842elseb()
}
}
x842
}
val x845 = x790
val x846 = !x845
val x979 = {
def x979thenb(): Unit = {
val x847 = x813
val x851 = x813
val x852 = x791
def x855_block = { 
val x830 = x795.numCols
val x853 = x852 * x830
val x854 = x795.vview(x853,1,x830,true)
x854
}
val x855 = x855_block
def x872_block = { 
var x856 = 0
val x857 = x856
val x858 = x785
val x870 = while ({val x861 = x856
val x859 = x858.numCols
val x862 = x861 < x859
x862}) {
val x864 = x856
val x865 = x856
val x866 = x855(x865)
val x867 = x785(x851, x864) = x866
val x868 = x856 += 1
()
}
()
}
val x872 = x872_block
val x873 = x791
def x850_block = { 
val x830 = x795.numCols
val x848 = x847 * x830
val x849 = x795.vview(x848,1,x830,true)
x849
}
val x850 = x850_block
def x890_block = { 
var x874 = 0
val x875 = x874
val x876 = x785
val x888 = while ({val x879 = x874
val x877 = x876.numCols
val x880 = x879 < x877
x880}) {
val x882 = x874
val x883 = x874
val x884 = x850(x883)
val x885 = x785(x873, x882) = x884
val x886 = x874 += 1
()
}
()
}
val x890 = x890_block
val x891 = x791
val x892 = x791
val x893 = x785
val x898 = x791
val x899 = x789
def x897_block = { 
val x894 = x893.numCols
val x895 = x892 * x894
val x896 = x893.vview(x895,1,x894,true)
x896
}
val x897 = x897_block
def x907_block = {
val x901 = x897.length
val x902 = x897.isRow
val x903 = new generated.scala.DoubleVectorImpl(x901,x902)
var mapIdx = 0
while (mapIdx < x897.size) {
val x905 = x897.dcApply(mapIdx)
x903.dcUpdate(mapIdx,  {
val x900 = x893(x898, x899)
val x906 = x905 / x900
x906
})
mapIdx += 1
} // end while
x903
}
val x907 = x907_block
def x924_block = { 
var x908 = 0
val x909 = x908
val x910 = x785
val x922 = while ({val x913 = x908
val x911 = x910.numCols
val x914 = x913 < x911
x914}) {
val x916 = x908
val x917 = x908
val x918 = x907(x917)
val x919 = x785(x891, x916) = x918
val x920 = x908 += 1
()
}
()
}
val x924 = x924_block
val x925 = x785
val x926 = x925.numRows
var x928 : Int = 0
val x976 = while (x928 < x926) {
val x929 = x791
val x930 = x928 != x929
val x974 = {
def x974thenb(): Unit = {
def x934_block = { 
val x931 = x925.numCols
val x932 = x928 * x931
val x933 = x925.vview(x932,1,x931,true)
x933
}
val x934 = x934_block
val x935 = x791
def x938_block = { 
val x931 = x925.numCols
val x936 = x935 * x931
val x937 = x925.vview(x936,1,x931,true)
x937
}
val x938 = x938_block
val x939 = x789
def x947_block = {
val x941 = x938.length
val x942 = x938.isRow
val x943 = new generated.scala.DoubleVectorImpl(x941,x942)
var mapIdx = 0
while (mapIdx < x938.size) {
val x945 = x938.dcApply(mapIdx)
x943.dcUpdate(mapIdx,  {
val x940 = x925(x928, x939)
val x946 = x945 * x940
x946
})
mapIdx += 1
} // end while
x943
}
val x947 = x947_block
def x955_block = {
val x948 = x934.length
val x949 = x934.isRow
val x950 = new generated.scala.DoubleVectorImpl(x948,x949)
var zipIdx = 0
while (zipIdx < x934.size) {
val x952 = x934.dcApply(zipIdx)
val x953 = x947.dcApply(zipIdx)
x950.dcUpdate(zipIdx,  {
val x954 = x952 - x953
x954
})
zipIdx += 1
} // end while
x950
}
val x955 = x955_block
def x972_block = { 
var x956 = 0
val x957 = x956
val x958 = x785
val x970 = while ({val x961 = x956
val x959 = x958.numCols
val x962 = x961 < x959
x962}) {
val x964 = x956
val x965 = x956
val x966 = x955(x965)
val x967 = x785(x928, x964) = x966
val x968 = x956 += 1
()
}
()
}
val x972 = x972_block
x972
}
def x974elseb(): Unit = {
()
}
if (x930) {
x974thenb()
} else {
x974elseb()
}
}
x974
x928 = x928 + 1
}
val x977 = x789 += 1
()
}
def x979elseb(): Unit = {
()
}
if (x846) {
x979thenb()
} else {
x979elseb()
}
}
x979
}
def x981elseb(): Unit = {
()
}
if (x811) {
x981thenb()
} else {
x981elseb()
}
}
val x982 = x791 += 1
()
}
val x985 = x785.removeCols(0,x754)
x785
}
val x987 = x987_block
def x1013_block = { 
val x706 = x691.numRows
val x988 = new generated.scala.DoubleVectorImpl(x706,false)
val x708 = new generated.scala.IndexVectorRangeImpl(0,x706)
def x1011_block = {
var forIdx = 0
while (forIdx < x708.size) {
val x989 = x708.dcApply(forIdx)
def x993_block = { 
val x990 = x691.numCols
val x991 = x989 * x990
val x992 = x691.vview(x991,1,x990,true)
x992
}
val x993 = x993_block
def x1001_block = {
val x994 = x993.length
val x995 = x993.isRow
val x996 = new generated.scala.DoubleVectorImpl(x994,x995)
var zipIdx = 0
while (zipIdx < x993.size) {
val x998 = x993.dcApply(zipIdx)
val x999 = x56.dcApply(zipIdx)
x996.dcUpdate(zipIdx,  {
val x1000 = x998 * x999
x1000
})
zipIdx += 1
} // end while
x996
}
val x1001 = x1001_block
def x1005_block = {
var x1002 = x1001.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x1001.size) {
val x1003 = x1001.dcApply(reduceIdx)
x1002 = {
val x1004 = x1002 + x1003
x1004
}
reduceIdx += 1
} // end while
x1002
}
val x1005 = x1005_block
val x1006 = x988(x989) = x1005
x1006
forIdx += 1
} // end while
}
val x1011 = x1011_block
x988
}
val x1013 = x1013_block
def x1041_block = { 
val x1014 = x987.numRows
val x1015 = new generated.scala.DoubleVectorImpl(x1014,false)
val x1016 = new generated.scala.IndexVectorRangeImpl(0,x1014)
def x1039_block = {
var forIdx = 0
while (forIdx < x1016.size) {
val x1017 = x1016.dcApply(forIdx)
def x1021_block = { 
val x1018 = x987.numCols
val x1019 = x1017 * x1018
val x1020 = x987.vview(x1019,1,x1018,true)
x1020
}
val x1021 = x1021_block
def x1029_block = {
val x1022 = x1021.length
val x1023 = x1021.isRow
val x1024 = new generated.scala.DoubleVectorImpl(x1022,x1023)
var zipIdx = 0
while (zipIdx < x1021.size) {
val x1026 = x1021.dcApply(zipIdx)
val x1027 = x1013.dcApply(zipIdx)
x1024.dcUpdate(zipIdx,  {
val x1028 = x1026 * x1027
x1028
})
zipIdx += 1
} // end while
x1024
}
val x1029 = x1029_block
def x1033_block = {
var x1030 = x1029.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x1029.size) {
val x1031 = x1029.dcApply(reduceIdx)
x1030 = {
val x1032 = x1030 + x1031
x1032
}
reduceIdx += 1
} // end while
x1030
}
val x1033 = x1033_block
val x1034 = x1015(x1017) = x1033
x1034
forIdx += 1
} // end while
}
val x1039 = x1039_block
x1015
}
val x1041 = x1041_block
def x1048_block = {
val x1042 = x1041.length
val x1043 = x1041.isRow
val x1044 = !x1043
val x1045 = new generated.scala.DoubleVectorImpl(x1042,x1044)
var mapIdx = 0
while (mapIdx < x1041.size) {
val x1047 = x1041.dcApply(mapIdx)
x1045.dcUpdate(mapIdx,  {
x1047
})
mapIdx += 1
} // end while
x1045
}
val x1048 = x1048_block
def x1052_block = { 
val x1049 = x580.numCols
val x1050 = x599 * x1049
val x1051 = x580.vview(x1050,1,x1049,true)
x1051
}
val x1052 = x1052_block
def x1059_block = {
val x1053 = x1052.length
val x1054 = x1052.isRow
val x1055 = !x1054
val x1056 = new generated.scala.DoubleVectorImpl(x1053,x1055)
var mapIdx = 0
while (mapIdx < x1052.size) {
val x1058 = x1052.dcApply(mapIdx)
x1056.dcUpdate(mapIdx,  {
x1058
})
mapIdx += 1
} // end while
x1056
}
val x1059 = x1059_block
def x1067_block = {
val x1060 = x1048.length
val x1061 = x1048.isRow
val x1062 = new generated.scala.DoubleVectorImpl(x1060,x1061)
var zipIdx = 0
while (zipIdx < x1048.size) {
val x1064 = x1048.dcApply(zipIdx)
val x1065 = x1059.dcApply(zipIdx)
x1062.dcUpdate(zipIdx,  {
val x1066 = x1064 * x1065
x1066
})
zipIdx += 1
} // end while
x1062
}
val x1067 = x1067_block
def x1071_block = {
var x1068 = x1067.dcApply(0)
var reduceIdx = 1
while (reduceIdx < x1067.size) {
val x1069 = x1067.dcApply(reduceIdx)
x1068 = {
val x1070 = x1068 + x1069
x1070
}
reduceIdx += 1
} // end while
x1068
}
val x1071 = x1071_block
x1071
})
mapIdx += 1
} // end while
x1075
}
val x1077 = x1077_block
val x1078 = ppl.delite.runtime.profiler.PerformanceTimer.stop("app", false)
val x1079 = println("Locally weighted linear regression")
val x1080 = println("guess: ")
def x1103_block = { 
val x1081 = x1077.isRow
val x1101 = {
def x1101thenb(): Unit = {
val x1082 = print("[ ")
val x1083 = x1077.length
var x1085 : Int = 0
val x1090 = while (x1085 < x1083) {
val x1086 = x1077(x1085)
val x1087 = print(x1086)
val x1088 = print(" ")
x1088
x1085 = x1085 + 1
}
val x1091 = print("]\n")
x1091
}
def x1101elseb(): Unit = {
val x1083 = x1077.length
var x1093 : Int = 0
val x1099 = while (x1093 < x1083) {
val x1094 = print("[")
val x1095 = x1077(x1093)
val x1096 = print(x1095)
val x1097 = print(" ]\n")
x1097
x1093 = x1093 + 1
}
x1099
}
if (x1081) {
x1101thenb()
} else {
x1101elseb()
}
}
x1101
}
val x1103 = x1103_block
val x1104 = print("\n")
()
}
}
/*****************************************
  End of Generated Code                  
*******************************************/
